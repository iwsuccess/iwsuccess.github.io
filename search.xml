<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>进程控制</title>
      <link href="/2022/04/26/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/04/26/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="程序和进程的概念"><a href="#程序和进程的概念" class="headerlink" title="程序和进程的概念:"></a>程序和进程的概念:</h1><p>程序: 是编译好的二进制文件, 存放在磁盘上, 占用的是磁盘空间, 是一个静态的概念.<br>进程: 一个启动的程序, 需要占用系统资源: 如 内存, cpu 终端 等<br>剧本—&gt;程序<br>进程—&gt;唱戏(舞台, 灯光, 道具, 人等资源)<br>同一个程序可以在多个终端执行, 类似与同一台戏可以在多个舞台演出.<br>每启动一个程序都会有一个进程PID, 即使是相同的程序多次启动也会有个不同的PID。</p><h1 id="并发和并行的概念"><a href="#并发和并行的概念" class="headerlink" title="并发和并行的概念"></a>并发和并行的概念</h1><p>并发: 在一个时间段内, 一个CPU上, 有多个程序在执行.<br>并行: 并行指两个或两个以上的程序在同一时刻发生(需要有多核)。<br>cpu会将一个大的时间段分成多个小的时间片, 让进程轮流使用CPU的时间片.<br>#进程的五态模型和七态模型</p><p>#进程创建</p><ul><li>调用fork函数的内核实现原理:<br><img src="/images/fork.png"><br><img src="/images/fork_two.png"></li></ul><h2 id="循环创建子进程问题（子进程也会创建子进程）："><a href="#循环创建子进程问题（子进程也会创建子进程）：" class="headerlink" title="循环创建子进程问题（子进程也会创建子进程）："></a>循环创建子进程问题（子进程也会创建子进程）：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> 1 //fork函数测试，循环创建子进程</span><br><span class="line"> 2 #include&lt;stdio.h&gt;</span><br><span class="line"> 3 #include&lt;stdlib.h&gt;</span><br><span class="line"> 4 #include&lt;string.h&gt;</span><br><span class="line"> 5 #include&lt;sys/types.h&gt;</span><br><span class="line"> 6 #include&lt;unistd.h&gt;</span><br><span class="line"> 7</span><br><span class="line"> 8 int main()&#123;</span><br><span class="line"> 9</span><br><span class="line">10     int i=0;</span><br><span class="line">11 for(;i&lt;3;i++)&#123;</span><br><span class="line">12     //创建子进程</span><br><span class="line">13     printf(&quot;before fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">14     pid_t pid=fork();</span><br><span class="line">15     if(pid&lt;0)&#123;</span><br><span class="line">16         perror(&quot;error&quot;);</span><br><span class="line">17         return -1;</span><br><span class="line">18     &#125;</span><br><span class="line">19     else if(pid&gt;0)&#123; //父进程</span><br><span class="line">20         printf(&quot;father: pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">21     //  sleep(1);</span><br><span class="line">22     &#125;</span><br><span class="line">23     else if(pid==0)&#123;  //子进程</span><br><span class="line">24         printf(&quot;child :pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">25</span><br><span class="line">26         &#125;</span><br><span class="line">27     printf(&quot;after fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31     &#125;</span><br><span class="line">32 return 0;</span><br><span class="line">33 &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主进程总共创建了7个子进程，分析如下：<br><img src="/images/child_fork.png"></p><h2 id="修该后的代码"><a href="#修该后的代码" class="headerlink" title="修该后的代码"></a>修该后的代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> 1 //fork函数测试，循环创建子进程</span><br><span class="line"> 2 #include&lt;stdio.h&gt;</span><br><span class="line"> 3 #include&lt;stdlib.h&gt;</span><br><span class="line"> 4 #include&lt;string.h&gt;</span><br><span class="line"> 5 #include&lt;sys/types.h&gt;</span><br><span class="line"> 6 #include&lt;unistd.h&gt;</span><br><span class="line"> 7</span><br><span class="line"> 8 int main()&#123;</span><br><span class="line"> 9</span><br><span class="line">10     int i=0;</span><br><span class="line">11 for(;i&lt;3;i++)&#123;</span><br><span class="line">12     //创建子进程</span><br><span class="line">13     printf(&quot;before fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">14     pid_t pid=fork();</span><br><span class="line">15     if(pid&lt;0)&#123;</span><br><span class="line">16         perror(&quot;error&quot;);</span><br><span class="line">17         return -1;</span><br><span class="line">18     &#125;</span><br><span class="line">19     else if(pid&gt;0)&#123; //父进程</span><br><span class="line">20         printf(&quot;father: pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">21     //  sleep(1);</span><br><span class="line">22     &#125;</span><br><span class="line">23     else if(pid==0)&#123;  //子进程</span><br><span class="line">24         printf(&quot;child :pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">25         break;//只要子进程在此处跳出循环即可！！！</span><br><span class="line">26         &#125;</span><br><span class="line">27     printf(&quot;after fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31     &#125;</span><br><span class="line">32 return 0;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只要在子进程代码块中，执行完逻辑后，break出循环就能保证子进程不在创建子进程！！！</p><h1 id="父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）"><a href="#父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）" class="headerlink" title="父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）"></a>父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）</h1><p><img src="/images/global.png"><br>父子进程不能共享全局变量；但是如果父子进程只是对全局变量做读操作，则父子进程在真正的物理内存空间中只有一份，属于共享！但是如果父子进程中的任何一个进程对该变量进行修改操作，会在内存中拷贝一个副本，然后在这个副本上进行修改，修改完成后在映射回虚拟内存空间上去！！！</p><ul><li><p>总结：写时复制，读时共享！！！</p></li><li><p>如果想在一个进程内部执行系统命令或者是应用程序, 优先应该想到如下方式:<br>先fork(), 然后在子进程里面执行execl拉起可执行程序或者命令.<br>pid &#x3D; fork();<br>if(pid&#x3D;&#x3D;0)<br>{<br>  execl(…);<br>}</p></li></ul><p>execl: 一般用于执行用户自定义的应用程序.<br>execp: 一般用于执行系统命令</p><ul><li>exec函数是用一个新程序替换了当前进程的代码段、数据段、堆和栈；原有的进程空间没有发生变化，并没有创建新的进程，进程PID没有发生变化。<br><img src="/images/excel.png"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件IO</title>
      <link href="/2022/04/24/%E6%96%87%E4%BB%B6IO/"/>
      <url>/2022/04/24/%E6%96%87%E4%BB%B6IO/</url>
      
        <content type="html"><![CDATA[<h1 id="C库IO函数的工作流程："><a href="#C库IO函数的工作流程：" class="headerlink" title="C库IO函数的工作流程："></a>C库IO函数的工作流程：</h1><p><img src="/images/file.png"></p><p><img src="/images/file1.png"></p><ul><li>使用fopen函数打开一个文件, 返回一个FILE* fp, 这个指针指向的结构体有三个重要的成员.<br>（1）文件描述符: 通过文件描述可以找到文件的inode, 通过inode可以找到对应的数据块<br>（2）文件指针: 读和写共享一个文件指针, 读或者写都会引起文件指针的变化<br>（3）文件缓冲区: 读或者写会先通过文件缓冲区, 主要目的是为了减少对磁盘的读写次数, 提高读写磁盘的效率.</li></ul><h1 id="C库函数和系统函数的关系（printf举例）"><a href="#C库函数和系统函数的关系（printf举例）" class="headerlink" title="C库函数和系统函数的关系（printf举例）"></a>C库函数和系统函数的关系（printf举例）</h1><p><img src="/images/printf.png"></p><p>库函数和系统函数的关系是: 调用和被调用的关系;库函数是对系统函数的进一步封装.</p><p>系统调用: 由操作系统实现并提供给外部应用程序的编程接口(Application Programming Interface, API), 是应用程序同系统之间数据交互的桥梁.</p><h1 id="虚拟地址空间"><a href="#虚拟地址空间" class="headerlink" title="虚拟地址空间"></a>虚拟地址空间</h1><p><img src="/images/virtual.png"></p><p>以32位系统为例，系统会为每一个进程分配0~4G的空间（虚拟地址空间）。<br>（1）进程的虚拟地址空间分为用户区和内核区, 其中内核区是受保护的, 用户是不能够对其进行读写操作的;<br>（2）内核区中很重要的一个就是进程管理, 进程管理中有一个区域就是PCB(本质是一个结构体);<br>（3）PCB中有文件描述符表, 文件描述符表中存放着打开的文件描述符, 涉及到文件的IO操作都会用到这个文件描述符.</p><h1 id="PCB和文件描述符"><a href="#PCB和文件描述符" class="headerlink" title="PCB和文件描述符"></a>PCB和文件描述符</h1><p><img src="/images/pcb.png"></p><p>备注:<br>pcb：结构体:task_stuct, 该结构体在:<br>&#x2F;usr&#x2F;src&#x2F;linux-headers-4.4.0-97&#x2F;include&#x2F;linux&#x2F;sched.h:1390<br>一个进程有一个文件描述符表：1024<br>前三个被占用, 分别是STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO<br>文件描述符作用：通过文件描述符找到inode, 通过inode找到磁盘数据块.</p><p>虚拟地址空间–&gt;内核区–&gt;进程管理–&gt;pcb–&gt;文件描述表–&gt;文件描述符–&gt;使用IO操作使用文件描述符</p><ul><li><p>lseek函数常用操作<br>文件指针移动到头部<br>lseek(fd, 0, SEEK_SET);<br>获取文件指针当前位置<br>int len &#x3D; lseek(fd, 0, SEEK_CUR);<br>获取文件长度<br>int len &#x3D; lseek(fd, 0, SEEK_END);<br>lseek实现文件拓展<br>off_t currpos;<br>&#x2F;&#x2F; 从文件尾部开始向后拓展1000个字节<br>currpos &#x3D; lseek(fd, 1000, SEEK_END);<br>&#x2F;&#x2F; 额外执行一次写操作，否则文件无法完成拓展<br>write(fd, “a”, 1);    &#x2F;&#x2F; 数据随便写</p></li><li><p>文件权限计算方法:<br>mode &amp; ~umask</p></li><li><p>思考: 阻塞和非阻塞是文件的属性还是read函数的属性?<br>（1）通过读普通文件测试得知: read函数在读完文件内容之后, 若再次read,则read函数会立刻返回, 表明read函数读普通文件是非阻塞的.<br>（2）设备文件:&#x2F;dev&#x2F;tty 和 标准输入STDIN_FILENO，通过读&#x2F;dev&#x2F;tty终端设备文件和标准输入, 表明read函数读设备文件是阻塞的.<br>（3）结论: 阻塞和非阻塞不是read函数的属性, 而是文件本身的属性.<br>socket pipe这两种文件都是阻塞的.</p></li></ul><h1 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h1><ul><li>使用st_mode成员判断文件类型:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line">   if((sb.st_mode &amp; S_IFMT) ==S_IFLNK)</span><br><span class="line">   &#123;   </span><br><span class="line">       printf(&quot;连接文件\n&quot;);</span><br><span class="line">   &#125;   </span><br><span class="line">   </span><br><span class="line">//方法二</span><br><span class="line">   if (S_ISREG(sb.st_mode)) </span><br><span class="line">   &#123;   </span><br><span class="line">       printf(&quot;普通文件\n&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>判断文件权限:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> if(sb.st_mode &amp; S_IROTH)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;---R----&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>lstat和stat函数:<br>（1）对于普通文件来说, lstat函数和stat函数一样<br>（2）对于软连接文件来说, lstat函数获取的是连接文件本身的属性,<br>（3）stat函数获取的是连接文件指向的文件的属性.</p></li><li><p>目录操作:<br>（1）打开目录 opendir<br>（2）循环读目录: readdir<br>（3）关闭目录: closedir</p></li><li><p>dup和dup2函数:复制文件描述符—-详情看图</p></li></ul><p><img src="/images/dup.png"></p><ul><li>fcntl函数:<br>(1)复制文件描述符: int fd &#x3D; fcntl(oldfd, F_DUPFD, 0);<br>(2)获得和设置文件的flag属性:<br>int flag &#x3D; fcntl(fd, F_GETFL, 0);<br>flag &#x3D;flag|O_APPEND;<br>fcntl(fd, F_SETFL, flag);</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>makefill gdb</title>
      <link href="/2022/04/23/makefill-gdb/"/>
      <url>/2022/04/23/makefill-gdb/</url>
      
        <content type="html"><![CDATA[<ul><li><p>makefile:<br>makefile文件是用来管理项目工程文件, 通过执行make命令, make就会解析并执行makefile文件.<br>makefile命名: makefile或者Makefile</p></li><li><p>makefile的编写:<br>规则如下:<br>目标: 依赖<br>(tab)命令</p></li><li><p>第一个版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main: main.c fun1.c fun2.c sum.c</span><br><span class="line">gcc -o main main.c fun1.c fun2.c sum.c</span><br></pre></td></tr></table></figure><p>缺点: 效率低, 修改一个文件, 所有的文件会全部重新编译.</p></li><li><p>第二个版本：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 main:main.o fun1.o fun2.o</span><br><span class="line">2     gcc -o main main.o fun1.o fun2.o</span><br><span class="line">3 main.o:main.c</span><br><span class="line">4     gcc -c main.c -I ./</span><br><span class="line">5 fun1.o:fun1.c</span><br><span class="line">6     gcc -c fun1.c</span><br><span class="line">7 fun2.o:fun2.c</span><br><span class="line">8     gcc -c fun2.c</span><br></pre></td></tr></table></figure><p>检查规则:<br>要想生成目标文件, 先要检查依赖条件是否都存在.<br>若都存在, 则比较目标时间和依赖的时间, 如果依赖的时候比目标的时间新,则重新生成目标; 否则不重新生成.<br>若不存在, 则往下找有没有生成依赖的规则, 有则生成, 如果没有则报错.<br>第二版本的缺点: 冗余, 若.c文件数量很多, 编写起来比较麻烦.</p><ul><li>第三个版本：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 1 target=main</span><br><span class="line"> 2 objects=main.o fun1.o fun2.o</span><br><span class="line"> 3 CC=gcc</span><br><span class="line"> 4 CPPFLAGS=-I./</span><br><span class="line"> 5</span><br><span class="line"> 6 $(target):$(objects)</span><br><span class="line"> 7     $(CC) -o $@ $^</span><br><span class="line"> 8 %.o:%.c</span><br><span class="line"> 9     $(CC) -c $&lt; $(CPPFLAGS)</span><br><span class="line">10</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>变量:<br>自定义变量: var &#x3D; hello, $(var)<br>自带变量: CC CPPFLAGS CFLAGS LDFLAGS<br>自动变量: $@ $&lt; $^<br>模式规则: %.o:%.c——&gt; 前后的%必须是相同 </p><ul><li>第四个版本：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 1 target=main</span><br><span class="line"> 2 src=$(wildcard *.c)</span><br><span class="line"> 3 objects=$(patsubst %.c,%.o,$(src))</span><br><span class="line"> 4 CC=gcc</span><br><span class="line"> 5 CPPFLAGS=-I./</span><br><span class="line"> 6</span><br><span class="line"> 7 $(target):$(objects)</span><br><span class="line"> 8     $(CC) -o $@ $^</span><br><span class="line"> 9 %.o:%.c</span><br><span class="line">10     $(CC) -c $&lt; $(CPPFLAGS)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>makefile函数：<br>1.wildcard – 查找指定目录下的指定类型的文件<br>src&#x3D;$(wildcard *.c)  &#x2F;&#x2F;找到当前目录下所有后缀为.c的文件,赋值给src<br>2.patsubst – 匹配替换<br>obj&#x3D;$(patsubst %.c,%.o, $(src)) &#x2F;&#x2F;把src变量里所有后缀为.c的文件替换成.o<br>如: 当前目录下有a.c b.c c.c<br>src&#x3D;$(wildcard *.c) —–&gt; src&#x3D;a.c b.c c.c<br>obj&#x3D;$(patsubst %.c,%.o, $(src)) —–&gt; obj&#x3D;a.o b.o c.o</p><ul><li>第五个版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 1 target=main</span><br><span class="line"> 2 src=$(wildcard *.c)</span><br><span class="line"> 3 objects=$(patsubst %.c,%.o,$(src))</span><br><span class="line"> 4 CC=gcc</span><br><span class="line"> 5 CPPFLAGS=-I./</span><br><span class="line"> 6</span><br><span class="line"> 7 $(target):$(objects)  #第一个目标即为终极目标，直接make就会运行！！！</span><br><span class="line"> 8     $(CC) -o $@ $^</span><br><span class="line"> 9 %.o:%.c</span><br><span class="line">10     $(CC) -c $&lt; $(CPPFLAGS)</span><br><span class="line">11</span><br><span class="line">12 .PHONY:clean  #声明为伪目标。   非第一个目标，make clean才会运行嗷</span><br><span class="line">13 clean:</span><br><span class="line">14     -rm -f $(objects) $(target)   #rm前加-,可以保证clean下的前一个命令如果无法执行，不会影响在其后面加-的命令的执行！   rm -f: 强制执行, 比如若要删除的文件不存在使用-f不会报错。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加清理功能.<br>终极目标: makefile文件中第一次出现的目标叫做终极目标。<br>伪目标：声明目标为伪目标之后, makefile将不会检查该目标是否存在或者该目标是否需要更新。<br>.PHONY:clean<br>clean:<br>rm -f ….        </p><ul><li><p>使用-f可以指定makefile文件（因为执行make默认找的是makefile文件，通过-f参数可以指定其他名称的makefile文件）, 如: make -f new_makefile</p></li><li><p>gdb调试 :</p></li></ul><p>gdb是在程序运行的结果与预期不符合的时候, 可以使用gdb进行调试,<br>特别注意的是: 使用gdb调试需要在编译的时候加-g参数!!!!!!!</p><p>启动gdb:<br>gdb program<br>set args hello world<br>show args<br>执行程序:<br>run  #执行到断点位置，无断点，则执行完<br>start #第一条语句停下来</p><p>list操作:<br>list<br>list -<br>list func<br>list linenum<br>list file:func<br>list file:linenum<br>set listsize n<br>show listsize</p><p>断点操作:<br>b linenum<br>b func<br>b file:linenum<br>b file:func</p><p>info break</p><p>disable m n | m-n<br>enable  m n | m-n<br>delete m n | m-n </p><p>条件断点<br>一般来说, 为断点设置一个条件, 我们使用if关键词, 后面跟其断点条件。设置一个条件断点：<br>b test.c:8 if intValue &#x3D;&#x3D; 5</p><p>调试命令:<br>run （全部执行，直至第一个断点处）<br>start （执行至第一条语句）<br>next  （单步执行，不进入函数体）<br>step  （单步执行，进入函数体）<br>finish  （跳出函数体）<br>until  （执行完循环体）<br>continue  （执行至下一个断点处）</p><p>print var  （打印变量值）</p><p>自动显示:<br>display var  （显示变量）</p><p>info display  （列出所有需要显示的变量信息）</p><p>disable display m n | m-n   （使变量显示失效）<br>enable display m n | m-n     （使变量显示生效）</p><p>delete display m n | m-n   （删除需要显示的变量）<br>undisplay m n | m-n    （删除需要显示的变量）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim gcc库制作和使用</title>
      <link href="/2022/04/20/vim_gcc%E5%BA%93%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/20/vim_gcc%E5%BA%93%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>#gcc的工作流程<br><img src="/images/gcc.png"><br><img src="/images/gcc2.png"><br>1.预处理：cpp预处理器，去掉注释，展开头文件，宏替换<br>gcc -E test.c -o test.i<br>2.编译：gcc,将源代码文件编译成汇编代码<br>gcc -S test.i -o test.s<br>3.汇编：as，将汇编语言代码编译成二进制文件（目标代码）<br>gcc -c test.s -o test.o<br>4.链接：ld，链接test.c代码中调用的库函数<br>gcc test.o -o test.exe<br>#gcc的常用参数<br>-c  只编译, 生成.o文件, 通常称为目标文件<br>-I   指定头文件所在的路径<br>-L   指定库文件所在的路径<br>-l    指定库的名字<br>-o   指定生成的目标文件的名字<br>-g   包含调试信息, 使用gdb调试需要添加-g参数<br>#库</p><ul><li>库是二进制文件, 是源代码文件的另一种表现形式, 是加了密的源代码;<br>是一些功能相近或者是相似的函数的集合体</li></ul><h2 id="库可分静态库-static-library-和共享库-shared-library"><a href="#库可分静态库-static-library-和共享库-shared-library" class="headerlink" title="库可分静态库(static library)和共享库(shared library)"></a>库可分静态库(static library)和共享库(shared library)</h2><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><ul><li>静态库的制作：</li></ul><p>1.将.c文件编译成.o文件<br>gcc -c func1.c func2.c<br>2.使用ar命令将.o文件打包成.a文件<br>ar rcs libtest1.a func1.o func2.o</p><ul><li>静态库的使用（注意库名字是test1,去掉lib和.a）<br>gcc mian.c -I .&#x2F; -L .&#x2F; -l test1 -o main1<br>运行：.&#x2F;main1</li></ul><h2 id="静态库的优缺点"><a href="#静态库的优缺点" class="headerlink" title="静态库的优缺点"></a>静态库的优缺点</h2><ul><li>优点：</li></ul><p>函数库最终被打包到应用程序中，实现是函数本地化，寻址方便、速度快。<br>（库函数调用效率&#x3D;&#x3D;自定义函数使用效率）<br>程序在运行时与函数库再无瓜葛，移植方便。</p><ul><li>缺点：</li></ul><p>消耗系统资源较大, 每个进程使用静态库都要复制一份, 无端浪费内存。</p><p>静态库会给程序的更新、部署和发布带来麻烦。如果静态库libxxx.a更新了，所有使用它的应用程序都需要重新编译、发布给用户（对于玩家来说，可能是一个很小的改动，却导致整个程序重新下载）。</p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><ul><li>动态库的制作</li></ul><p>1.生成目标文件.o, 此时要加编译选项：-fPIC（fpic）<br>gcc -fpic -c fun1.c fun2.c<br>参数：-fpic创建与地址无关的编译程序(pic, position independent code), 目的就是为了能够在多个应用程序间共享.<br>2.生成共享库, 此时要加链接器选项: -shared（指定生成动态链接库）<br>gcc -shared fun1.o fun2.o -o libtest2.so</p><ul><li>动态库的使用</li></ul><p>gcc main.c -I.&#x2F; -L.&#x2F; -ltest2 -o main2<br>运行：.&#x2F;main2报错了！<br>动态库文件在编译的时候, 连接器需要使用参数-L找到库文件所在的路径;<br>在执行的时候, 是加载器ldd根据动态库的路径进行加载的, 与编译的时候用的-L<br>指定的路径无关.<br>最常用的解决办法:将LD_LIBRARY_PATH环境变量加到用户级别的配置文件<del>&#x2F;.bashrc中,<br>然后生效(. ~&#x2F;.bashrc    source ~&#x2F;.bashrc   退出终端然后再登录)<br>（1）dll放在用户家目录的新建的lib文件夹中，&#x2F;home&#x2F;qcc&#x2F;lib&#x2F;,配置如下<br>export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:</del>&#x2F;lib<br>（2）dll放在当前目录下或者当前目录的lib子目录下均可以的配置如下：<br>export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:.&#x2F;lib</p><ul><li><p>共享库的特点<br>动态库把对一些库函数的链接载入推迟到程序运行的时期。<br>可以实现进程之间的资源共享。（因此动态库也称为共享库）<br>将一些程序升级变得简单。<br>甚至可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）</p></li><li><p>比较静态库和动态库的优缺点<br> 静态库的优点:<br>   1 执行速度快, 是因为静态库已经编译到可执行文件内部了<br>   2 移植方便, 不依赖域其他的库文件<br> 缺点:<br>   1 耗费内存, 是由于每一个静态库的可执行程序都会加载一次<br>   2 部署更新麻烦, 因为静态库修改以后所有的调用到这个静态库的可执行文<br>件都需要重新编译</p></li></ul><p> 动态库的优点:<br>     1 节省内存<br>     2 部署升级更新方便, 只需替换动态库即可, 然后再重启服务.<br> 缺点:<br>     1 加载速度比静态库慢<br>     2 移植性差, 需要把所有用到的动态库都移植.</p><p>由于由静态库生成的可执行文件是把静态库加载到了其内部, 所以静态库生成的可执行文件一般会比动态库大.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2022/04/19/%E9%BB%91%E9%A9%AC_linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/19/%E9%BB%91%E9%A9%AC_linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>#linux基础–基础命令</p><ol><li><p>shell相关：shell就是命令解释器，shell将用户输入的命令解释成内核能够识别的指令。<br> 查看当前系统使用的shell：echo $SHELL<br> 当前系统支持的shell:cat &#x2F;etc&#x2F;shells</p></li><li><p>history会显示历史输入的所有命令。</p></li><li><p>linux下一切皆文件，有：字符设备文件（键盘&#x2F;鼠标）、块设备文件（硬盘）。</p></li><li><p>linux的目录结构：是一个倒立的树状结构<br>  &#x2F;bin: ls cp mv<br>  &#x2F;sbin: ifconfig halt shutdown<br>  &#x2F;lib: 库目录<br>  &#x2F;root: root用户的家目录<br>  &#x2F;dev: 字符设备和块设备.  在linux下, 一切皆是文件.<br>  &#x2F;home: 用户的家目录<br>  &#x2F;usr: 相当于windows的program files<br>  &#x2F;etc: 系统级别的配置文件<br>  &#x2F;mnt:<br>  &#x2F;media<br>  &#x2F;tmp<br>  &#x2F;opt</p></li><li><p>相对路径和绝对路径<br> 相对路径: 从当前目录开始表示的目录.<br> 绝对路径: 从根（&#x2F;）目录开始表示的目录.</p></li><li><p>tree命令，以树状形式查看指定目录内容，使用该命令需要安装软件tree。sudo apt-get install tree。<br> 用法： tree 目录</p></li><li><p>ls命令<br> ls -la  列出当前目录下所有文件的相信信息, 包括隐藏文件.<br> ls -ltr 列出当前目录下的文件, 按照时间逆向排序.(t:time,r:reverse)</p></li></ol><p>ls -l命令输出详解如下：</p><p><img src="/images/linux_ls.png"><br>说明：（1）计数参数：对于目录来说, 链接计数等于该目录下所有的目录总数(含. 和 ..), 但是不包含该目录的子目录下的目录文件数量, 执行ls -la命令可以进行查看。对于文件来说, 指的是该文件所有的硬链接文件数量。<br>（2）大小参数（单位：字节）：如果是目录: 只表示目录大小, 不包含目录中的内容, 目录大小为4k。如果是文件：表示文件大小.</p><p>8.cd命令：临近两个目录直接切换：cd -<br>如：开始在: &#x2F;home&#x2F;itcast&#x2F;test&#x2F;course&#x2F;day1&#x2F;test目录下, 执行了cd命令切换到家目录下, 然后在执行cd -又回到了&#x2F;home&#x2F;itcast&#x2F;test&#x2F;course&#x2F;day1&#x2F;test下.<br>~代表用户的家目录，如：cd等价于cd ~等价于cd &#x2F;home&#x2F;qcc</p><p>9.which命令：查看命令所在的目录。 如which ls   which cp。</p><p>10.pwd：显示当前目录。</p><p>11.touch命令<br>如果文件不存在, 创建新文件, 如果文件存在, 更新文件的最后修改时间（内容不变）。<br>命令使用方式：touch 文件名</p><p>12.mkdir命令<br>创建新目录, make directory<br>创建方式：mkdir目录名<br>如果创建多级目录需要添加参数 -p （parent）<br>例 ：在当前目录下创建目录:  mkdir mydir<br>在宿主目录下创建多级目录:  mkdir -p ~&#x2F;test&#x2F;hello&#x2F;world&#x2F;aa</p><p>13.rm命令<br>删除文件： rm 文件名<br>删除目录： rm  -r 目录名<br>参数：<br>-r：递归删除目录，删除目录必须添加此参数<br>-i：提示用户是否删除文件或目录<br>-f：强制删除<br>注意事项：<br>使用rm命令删除的文件或目录不会放入回收站中，数据不易恢复。</p><p>14.cp命令<br>cp命令: cp 源文件  目标文件<br>cp file1 file2 (不存在)<br>cp file1 file2 (存在)<br>cp file dir(必须存在)<br>cp -r dir1 dir2(不存在)<br>cp -r dir1 dir2(存在)<br>cp -a file1 file2（将属性也复制，创建时间也会被复制）</p><p>15.mv命令<br>mv命令: mv 源文件  目标文件<br>改名:<br>mv file1 file2(不存在)<br>mv file1 file2(存在)<br>mv dir1 dir2(不存在)</p><p>移动:<br>mv file dir (必须存在)<br>mv dir1 dir2(存在) </p><p>16.查看文件内容<br>cat more less head tail<br>tail -f test.log: 实时显示文件内容</p><h2 id="一个比较重要的应用：实时的显示日志-tail-f-test-log"><a href="#一个比较重要的应用：实时的显示日志-tail-f-test-log" class="headerlink" title="一个比较重要的应用：实时的显示日志 : tail -f test.log"></a>一个比较重要的应用：实时的显示日志 : tail -f test.log</h2><h2 id="例子：一个终端tail-f-test-log-另一个终端-echo-“hello-world”-gt-gt-test-log（-gt-是覆盖，-gt-gt-是追加）"><a href="#例子：一个终端tail-f-test-log-另一个终端-echo-“hello-world”-gt-gt-test-log（-gt-是覆盖，-gt-gt-是追加）" class="headerlink" title="例子：一个终端tail -f test.log , 另一个终端: echo “hello world” &gt;&gt;test.log（&gt;是覆盖，&gt;&gt;是追加）"></a>例子：一个终端tail -f test.log , 另一个终端: echo “hello world” &gt;&gt;test.log（&gt;是覆盖，&gt;&gt;是追加）</h2><p>17.软链接（文件和目录都可以创建软链接）</p><ul><li><p>相当于windows下的快捷方式。</p></li><li><p>ln -s 源文件 链接文件</p></li><li><p>注意点: 创建软连接，源文件一定要使用绝对路径！ 否则, 当软连接文件<br> 移动位置之后, 就会找不到指向的文件了.</p></li><li><p>软连接文件的大小是: 路径+文件名的总字节数，软链接存放的实际上存放的是源文件的路径。</p></li><li><p>删除源文件后，软链接就无法访问数据了。</p></li></ul><p>18.硬链接<br><img src="/images/hard_link.png"></p><ul><li><p>ln soucefile  desfile</p></li><li><p>硬链接不能建立在目录上</p></li><li><p>硬连接不能跨文件系统<br>硬链接文件和源文件的inode是相同的，文件系统的inode要求唯一，跨文件系统可能会使inode不同, 所以硬链接不能跨文件系统</p></li><li><p>创建一个硬链接文件, 硬链接计数+1, 删除一个则-1;    </p></li><li><p>ls -li: 可以查看文件的inode</p></li><li><p>作用:<br>1 可以起到同步文件的作用<br>2 可以起到保护文件的作用（当计数器变为0，才会删除）</p></li></ul><p>19.chmod修改文件权限</p><ul><li><p>文字设定法: chmod ug+wx file.log  (u&#x2F;g&#x2F;o&#x2F;a  r&#x2F;w&#x2F;x)  (+&#x2F;-&#x2F;&#x3D;)</p></li><li><p>数字设定法: chmod 777  file.log</p></li></ul><p>20.chown修改文件所有者和所属组（：&#x2F;.都可以）<br>sudo chown qcc:qcc aa.log<br>sudo chown mytest.mytest aa.log<br>sudo chown :mytest aa.log<br>sudo chown .mytest aa.log</p><p>21.chgrp修改文件所属组<br>sudo chgrp mytest aa.log<br>22.find命令<br>-name:<br>-type:<br>-size<br>-maxdepth&#x2F;mindepth<br>-ctime&#x2F;atime&#x2F;mtime<br>find path -name “<em>.c” -exec shell命令 {} ;<br>find path -name “</em>.c” | xargs shell命令<br>23.grep<br>-n:显示行<br>-i:忽略大小写<br>-v:不显示包含搜素字符串的行，显示其他行<br>-r:    若是目录，可以递归搜索<br>find和grep结合使用:<br>find .&#x2F; -name “*.sh” | xargs grep -n “while”<br>24.软件安装和卸载<br>在线安装<br>软件安装：sudo apt-get install 软件名<br>软件卸载：sudo apt-get remove 软件名<br>更新软件列表：sudo apt-get update<br>清理安装包：sudo apt-get clean<br>清理的是缓存路径：&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives<br>软件包安装<br>在Ubuntu系统下必须有deb格式的安装包<br>软件安装<br>sudo dpkg -i xxx.deb<br>软件卸载<br>sudo dpkg -r 软件名<br>25.压缩和解压缩</p><ul><li><p>gzip和bzip2（不常用）<br>不能压缩目录，只能一个一个文件进行压缩，压缩之后会使原文件消失<br>gzip *    压缩当前目录下所有的文件, 但是目录不能压缩<br>gunzip *  解压当前目录下所有的.gz文件<br>bzip2 *   压缩当前目录下所有的文件, 但是目录不能压缩<br>bunzip2 * 解压当前目录下所有的. bz2文件</p></li><li><p>tar(常用)<br>tar -cvf my.tar file dir(打包成tar包，并未压缩！！！)<br>tar -xvf my.tar -C mydir（解开tar包）(-C指定解压后的目录)(c&#x2F;x互斥出现)</p></li></ul><p>(gzip形式压缩与解压)<br>tar -zcvf my.tar.gz file dir<br>tar -zxvf my.tar.gz -C mydir<br>(bzip2形式压缩和解压)<br>tar -jcvf my.tar.bz2 file dir<br>tar -jxvf my.tar.bz2 -C mydir</p><p>（zip形式压缩与解压）<br>zip:<br>      zip -r xxx file dir （-r是有目录的情况）<br>unzip:<br>      unzip xxx.zip -d &#x2F;home&#x2F;itcast&#x2F;test&#x2F;day1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/17/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/04/17/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http服务器项目开发</title>
      <link href="/2022/04/16/http%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
      <url>/2022/04/16/http%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>samba服务器</title>
      <link href="/2022/04/13/samba%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/04/13/samba%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="samba服务器简介"><a href="#samba服务器简介" class="headerlink" title="samba服务器简介"></a>samba服务器简介</h2><ul><li><p>实现windows和unix系列系统之间能够相互沟通，就产生了samba服务。</p></li><li><p>samba是架构在NetBIOS（Network Basic Input&#x2F;Output System,网上基本输入输出系统）这个通信协议上面所开发出来的。NetBIOS是由IBM发展出来，目的是要让局域网络内少数计算机进行网络连接的一个通信协议，因此NetBIOS是无法跨越路由的，而现在Samba不仅能与局域网主机分享资源，还能与全世界的电脑分享资源，就是由NetBIOS over TCP&#x2F;IP技术解决。由于NetBIOS在局域网内实在是很好用，所以微软的网络架构就使用了这个协议。而samba最早发展的时候，其实是想要让linux系统可以加入windows的系统当中来共享使用彼此的文件数据，所以samba就架构在NetBIOS发展出来了</p></li></ul><h2 id="Ubuntu安装Samba服务器"><a href="#Ubuntu安装Samba服务器" class="headerlink" title="Ubuntu安装Samba服务器"></a>Ubuntu安装Samba服务器</h2><ol><li>确认安装：dpkg l | grep samba</li><li>安装：sudo apt-get install samba samba-common</li><li>卸载：sudo apt-get autoremove samba<h2 id="Samba服务器配置"><a href="#Samba服务器配置" class="headerlink" title="Samba服务器配置"></a>Samba服务器配置</h2></li></ol><ul><li>sudo vim &#x2F;etc&#x2F;samba&#x2F;smb.conf</li><li>在文件的最后添加</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">comment=This is samba dir</span><br><span class="line">path=/home/qcc/</span><br><span class="line">writable=yes</span><br><span class="line">browseable=yes</span><br></pre></td></tr></table></figure><ul><li>增加samba用户</li><li>sudo smbpasswd -a qcc (密码设置需要与linux的密码一致)<h2 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h2></li><li>注意添加新用户后，需要重启samba服务器</li><li>启动：sudo service smbd start</li><li>关闭 ：sudo service smbd stop<br>##直接在windows在编码</li><li>在windows色目录上方，写入：\局域网（linux的）ip地址,然后就能在windows下编辑linux下的文件了！</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/2022/04/13/linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/13/linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接"></a>硬链接与软链接</h2><ul><li>硬链接：ln 源文件 目标文件</li><li>软链接：ln -s 源文件 目标文件  </li><li>区别：创建硬链接后，所有硬链接文件（包括源文件）都指向内存中的存放（源文件）数据的一块区域，此时会维护一个计数器，每创建一个硬链接，计数器++，删除源文件不会影响其他硬链接文件访问数据，只不过是计数器–，当计数器为0时，系统才会回收内存。而软链接则是相当于创建了一个文件别名，当删除源文件后，该软链接则会失效，访问不到数据。</li></ul><h2 id="改变文件所有权chown和chgrp"><a href="#改变文件所有权chown和chgrp" class="headerlink" title="改变文件所有权chown和chgrp"></a>改变文件所有权chown和chgrp</h2><ul><li><p>用法：chown [option] [用户]：[属组] 目标文件</p></li><li><p>-r表示递归的改变（一个目录以及其子目录的所有权设置）</p></li><li><p>例子:chown qcc:qcc test.c &#x2F;&#x2F;将test.c的用户和属组都该变为qcc</p></li><li><p>用法：chgrp 属组 目标文件</p></li><li><p>作用：改变目标文件的数组（change group）</p></li></ul><h2 id="chmod改变文件权限"><a href="#chmod改变文件权限" class="headerlink" title="chmod改变文件权限"></a>chmod改变文件权限</h2><ul><li><p>第一种方式：通过用户组+&#x2F;-权限完成，具体来说，用户组包括了文件属主(u),文件属组(g)，其他人(o)和所有人(a)，而权限包括(r,w,x)。</p></li><li><p>用法：chmod u+r,g+w,o+r 目标文件</p></li><li><p>第二种方式：分别利用三位的二进制完成，（—（用户）—（组）—（其他人））</p></li><li><p>用法：例如：101(r,w,x)–&gt;5代表赋予读和执行权限。chmod 555 目标文件,第一个5是改变用户的权限，第二个是组，第三个是其他人！</p></li><li><p>增加用户操作</p></li><li><p>useradd -g 属组 用户</p></li><li><p>注意：添加后的用户是不能切换到root权限下的，如果想切换，需要改变&#x2F;etc&#x2F;sudoers文件，将其进行提权。<br><img src="/images/linux.png"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络通信与socket编程</title>
      <link href="/2022/04/11/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E4%B8%8Esocket%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/04/11/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E4%B8%8Esocket%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-socket通信的3要素"><a href="#1-socket通信的3要素" class="headerlink" title="1.socket通信的3要素"></a>1.socket通信的3要素</h1><ol><li>通信的目的地址</li><li>使用的端口号（例如：http默认的是80端口，smtp(邮件传输端口):25）</li><li>使用的传输层协议（如：TCP&#x2F;UDP）</li></ol><h1 id="2-socket概念"><a href="#2-socket概念" class="headerlink" title="2.socket概念"></a>2.socket概念</h1><ul><li><p>（int类型） 在Linux环境下，用于表示进程间网络通信的特殊文件类型，本质为内核借助缓冲区形成的伪文件。</p></li><li><p>套接字的读写和文件操作一致，区别是文件主要应用于本地持久化数据的读写（磁盘），而套接字应用于网络进程间数据的传递。</p></li><li><p>在TCP&#x2F;IP协议中，IP地址+TCP或UDP端口号来唯一标识网络通信中的一个进程。IP地址+端口号就对应一个socket，欲建立连接的两个进程各有一个socket，那么这两个socket组成的socket pair就唯一的标识一个连接，因此，可以用socket来描述网络连接中的一对一关系。<br><img src="/images/c_s.png"></p></li><li><p>在网络通信中，套接字一定是成对出现的，一端的发送缓冲区对应另一端的接收缓冲区，使用同一个文件描述符发送缓冲区和接收缓冲区。</p></li></ul><h1 id="3-socket通信创建流程"><a href="#3-socket通信创建流程" class="headerlink" title="3.socket通信创建流程"></a>3.socket通信创建流程</h1><p><img src="/images/socket.png"></p><h1 id="4-socket编程基础"><a href="#4-socket编程基础" class="headerlink" title="4.socket编程基础"></a>4.socket编程基础</h1><ul><li>大端字节序：低地址存放高字节！</li><li>小端字节序：低地址存放低字节！</li><li>网络数据流发出的顺序是，先发送的数据是低地址存放的数据，后发送的数据是高地址存放的数据。</li><li>TCP&#x2F;IP协议规定：网络数据流应采用大端字节序。</li><li>由于网络数据流采取的是大端字节序，所以，如果主机是小端字节序，那么需要转化为大端字节序，再进行传输；如果主机是大端字节序，则不做转化。</li><li>对应的API函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">uint32_t htonl(uint32_t hostlong);</span><br><span class="line">uint16_t htons(uint16_t hostshort);</span><br><span class="line">uint32_t ntohl(uint32_t netlong);</span><br><span class="line">uint16_t ntohs(uint16_t netshort);</span><br><span class="line">h表示host，n表示network，l表示32位长整数，s表示16位短整数。</span><br><span class="line">32位的是IP地址，16位的是端口号</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-1-sockaddr数据结构-存在历史遗留问题"><a href="#4-1-sockaddr数据结构-存在历史遗留问题" class="headerlink" title="4.1 sockaddr数据结构(存在历史遗留问题)"></a>4.1 sockaddr数据结构(存在历史遗留问题)</h2><ul><li>很多网络编程函数诞生早于IPv4协议，那时候都使用的是sockaddr结构体,为了向前兼容，现在sockaddr退化成了（void *）的作用，传递一个地址给函数，至于这个函数是sockaddr_in还是其他的，由地址族确定，然后函数内部再强制类型转化为所需的地址类型。</li><li><img src="/images/sockaddr.png"></li><li>如上图，sockaddr_in实际上是将sockaddr进行了细化，16位的地址类型没变，将剩下的14个字节的数据分为2个字节的端口号，4个字节的IP地址（IPV4），8个字节的填充位。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr &#123;</span><br><span class="line">sa_family_t sa_family; /* address family, AF_xxx */ 协议家族，AF_INET代表IPV4</span><br><span class="line">char sa_data[14];/* 14 bytes of protocol address */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> struct sockaddr_in &#123;</span><br><span class="line">     sa_family_t    sin_family; /* address family: AF_INET */</span><br><span class="line">     in_port_t      sin_port;   /* port in network byte order */ 端口号</span><br><span class="line">     struct in_addr sin_addr;   /* internet address */  IP地址</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> /* Internet address. */</span><br><span class="line">struct in_addr &#123;</span><br><span class="line">    uint32_t       s_addr;     /* address in network byte order */注意IP地址是32位无符号整型</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>IPv4的地址格式定义在netinet&#x2F;in.h中，IPv4地址用sockaddr_in结构体表示，包括16位端口号和32位IP地址，但是sock API的实现早于ANSI C标准化，那时还没有void *类型，因此这些像bind 、accept函数的参数都用struct sockaddr *类型表示，在传递参数之前要强制类型转换一下，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr_in servaddr;</span><br><span class="line">bind(listen_fd, (struct sockaddr *)&amp;servaddr, sizeof(servaddr));/* initialize servaddr */</span><br></pre></td></tr></table></figure><h2 id="4-2-IP地址转化函数"><a href="#4-2-IP地址转化函数" class="headerlink" title="4.2 IP地址转化函数"></a>4.2 IP地址转化函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">int inet_pton(int af, const char *src, void *dst);</span><br><span class="line">const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);</span><br><span class="line">af 取值可选为 AF_INET 和 AF_INET6 ，即和 ipv4 和ipv6对应</span><br><span class="line">支持IPv4和IPv6</span><br></pre></td></tr></table></figure><p>其中inet_pton和inet_ntop不仅可以转换IPv4的in_addr，还可以转换IPv6的in6_addr。<br>因此函数接口是void *addrptr</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line"></span><br><span class="line">    char ip[]=&quot;2.3.4.5&quot;;</span><br><span class="line">    char server_ip[64];</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in server_addr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    inet_pton(AF_INET, ip, &amp;server_addr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    printf(&quot;s_addr : %x\n&quot;, server_addr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    printf(&quot;s_addr from net to host: %x\n&quot;, ntohl(server_addr.sin_addr.s_addr));</span><br><span class="line"></span><br><span class="line">    inet_ntop(AF_INET, &amp;server_addr.sin_addr.s_addr, server_ip, 64);</span><br><span class="line"></span><br><span class="line">    printf(&quot;server ip : %s\n&quot;, server_ip);</span><br><span class="line"></span><br><span class="line">    printf(&quot;INADDR_ANY: %d\n&quot;, INADDR_ANY);</span><br><span class="line">    server_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    inet_ntop(AF_INET, &amp;server_addr.sin_addr.s_addr, server_ip, 64);</span><br><span class="line">    printf(&quot;INADDR_ANY ip : %s\n&quot;, server_ip);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#5.socket编程函数</p><p>-** 5.1 socket函数**</p><ul><li>socket()打开一个网络通讯端口，如果成功的话，就像open()一样返回一个文件描述符，应用程序可以像读写文件一样用read&#x2F;write在网络上收发数据，如果socket()调用出错则返回-1。对于IPv4，domain参数指定为AF_INET。对于TCP协议，type参数指定为SOCK_STREAM，表示面向流的传输协议。如果是UDP协议，则type参数指定为SOCK_DGRAM，表示面向数据报的传输协议。protocol参数的介绍从略，指定为0即可.</li><li>函数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int socket(int domain, int type, int protocol);</span><br></pre></td></tr></table></figure><p>-** 5.2 bind函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br><span class="line">sockfd：</span><br><span class="line">socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">构造出IP地址加端口号</span><br><span class="line">addrlen:</span><br><span class="line">sizeof(addr)长度</span><br><span class="line">返回值：</span><br><span class="line">成功返回0，失败返回-1, 设置errno</span><br></pre></td></tr></table></figure><ul><li>服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用bind绑定一个固定的网络地址和端口号。</li><li>bind()的作用是将参数sockfd和addr绑定在一起，使sockfd这个用于网络通讯的文件描述符监听addr所描述的地址和端口号。前面讲过，struct sockaddr *是一个通用指针类型，addr参数实际上可以接受多种协议的sockaddr结构体，而它们的长度各不相同，所以需要第三个参数addrlen指定结构体的长度。如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr_in servaddr;</span><br><span class="line">bzero(&amp;servaddr, sizeof(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">servaddr.sin_port = htons(6666);</span><br></pre></td></tr></table></figure><ul><li>首先将整个结构体清零，然后设置地址类型为AF_INET，网络地址为INADDR_ANY，这个宏表示本地的任意IP地址，因为服务器可能有多个网卡，每个网卡也可能绑定多个IP地址，这样设置可以在所有的IP地址上监听，直到与某个客户端建立了连接时才确定下来到底用哪个IP地址，端口号为6666</li></ul><p>-** 5.3 listen函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int listen(int sockfd, int backlog);</span><br><span class="line">sockfd:</span><br><span class="line">socket文件描述符</span><br><span class="line">backlog:</span><br><span class="line">在Linux 系统中，它是指排队等待建立3次握手队列长度</span><br></pre></td></tr></table></figure><ul><li><p>查看系统默认backlog<br>cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog</p></li><li><p>改变 系统限制的backlog 大小<br>vim &#x2F;etc&#x2F;sysctl.conf</p></li><li><p>最后添加<br>net.core.somaxconn &#x3D; 1024<br>net.ipv4.tcp_max_syn_backlog &#x3D; 1024</p></li><li><p>保存，然后执行<br>sysctl -p</p></li><li><p>注意：backlog需要手动去修改系统的内核参数，不然只调用listen是无法修改的！！！</p></li><li><p>典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的accept()返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未accept的客户端就处于连接等待状态，listen()声明sockfd处于监听状态，并且最多允许有backlog个客户端处于连接等待状态，如果接收到更多的连接请求就忽略。listen()成功返回0，失败返回-1。</p></li></ul><p>-** 5.4 accept函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</span><br><span class="line">sockdf:</span><br><span class="line">socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">传出参数，返回链接客户端地址信息，含IP地址和端口号</span><br><span class="line">addrlen:</span><br><span class="line">传入传出参数（值-结果）,传入sizeof(addr)大小，函数返回时返回真正接收到地址结构体的大小</span><br><span class="line">返回值：</span><br><span class="line">成功返回一个新的socket文件描述符，用于和客户端通信，失败返回-1，设置errno</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>三次握手完成后，服务器调用accept()接受连接，如果服务器调用accept()时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。addr是一个传出参数，accept()返回时传出客户端的地址和端口号。addrlen参数是一个传入传出参数（value-result argument），传入的是调用者提供的缓冲区addr的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给addr参数传NULL，表示不关心客户端的地址。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while (1) &#123;</span><br><span class="line">cliaddr_len = sizeof(cliaddr);</span><br><span class="line">connfd = accept(listenfd, (struct sockaddr *)&amp;cliaddr, &amp;cliaddr_len);</span><br><span class="line">n = read(connfd, buf, MAXLINE);</span><br><span class="line">......</span><br><span class="line">close(connfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>整个是一个while死循环，每次循环处理一个客户端连接。由于cliaddr_len是传入传出参数，每次调用accept()之前应该重新赋初值。accept()的参数listenfd是先前的监听文件描述符，而accept()的返回值是另外一个文件描述符connfd，之后与客户端之间就通过这个connfd通讯，最后关闭connfd断开连接，而不关闭listenfd，再次回到循环开头listenfd仍然用作accept的参数。accept()成功返回一个文件描述符，出错返回-1。</li></ul><p>-** 5.5 connect函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br><span class="line">sockdf:</span><br><span class="line">socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">传入参数，指定服务器端地址信息，含IP地址和端口号</span><br><span class="line">addrlen:</span><br><span class="line">传入参数,传入sizeof(addr)大小</span><br><span class="line">返回值：</span><br><span class="line">成功返回0，失败返回-1，设置errno</span><br></pre></td></tr></table></figure><ul><li>客户端需要调用connect()连接服务器，connect和bind的参数形式一致，区别在于bind的参数是自己的地址，而connect的参数是对方的地址。connect()成功返回0，出错返回-1。</li></ul><p>-** 5.6 出错函数处理**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char *strerror(int errnum);     /* See NOTES */</span><br><span class="line">errnum:</span><br><span class="line">传入参数,错误编号的值，一般取 errno 的值   该方法可以配合日志打印函数，输出错误在日志中</span><br><span class="line">返回值：</span><br><span class="line">错误原因</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">void perror(const char *s);    /* See NOTES */</span><br><span class="line">s:</span><br><span class="line">传入参数,自定义的描述</span><br><span class="line">返回值：</span><br><span class="line">无</span><br><span class="line">向标准出错stderr 输出出错原因,不能打印在日志中</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2022/04/10/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/04/10/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h2><p><img src="/images/zijie1.jpg"><br><img src="/images/zijie2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> int main() &#123;</span><br><span class="line"> int dx[4] = &#123; 0,0,1,-1 &#125;;</span><br><span class="line"> int dy[4] = &#123; 1,-1,0,0 &#125;;</span><br><span class="line"> int num;</span><br><span class="line"> cin &gt;&gt; num;</span><br><span class="line"> int w, h;</span><br><span class="line"> vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;res;</span><br><span class="line"> while (num&gt;0) &#123;</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;w;</span><br><span class="line">cin&gt;&gt; h;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt;matrix(w,vector&lt;int&gt;(h));</span><br><span class="line">for (int i = 0; i &lt; w; i++)</span><br><span class="line">for (int j = 0; j &lt; h; j++)</span><br><span class="line">cin &gt;&gt; matrix[i][j];</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; w; i++) &#123;</span><br><span class="line">for (int j = 0; j &lt; h; j++) &#123;</span><br><span class="line">if (matrix[i][j] == 1) &#123;</span><br><span class="line">int water = 0;</span><br><span class="line">int new_x;</span><br><span class="line">int new_y;</span><br><span class="line">for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class="line">new_x = i + dx[k];</span><br><span class="line">new_y = j + dy[k];</span><br><span class="line">if (new_x &gt;= 0 &amp;&amp; new_x &lt; w &amp;&amp; new_y &gt;= 0 &amp;&amp; new_y &lt; h) &#123;</span><br><span class="line">if (matrix[new_x][new_y] == 0)</span><br><span class="line">water++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (water &gt;= 2)</span><br><span class="line">matrix[i][j] = -1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; w; i++)</span><br><span class="line">for (int j = 0; j &lt; h; j++)</span><br><span class="line">if (matrix[i][j] == -1)</span><br><span class="line">matrix[i][j] = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res.push_back(matrix);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num--;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //这样输出会越界，因为3维数组中的每一个二维数组可能不相同！！！  （2，3，4）</span><br><span class="line">/* for (int i = 0; i &lt; res.size(); i++) &#123;</span><br><span class="line"> for (int j = 0; j &lt; res[0].size(); j++) &#123;</span><br><span class="line"> for (int k = 0; k &lt; res[0][0].size(); k++) &#123;</span><br><span class="line"> cout &lt;&lt; res[i][j][k] &lt;&lt; &quot; &quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;*/</span><br><span class="line"> //二维数组作为缓冲，进行输出！</span><br><span class="line">  for (int i = 0; i &lt; res.size(); i++) &#123;</span><br><span class="line">  vector&lt;vector&lt;int&gt;&gt;temp=res[i];</span><br><span class="line"> for (int j = 0; j &lt; temp.size(); j++) &#123;</span><br><span class="line"> for (int k = 0; k &lt; temp[0].size(); k++) &#123;</span><br><span class="line"> cout &lt;&lt; temp[j][k] &lt;&lt; &quot; &quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/04/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/04/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划的常见问题"><a href="#动态规划的常见问题" class="headerlink" title="动态规划的常见问题"></a>动态规划的常见问题</h2><ul><li>动规基础（爬楼梯，斐波那契数）</li><li>背包问题</li><li>打家劫舍</li><li>股票问题</li><li>子序列问题</li></ul><h2 id="动态规划五部曲"><a href="#动态规划五部曲" class="headerlink" title="动态规划五部曲"></a>动态规划五部曲</h2><ul><li>dp数组以及下标的含义（例如dp[i],dp[i][j]等等）</li><li>递推公式</li><li>dp数组如何初始化</li><li>遍历顺序</li><li>打印dp数组</li></ul><h3 id="动态规划基础题目一：斐波那契数列"><a href="#动态规划基础题目一：斐波那契数列" class="headerlink" title="动态规划基础题目一：斐波那契数列"></a>动态规划基础题目一：斐波那契数列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1. dp[i]：第i个斐波那契数的值是dp[i].</span><br><span class="line">2. 递推公式：dp[i]=dp[i-1]+dp[i-2];</span><br><span class="line">3. 初始化：dp[0]=1,dp[1]=1.</span><br><span class="line">4. 遍历顺序：从小到大遍历.</span><br><span class="line">5. 打印dp数组，主要用来debug.</span><br><span class="line"></span><br><span class="line">解法一：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fib(int n) &#123;</span><br><span class="line">        vector&lt;int&gt;dp(n+1,0);</span><br><span class="line">        if(n==0||n==1)</span><br><span class="line">            return n;</span><br><span class="line">        dp[0]=0;</span><br><span class="line">        dp[1]=1;</span><br><span class="line">            dp[i]=dp[i-1]+dp[i-2];</span><br><span class="line">        return dp[n];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">解法二（优化内存后，状态压缩后的解法）：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fib(int n) &#123;</span><br><span class="line">        if(n==0||n==1)</span><br><span class="line">            return n;</span><br><span class="line">    vector&lt;int&gt;dp(2,0);</span><br><span class="line">    dp[0]=0;</span><br><span class="line">    dp[1]=1;</span><br><span class="line">    int sum=0;</span><br><span class="line">        for(int i=2;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum=dp[0]+dp[1];</span><br><span class="line">                dp[0]=dp[1];</span><br><span class="line">                dp[1]=sum;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        return sum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态规划基础题目二：使用最小的花费爬楼梯"><a href="#动态规划基础题目二：使用最小的花费爬楼梯" class="headerlink" title="动态规划基础题目二：使用最小的花费爬楼梯"></a>动态规划基础题目二：使用最小的花费爬楼梯</h3><p><img src="/images/leetcode746.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">五部曲</span><br><span class="line">1. dp[i]：代表爬到第i阶台阶所花费的最小代价cost。</span><br><span class="line">2. 递推公式：dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])</span><br><span class="line">3. 初始化:dp[0]=0,dp[1]=0,因为可以直接从第0或者第1个台阶开始爬</span><br><span class="line">4. 遍历顺序：从小到大遍历</span><br><span class="line">5. 打印dp数组，debug手段。</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) &#123;</span><br><span class="line">        if(cost.size()==1)</span><br><span class="line">            return 0;</span><br><span class="line">        if(cost.size()==2)</span><br><span class="line">            return min(cost[0],cost[1]);</span><br><span class="line">    </span><br><span class="line">        vector&lt;int&gt;dp(cost.size()+1,0);</span><br><span class="line">        dp[0]=0;</span><br><span class="line">        dp[1]=0;</span><br><span class="line"></span><br><span class="line">        for(int i=2;i&lt;=cost.size();i++) </span><br><span class="line">            dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);</span><br><span class="line">        return dp[cost.size()];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程和线程同步</title>
      <link href="/2022/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程加锁与解锁"><a href="#线程加锁与解锁" class="headerlink" title="线程加锁与解锁"></a>线程加锁与解锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 尝试加锁,与Lock的区别是，trylock当拿不到锁时，不会死等（不会阻塞），转而去干其他的事；而lock会一直阻塞，直至拿到锁。</span><br><span class="line">int pthread_mutex_trylock(pthread_mutex_t *mutex);</span><br><span class="line">// 修改互斥锁的状态, 将其设定为锁定状态, 这个状态被写入到参数 mutex 中</span><br><span class="line">int pthread_mutex_lock(pthread_mutex_t *mutex);</span><br><span class="line">// 对互斥锁解锁</span><br><span class="line">int pthread_mutex_unlock(pthread_mutex_t *mutex);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><ol><li>加锁之后忘记解锁<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 场景1</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功, 当前循环完毕没有解锁, 在下一轮循环的时候自己被阻塞了</span><br><span class="line">        // 其余的线程也被阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        // 忘记解锁</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 场景2</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程被阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        if(xxx)</span><br><span class="line">        &#123;</span><br><span class="line">            // 函数退出, 没有解锁（解锁函数无法被执行了）</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.重复加锁，造成死锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        // 锁被锁住了, A线程阻塞</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 隐藏的比较深的情况</span><br><span class="line">void funcA()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void funcB()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        funcA();// 重复加锁</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.当含有多个共享资源时，随意加锁，导致相互被阻塞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">thread A&#123;</span><br><span class="line">lock(x);</span><br><span class="line">lock(y);</span><br><span class="line">unlock(y);</span><br><span class="line">unlock(x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thread B&#123;</span><br><span class="line">lock(y);</span><br><span class="line">lock(x);</span><br><span class="line">unlock(x);</span><br><span class="line">unlock(y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">A拿到x锁，B拿到y锁就会导致死锁。一般可以加锁顺序相同，避免死锁，但是有的特定场景不适用（对共享资源的访问顺序有要求的情况）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><ul><li><p>避免多次锁定，多检查</p></li><li><p>对共享资源访问完毕之后，一定要解锁，或者在加锁的使用 trylock</p></li><li><p>如果程序中有多把锁，可以控制对锁的访问顺序 (顺序访问共享资源，但在有些情况下是做不到的)，另外也可以在对其他互斥锁做加锁操作之前，先释放当前线程拥有的互斥锁。</p></li><li><p>项目程序中可以引入一些专门用于死锁检测的模块</p></li></ul><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><ol><li>是一个锁；</li><li>读锁是共享的，写锁是互斥的；</li><li>写锁的优先级大于读的优先级。</li><li>如果说程序中所有的线程都对共享资源做写操作，使用读写锁没有优势，和互斥锁是一样的，如果说程序中所有的线程都对共享资源有写也有读操作，并且对共享资源读的操作越多，读写锁更有优势。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2022/04/04/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/04/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="回溯算法可以解决的问题"><a href="#回溯算法可以解决的问题" class="headerlink" title="回溯算法可以解决的问题"></a>回溯算法可以解决的问题</h2><ul><li>组合问题（无序的）</li><li>切割问题（字符串的切割方式）</li><li>子集问题</li><li>排列问题（有序的）</li><li>棋盘问题（N皇后，解数独）</li></ul><h2 id="回溯法的理解"><a href="#回溯法的理解" class="headerlink" title="回溯法的理解"></a>回溯法的理解</h2><ul><li>回溯法都可抽象为一个n叉树，横向是通过for循环来处理，纵向是通过递归来处理。</li></ul><h2 id="回溯法的模板"><a href="#回溯法的模板" class="headerlink" title="回溯法的模板"></a>回溯法的模板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void backtracing(参数)&#123;</span><br><span class="line">if(终止条件)&#123;</span><br><span class="line">收集结果！</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(集合的元素集)&#123;</span><br><span class="line">处理节点；</span><br><span class="line">递归函数；</span><br><span class="line">回溯操作；</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void backtracing(int n,int k,vector&lt;vector&lt;int&gt;&gt;&amp;res,vector&lt;int&gt;&amp;temp,int start)&#123;</span><br><span class="line">        if(temp.size()==k)//纵向递归到叶子节点，收集结果，返回上一层递归</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(temp);</span><br><span class="line">             return;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">        for(int i=start;i&lt;=n;i++)&#123;//横向for循环遍历</span><br><span class="line">            if(start&gt;n-(k-temp.size())+1)//剪枝操作！！！（限制i的范围！！！）</span><br><span class="line">                return;</span><br><span class="line">            temp.push_back(i);</span><br><span class="line">            backtracing(n, k, res, temp, i+1);</span><br><span class="line">            temp.pop_back();//删除temp最后一个元素，回溯到上一层！</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt;res;</span><br><span class="line">        vector&lt;int&gt;temp;</span><br><span class="line">        backtracing(n, k,res,temp,1);</span><br><span class="line">        return res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++面试准备</title>
      <link href="/2022/03/27/%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/03/27/%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="编译内存相关知识"><a href="#编译内存相关知识" class="headerlink" title="编译内存相关知识"></a>编译内存相关知识</h1><h2 id="C-的编译过程"><a href="#C-的编译过程" class="headerlink" title="C++的编译过程"></a>C++的编译过程</h2><h3 id="共分为四个步骤：编译预处理，编译，汇编，链接。"><a href="#共分为四个步骤：编译预处理，编译，汇编，链接。" class="headerlink" title="共分为四个步骤：编译预处理，编译，汇编，链接。"></a>共分为四个步骤：编译预处理，编译，汇编，链接。</h3><ul><li>编译预处理：处理#字符开头的指令。</li><li>编译：将源码.cpp文件编译成.s文件。</li><li>汇编：将.s文件汇编成.o文件。</li><li>链接：将一个或者多个.o文件链接形成.exe的可执行文件。<h3 id="静态链接和动态链接的区别"><a href="#静态链接和动态链接的区别" class="headerlink" title="静态链接和动态链接的区别"></a>静态链接和动态链接的区别</h3></li><li>静态链接：代码从其所在的静态链接库中的拷贝到可执行程序中，优点是执行速度快；缺点是浪费空间，因为可能会拷贝多份重复的代码，并且在目标文件更新后，需要重新编译链接生成新的exe文件。</li><li>动态链接：动态链接时并没有将真正的代码链接进去，而是保存了一个映射，在执行过程中，通过该映射再去寻找真正的代码。优点是节省内存，更新方便。缺点是相比静态链接速度较慢，性能有一定的损失。</li></ul><h2 id="C-的内存管理"><a href="#C-的内存管理" class="headerlink" title="C++的内存管理"></a>C++的内存管理</h2><h3 id="C-的内存分为栈，堆，全局区-x2F-静态区，代码区，常量区。"><a href="#C-的内存分为栈，堆，全局区-x2F-静态区，代码区，常量区。" class="headerlink" title="C++的内存分为栈，堆，全局区&#x2F;静态区，代码区，常量区。"></a>C++的内存分为栈，堆，全局区&#x2F;静态区，代码区，常量区。</h3><ul><li>栈：通常是局部变量，函数参数，返回值存放的地方，由编译器自动回收。</li><li>堆：程序员自己malloc申请的内存块，需要程序员自己申请和释放。</li><li>全局区&#x2F;静态区：静态变量和全局变量存储的地方，程序结束会自动释放。</li><li>常量区：存放常量，不允许修改，程序结束后会自动释放。</li><li>代码区：存放代码，不允许修改，可以执行。编译后的二进制文件存放的地方。</li><li>示例代码如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int a = 0; // </span><br><span class="line">char *b;  // a,b均在全局区</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   int v;//v在栈区</span><br><span class="line">   int *p=(int*)malloc(sizeof(int)*4)//申请16个字节内存在堆区</span><br><span class="line">   static int e;//e在静态区</span><br><span class="line">   string s=&quot;abvdefr&quot;;//s在栈区，&quot;abvdefr&quot;在常量区 </span><br><span class="line">   int d[]=&quot;qwe&quot;;//d在栈区，&quot;qwe&quot;在常量区</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈和堆的区别"><a href="#栈和堆的区别" class="headerlink" title="栈和堆的区别"></a>栈和堆的区别</h3><ol><li>申请和回收方式不同：栈由系统分配和回收，堆由程序员申请和回收。</li><li>存储方式不同：栈是一块连续的内存空间（向低地址扩展），堆的内存空间是不连续的（链表结构），(向高地址扩展)。</li><li>存放的内容不同：栈存放局部变量，函数参数，返回值等，堆存放的内容由程序员控制。</li><li>效率：栈的申请由系统自动分配，效率高。堆效率低，也容易产生内存碎片。</li><li>申请后的系统响应方式不同：栈空间申请后，如果当前剩余空间&gt;申请空间，则分配，否则，提示栈溢出；堆空间申请后，需要在链表上的寻找第一块大于等于申请空间的内存块，找到后将该块（首地址存放了本次分配的空间大小）从内存链表上删除，分配给堆空间，将剩余的空间链接在空闲链表上，用完回收后，再将其链接在空闲链表上。</li></ol><h2 id="全局变量，静态全局变量，局部变量，静态局部变量的区别"><a href="#全局变量，静态全局变量，局部变量，静态局部变量的区别" class="headerlink" title="全局变量，静态全局变量，局部变量，静态局部变量的区别"></a>全局变量，静态全局变量，局部变量，静态局部变量的区别</h2><ul><li>全局变量：具有全局作用域，全局变量只要在一个源文件中定义，就可以在同一工程中的其他源文件中使用，只不过需要利用关键字extern声明这个全局变量。</li><li>静态全局变量（static修饰的）：具有文件作用域，其他文件不能使用该全局变量，即使另一个文件中定义了与之同名的静态全局变量，也是不同的变量。</li><li>局部变量：具有局部作用域，并不是一直存在，只是在其作用域内存在，出了其作用域就会被回收。</li><li>局部静态变量：具有局部作用域，只初始化一次，到程序运行结束前一直存在，只对定义自己的函数体可见（自己作用域内），出了作用域就不可见。</li></ul><h2 id="pragma-once和-ifndef-define-endif解读"><a href="#pragma-once和-ifndef-define-endif解读" class="headerlink" title="#pragma once和#ifndef #define #endif解读"></a>#pragma once和#ifndef #define #endif解读</h2><h3 id="作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如-a-h中包含了b-h-但是在c-cpp中包含了a-h和b-h，即：b-h就被重复包含了）。"><a href="#作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如-a-h中包含了b-h-但是在c-cpp中包含了a-h和b-h，即：b-h就被重复包含了）。" class="headerlink" title="作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如:a.h中包含了b.h,但是在c.cpp中包含了a.h和b.h，即：b.h就被重复包含了）。"></a>作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如:a.h中包含了b.h,但是在c.cpp中包含了a.h和b.h，即：b.h就被重复包含了）。</h3><h3 id="头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个-cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。"><a href="#头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个-cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。" class="headerlink" title="头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个.cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。"></a>头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个.cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。</h3><h2 id="三种继承方式"><a href="#三种继承方式" class="headerlink" title="三种继承方式"></a>三种继承方式</h2><p>1.public 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private</p><p>2.protected 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private</p><p>3.private 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private</p><h2 id="public-protected-private访问权限"><a href="#public-protected-private访问权限" class="headerlink" title="public,protected,private访问权限"></a>public,protected,private访问权限</h2><p><img src="/images/lei.png"></p><h2 id="如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建"><a href="#如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建" class="headerlink" title="如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建"></a>如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建</h2><h3 id="创建对象的方式有两种，即：堆创建（new出来的）和栈创建-一般创建，例如：A-a-。"><a href="#创建对象的方式有两种，即：堆创建（new出来的）和栈创建-一般创建，例如：A-a-。" class="headerlink" title="创建对象的方式有两种，即：堆创建（new出来的）和栈创建(一般创建，例如：A a)。"></a>创建对象的方式有两种，即：堆创建（new出来的）和栈创建(一般创建，例如：A a)。</h3><ol><li>限制对象只能创建在栈上：通过重载new和detele函数为类的私有函数，因为默认的new创建会将对象创建在堆上。</li><li>限制对象只能创建在堆上：将构造和析构置为保护，在类外调用create构造对象（堆上创建），析构置为保护是为了在其派生类中也能访问析构函数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">    A() &#123;&#125;</span><br><span class="line">    ~A() &#123;&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    static A *create()</span><br><span class="line">    &#123;</span><br><span class="line">        return new A();</span><br><span class="line">    &#125;</span><br><span class="line">    void destory()</span><br><span class="line">    &#123;</span><br><span class="line">        delete this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题</title>
      <link href="/2022/03/26/leetcode/"/>
      <url>/2022/03/26/leetcode/</url>
      
        <content type="html"><![CDATA[<h2 id="轮转数组"><a href="#轮转数组" class="headerlink" title="轮转数组"></a>轮转数组</h2><p><img src="/images/leetcode189.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void rotate(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">       k=k%nums.size();     </span><br><span class="line">       vector&lt;int&gt;temp;</span><br><span class="line">       for(int i=0;i&lt;nums.size();i++)  //创建一个临时数组，保存对应保存nums的所有元素</span><br><span class="line">            temp.push_back(nums[i]);   </span><br><span class="line">      int i=0;//记录当前需要移动的元素下标</span><br><span class="line">      while(i&lt;nums.size())&#123;  </span><br><span class="line">          int new_index=(i+k)%nums.size(); //当前元素移动后的最终位置！</span><br><span class="line">          nums[new_index]=temp[i];//将当前元素（待移动元素）放在轮转后的最终位置上。</span><br><span class="line">          i++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
