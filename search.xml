<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/12/27/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4/"/>
      <url>/2023/12/27/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="�����ϴ�����"><a href="#�����ϴ�����" class="headerlink" title="�����ϴ�����"></a>�����ϴ�����</h3><p>��1��hexo clean  ��ջ���</p><p>��2��hexo g ���ɾ�̬ҳ����publicĿ¼��</p><p>��3��hexo d ����github��</p><p>��4��hexo s ����Ԥ�����ʶ˿ڣ�Ĭ��4000��cltr+c�رձ���Ԥ����</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库入门</title>
      <link href="/2022/10/15/OceanBase/"/>
      <url>/2022/10/15/OceanBase/</url>
      
        <content type="html"><![CDATA[<ul><li><p>源码：<br>MiniOB—2万行源码<br>Sqlite—22万行源码</p></li><li><p>书本：<br>数据库系统实现<br>数据库系统概念</p></li></ul><h1 id="MiniOB开发日志part-1："><a href="#MiniOB开发日志part-1：" class="headerlink" title="MiniOB开发日志part_1："></a>MiniOB开发日志part_1：</h1><ul><li>启动docker:systemctl start docker</li><li>运行存在的容器：docker exec -it miniob bash</li></ul><p>cd &#x2F;root&#x2F;source&#x2F;miniob&#x2F;build</p><ul><li><p>运行服务器：.&#x2F;bin&#x2F;observer -f ..&#x2F;etc&#x2F;observer.ini</p></li><li><p>运行客户端：.&#x2F;bin&#x2F;obclient</p></li></ul><h2 id="Miniob结构"><a href="#Miniob结构" class="headerlink" title="Miniob结构"></a>Miniob结构</h2><p>miniob作为一个具有“基本”功能的数据库，包含了需要的基本功能模块。包括</p><ul><li><p>网络模块：负责与客户端交互，收发客户端请求与应答；</p></li><li><p>SQL解析：将用户输入的SQL语句解析成语法树；</p></li><li><p>执行计划缓存：执行计划缓存模块会将该 SQL第一次生成的执行计划缓存在内存中，后续的执行可以反复执行这个计划，避免了重复查询优化的过程（未实现）。</p></li><li><p>语义解析模块：将生成的语法树，转换成数据库内部数据结构（部分实现）；</p></li><li><p>查询缓存：将执行的查询结果缓存在内存中，下次查询时，可以直接返回（未实现）；</p></li><li><p>查询优化：根据一定规则和统计数据，调整&#x2F;重写语法树。当前实现为空，留作实验题目；</p></li><li><p>计划执行：根据语法树描述，执行并生成结果；</p></li><li><p>会话管理：管理用户连接、调整某个连接的参数；</p></li><li><p>元数据管理：记录当前的数据库、表、字段和索引元数据信息；</p></li><li><p>客户端：作为测试工具，接收用户请求，向服务端发起请求。</p></li></ul><h2 id="seda异步事件框架"><a href="#seda异步事件框架" class="headerlink" title="seda异步事件框架"></a>seda异步事件框架</h2><p>seda:stage event driver architecture.结合了事件驱动和多线程模式的优点。从而做到易扩展，高并发，解耦合。各个stage之间通信都是通过event来传递，而event的处理由stage的线程池异步处理，线程池内部会维护一个事件队列。<br>在miniob中从请求开始，sql解析，查询优化，计划执行都是通过event来传递数据，可以通过seda配置线程池的个数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式文件系统</title>
      <link href="/2022/08/24/DFS/"/>
      <url>/2022/08/24/DFS/</url>
      
        <content type="html"><![CDATA[<h1 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h1><ul><li><p>正向代理流程：客户端发送对某一个目标服务器的请求，代理服务器将中间请求转发给目标服务器，目标服务器将响应返回给代理服务器，代理服务器将数据返回给客户端。</p></li><li><p>反向代理流程：客户端发起对代理服务器的请求，代理服务器将请求发送给某一个服务器，服务器返回结果给代理服务器，代理服务器将结果返回给客户端。</p></li><li><p>区别：正向代理是代理客户端，隐藏了客户端；反向代理是代理服务器，隐藏了服务端。</p></li></ul><h1 id="分布式文件系统项目架构图"><a href="#分布式文件系统项目架构图" class="headerlink" title="分布式文件系统项目架构图"></a>分布式文件系统项目架构图</h1><p><img src="/images/dfs.png"></p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li>能处理静态请求：html&#x2F;jpg…</li><li>动态请求无法处理</li><li>fastCGI:能够帮助服务器处理动态请求。</li></ul><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><ul><li>存储文件属性信息</li><li>用户的属性信息</li></ul><h2 id="redis-非关系型数据库-内存数据库"><a href="#redis-非关系型数据库-内存数据库" class="headerlink" title="redis-非关系型数据库(内存数据库)"></a>redis-非关系型数据库(内存数据库)</h2><ul><li>提高程序效率</li><li>存储的是经常要从关系型数据库中读取的数据</li></ul><h2 id="FastDFS-分布式文件系统"><a href="#FastDFS-分布式文件系统" class="headerlink" title="FastDFS-分布式文件系统"></a>FastDFS-分布式文件系统</h2><ul><li>存储文件内容</li><li>供用户下载</li></ul><h2 id="FastDFS介绍"><a href="#FastDFS介绍" class="headerlink" title="FastDFS介绍"></a>FastDFS介绍</h2><ul><li>使用c语言编写的一款开源的分布式文件系统</li><li>为互联网量身定制，充分考虑了冗余备份，负载均衡，线性扩容等机制，注重高可用，高性能等指标。<br>冗余备份：纵向扩容<br>线性扩容：横向扩容    </li><li>可以很容易搭建一套高性能的文件服务器集群提供文件的上传，下载等服务。</li></ul><h2 id="FastDFS框架中的三个角色"><a href="#FastDFS框架中的三个角色" class="headerlink" title="FastDFS框架中的三个角色"></a>FastDFS框架中的三个角色</h2><ul><li>追踪器（Tracker）：管理者，管理存储节点。（守护进程）</li><li>存储节点：存储数据，存储节点有多个。（守护进程）</li><li>客户端：文件上传与下载。</li></ul><h2 id="FastDFS框架中的三个角色之间的配合方式"><a href="#FastDFS框架中的三个角色之间的配合方式" class="headerlink" title="FastDFS框架中的三个角色之间的配合方式"></a>FastDFS框架中的三个角色之间的配合方式</h2><ul><li><p>追踪器：最先启动</p></li><li><p>存储节点<br>（1）第二个启动<br>（2）存储节点启动后，会单独开一个线程<br>  汇报当前存储节点的容量和剩余容量<br>  汇报数据同步情况<br>  汇报文件被下载的次数<br>  …</p></li><li><p>客户端：最后启动。</p></li></ul><p>(1)上传</p><p><img src="/images/upload.png"></p><p>连接追踪器，询问存储节点的信息。<br>比如：<br>上传1G文件，询问哪个存储节点有足够的容量；<br>追踪器查询，得到结果；<br>追踪器将查询到的存储节点的IP:PORT发送给客户端；<br>通过IP:PORT连接存储节点；<br>将文件内容发送给存储节点。</p><p>(2)下载</p><p><img src="/images/download.png"></p><p>连接追踪器，询问存储节点的信息。<br>比如：<br>问一下，要下载的文件在哪一个存储节点<br>追踪器查询，得到结果<br>追踪器将查到的存储节点的IP:POR发送给客户端<br>通过IP:PORT连接存储节点<br>下载文件</p><h2 id="FastDFS集群"><a href="#FastDFS集群" class="headerlink" title="FastDFS集群"></a>FastDFS集群</h2><h3 id="追踪器集群"><a href="#追踪器集群" class="headerlink" title="追踪器集群"></a>追踪器集群</h3><ul><li>为什么集群：避免单点故障</li><li>多个Tracker如何工作：轮询工作</li><li>如何实现集群：修改配置文件</li></ul><h3 id="存储节点集群"><a href="#存储节点集群" class="headerlink" title="存储节点集群"></a>存储节点集群</h3><ul><li>FastDFS管理存储节点的方式：通过分组的方式</li><li>集群方式：<br>（1） 横向扩容：增加容量，即：添加一台新的主机放入新的组中。不同组主机之间不需要通信。<br>（2） 纵向扩容：数据备份。即：添加一台新的主机放入到现有的组中。同一组中的主机关系是互相备份的，同一个组中的主机需要相互通信。每组的容量就是本组容量最小的主机。</li><li>如何实现：修改配置文件</li></ul><h2 id="fastdfs多主机配置"><a href="#fastdfs多主机配置" class="headerlink" title="fastdfs多主机配置"></a>fastdfs多主机配置</h2><p><img src="/images/fastdfs_config.png"></p><h2 id="redis安装配置"><a href="#redis安装配置" class="headerlink" title="redis安装配置"></a>redis安装配置</h2><h3 id="安装包下载：http-redis-cn"><a href="#安装包下载：http-redis-cn" class="headerlink" title="安装包下载：http://redis.cn/"></a>安装包下载：<a href="http://redis.cn/">http://redis.cn/</a></h3><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>make<br>sudo make install</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>服务器<br>redis-server<br>客户端<br>redis-cli</p><h3 id="redis中的数据组织格式"><a href="#redis中的数据组织格式" class="headerlink" title="redis中的数据组织格式"></a>redis中的数据组织格式</h3><p>key:字符串<br>value:可选的</p><ol><li>string</li><li>list:存储多个string的数组</li><li>set：数据无序的</li><li>sortedset：数据有序的，集合中的元素分为两部分</li><li>hash：跟map数据组织方式一样，key:value</li></ol><h3 id="redis数据持久化"><a href="#redis数据持久化" class="headerlink" title="redis数据持久化"></a>redis数据持久化</h3><ul><li>rdb方式<br>默认的持久化方式，将内存数据以二进制文件方式写入磁盘（xxx.rdb）<br>文件比较小，恢复时间短，效率高<br>用户设定频率进行同步数据，容易丢失数据，数据完整性较低</li><li>aof方式<br>默认关闭，将生成数据的命令持久化到磁盘（xxx.aof）。<br>文件比较大，恢复时间长，效率较低<br>1s就同步一次，数据完整性较高。<br>两种模式同时开启, 如果要进行数据恢复, 如何选择?<br>考虑效率：rdb<br>考虑数据完整性：aof</li></ul><h3 id="Nginx初步认识"><a href="#Nginx初步认识" class="headerlink" title="Nginx初步认识"></a>Nginx初步认识</h3><ul><li>是什么？<br>是一个开源框架。<br>库和框架的区别：库是一套API；框架有一套API，有一套自己的事件处理机制。</li><li>能干什么？<br>（1）作为web服务器—基于http协议<br>（2）反向代理服务器—-使web服务器实现负载均衡<br>（3）邮件服务器—–基于pop3协议</li><li>怎样做？<br>（1）web服务器</li><li>处理静态网页：</li></ul><p>1.制作出html网页，并且部署到对应的资源目录中；<br>2.根据客户端的请求，在服务器端添加对应的location处理指令（nginx.conf）<br>3.重新加载nginx.conf配置文件<br>客户端请求的url：<a href="http://xxx.com/hello/login.html">http://xxx.com/hello/login.html</a><br>去掉协议：http<br>去掉域名：xxx.com<br>去掉端口<br>去掉尾部的文件名<br>最终剩余：&#x2F;hello&#x2F;，这就是服务器端要处理的事件</p><p>（2）反向代理服务器<br>1.找到反向代理服务器的nginx.conf<br>2.找到http{server{}}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen: 80;//客户端访问代理服务器的时候用到的端口</span><br><span class="line">server_name: localhost;//域名，客户端访问代理服务器时，使用的地址</span><br><span class="line">//配置如何转发，根据客户端的url找到对应的转发指令</span><br><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line">//设置转发的地址</span><br><span class="line">proxy_pass: http://test.com;</span><br><span class="line">&#125;</span><br><span class="line">location /hello/</span><br><span class="line">&#123;</span><br><span class="line">//设置转发的地址</span><br><span class="line">proxy_pass: http://test.com;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置代理</span><br><span class="line">upstream test.com</span><br><span class="line">&#123;</span><br><span class="line">server 192.168.198.148:80;</span><br><span class="line">server 192.168.198.149:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//配置web服务器</span><br><span class="line">//192.168.198.148 web服务器</span><br><span class="line">server&#123;</span><br><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">root xxx;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">lcoation /hello/</span><br><span class="line">&#123;</span><br><span class="line">root xxx;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//192.168.198.149 web服务器</span><br><span class="line">server&#123;</span><br><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">root xxx;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">lcoation /hello/</span><br><span class="line">&#123;</span><br><span class="line">root xxx;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fastCGI"><a href="#fastCGI" class="headerlink" title="fastCGI"></a>fastCGI</h3><ul><li><p>是什么？<br>运行在服务器端的代码，帮助服务器处理客户端提交的动态请求。</p></li><li><p>干什么？<br>帮助服务器处理客户端提交的动态请求</p></li><li><p>怎么用？</p></li></ul><p>nginx如何转发数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//分析处客户端请求对应的指令---/test</span><br><span class="line">location /test</span><br><span class="line">&#123;</span><br><span class="line">fastcgi_pass 地址：端口;</span><br><span class="line">include fastcgi.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fastcgi如何接收数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//启动，通过spawn-fcgi启动</span><br><span class="line">spawn-fcgi -a IP -p port -f ./fcgi</span><br><span class="line">//编写fastcgi程序的时候</span><br><span class="line">接收数据：调用读终端得到函数就是接收数据。（重定向了输入）</span><br><span class="line">发送数据：调用写终端的函数就是发送数据。（重定向了输出）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fastcgi如何处理数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//编写登录的fastcgi程序</span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">while(FCGI_Accept()&gt;=0)&#123;</span><br><span class="line">//1.接收登录信息--&gt;环境变量中</span><br><span class="line">//post:读数据块长度CONTENT_LENGTH</span><br><span class="line">//get：从请求行的第二部分读，QUEERY_STRING</span><br><span class="line">//2.处理数据</span><br><span class="line">//3.回发数据----&gt;假设格式是json</span><br><span class="line">printf(&quot;content-type:application/json&quot;);</span><br><span class="line">printf(&quot;status:ok&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件上传下载流程"><a href="#文件上传下载流程" class="headerlink" title="文件上传下载流程"></a>文件上传下载流程</h3><ul><li><p>文件上传流程<br><img src="/images/fast_upload.png" alt="fast_upload"></p></li><li><p>文件下载流程<br><img src="/images/download_1.png" alt="fast_upload"></p></li><li><p>文件下载优化<br>直接让客户端连接fastDFS的存储节点, 实现文件下载！<br>举例, 访问一个url直接下载:<a href="http://192.168.247.147/group1/M00/00/00/wKj3k1tMBKuARhwBAAvea_OGt2M471.jpg">http://192.168.247.147/group1/M00/00/00/wKj3k1tMBKuARhwBAAvea_OGt2M471.jpg</a> </p></li><li><p>客户端发送请求使用的协议: http<br>fastDFS能不能解析http协议<br>nginx能解析http协议<br>在nginx中安装fastDFS的插件</p></li><li><p>客户端怎么知道文件就存储在对应的那个存储节点上?<br>上传的时候将fileID和存储节点IP地址都进行存储<br><img src="/images/download_2.png" alt="fast_upload"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客webserver</title>
      <link href="/2022/07/31/%E7%89%9B%E5%AE%A2webserver/"/>
      <url>/2022/07/31/%E7%89%9B%E5%AE%A2webserver/</url>
      
        <content type="html"><![CDATA[<h1 id="两种高效的事件处理模式"><a href="#两种高效的事件处理模式" class="headerlink" title="两种高效的事件处理模式"></a>两种高效的事件处理模式</h1><h2 id="reactor模式"><a href="#reactor模式" class="headerlink" title="reactor模式"></a>reactor模式</h2><p>主线程负责接受客户端连接，工作线程处理数据读写，逻辑业务。<br>一般配合同步io实现</p><h2 id="proactor模式"><a href="#proactor模式" class="headerlink" title="proactor模式"></a>proactor模式</h2><p>主线程执行数据读写操作，工作线程只负责处理逻辑业务。<br>一般配合异步io实现（异步io实现复杂）</p><h2 id="模拟proactor模式实现事件处理"><a href="#模拟proactor模式实现事件处理" class="headerlink" title="模拟proactor模式实现事件处理"></a>模拟proactor模式实现事件处理</h2><p>主线程执行数据读写操作，工作线程只负责处理逻辑业务，io操作依然使用同步io实现。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web服务器开发</title>
      <link href="/2022/06/19/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2022/06/19/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<ul><li>浏览器和web服务器通信模式</li></ul><p><img src="/images/web.png"></p><ul><li>使用epoll模型开发web服务器</li></ul><p>开发流程：</p><ol><li>创建socket</li><li>设置端口复用</li><li>绑定ip和端口</li><li>进行监听</li><li>创建epoll树</li><li>将监听文件描述符上epoll树</li><li>循环等待事件发生</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">while(1)&#123;</span><br><span class="line">nready=epoll_wait();</span><br><span class="line">if(nready&lt;0)&#123;</span><br><span class="line">错误处理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;nready;i++)&#123;</span><br><span class="line">//如果是新的客户端连接到来，就接受连接，并将cfd上树</span><br><span class="line">if(events[i].data.fd==lfd)&#123;</span><br><span class="line">cfd=accept();</span><br><span class="line">epoll_ctl(epfd,fd,EPOLL_CTL_ADD, &amp;EV);</span><br><span class="line">&#125;</span><br><span class="line">//如果是数据发送过来，就进行http请求</span><br><span class="line">else&#123;</span><br><span class="line">do_http_request(cfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>8.处理客户端的请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int do_http_request(int cfd)&#123;</span><br><span class="line"></span><br><span class="line">//读取数据</span><br><span class="line">//先读一行，获得请求行，得到请求的url</span><br><span class="line">//循环读取剩余行</span><br><span class="line"></span><br><span class="line">//查看本地是否有该文件</span><br><span class="line">//若没有，返回404not found页面</span><br><span class="line">//若有，判断文件类型：普通文件/目录文件</span><br><span class="line">//若是普通文件：组织应答格式消息并将文件发送给浏览器</span><br><span class="line">//若是目录文件：则将目录下的所有文件组织成文件列表形式生成html文件（每个文件都是一个超链接），然后发送给浏览器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>libevent</title>
      <link href="/2022/06/16/libevent/"/>
      <url>/2022/06/16/libevent/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在linux上, 其实质就是epoll反应堆.</p></li><li><p>libevent是事件驱动, epoll反应堆也是事件驱动, 当要监测的事件发生的时候, 就会调用事件对应的回调函数, 执行相应操作. 特别提醒: 事件回调函数是由用户开发的, 但是不是由用户显示去调用的, 而是由libevent去调用的.</p></li><li><p>基于bufferevent和链接监听器代码流程（修改了libevent自带样例中的hello-world.c）</p></li></ul><p><img src="/images/buffer_libevent.png"></p><ul><li>基于bufferevent和链接监听器的服务器端程序源码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  This exmple program provides a trivial server program that listens for TCP</span><br><span class="line">  connections on port 9995.  When they arrive, it writes a short message to</span><br><span class="line">  each client connection, and closes each connection once it is flushed.</span><br><span class="line"></span><br><span class="line">  Where possible, it exits cleanly in response to a SIGINT (ctrl-c).</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#ifndef WIN32</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"># ifdef _XOPEN_SOURCE_EXTENDED</span><br><span class="line">#  include &lt;arpa/inet.h&gt;</span><br><span class="line"># endif</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#include &lt;event2/bufferevent.h&gt;</span><br><span class="line">#include &lt;event2/buffer.h&gt;</span><br><span class="line">#include &lt;event2/listener.h&gt;</span><br><span class="line">#include &lt;event2/util.h&gt;</span><br><span class="line">#include &lt;event2/event.h&gt;</span><br><span class="line"></span><br><span class="line">static const char MESSAGE[] = &quot;Hello, World!\n&quot;;</span><br><span class="line"></span><br><span class="line">static const int PORT = 9995;</span><br><span class="line"></span><br><span class="line">static void listener_cb(struct evconnlistener *, evutil_socket_t,</span><br><span class="line">    struct sockaddr *, int socklen, void *);</span><br><span class="line">static void conn_readcb(struct bufferevent *, void *);</span><br><span class="line">static void conn_writecb(struct bufferevent *, void *);</span><br><span class="line">static void conn_eventcb(struct bufferevent *, short, void *);</span><br><span class="line">static void signal_cb(evutil_socket_t, short, void *);</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">struct event_base *base;  //创建地基</span><br><span class="line">struct evconnlistener *listener;  //创建链接监听器</span><br><span class="line">struct event *signal_event; //信号事件</span><br><span class="line"></span><br><span class="line">struct sockaddr_in sin;</span><br><span class="line">#ifdef WIN32</span><br><span class="line">WSADATA wsa_data;</span><br><span class="line">WSAStartup(0x0201, &amp;wsa_data);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">base = event_base_new();  //创建地基----epoll树的树根</span><br><span class="line">if (!base) &#123;</span><br><span class="line">fprintf(stderr, &quot;Could not initialize libevent!\n&quot;);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(&amp;sin, 0, sizeof(sin));</span><br><span class="line">sin.sin_family = AF_INET;</span><br><span class="line">sin.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">//创建链接监听器---内部实现了socket,bind,listen,accept</span><br><span class="line">listener = evconnlistener_new_bind(base, listener_cb, (void *)base,</span><br><span class="line">    LEV_OPT_REUSEABLE|LEV_OPT_CLOSE_ON_FREE, -1,</span><br><span class="line">    (struct sockaddr*)&amp;sin,</span><br><span class="line">    sizeof(sin));</span><br><span class="line"></span><br><span class="line">if (!listener) &#123;</span><br><span class="line">fprintf(stderr, &quot;Could not create a listener!\n&quot;);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置SIGINT信号的事件回调函数</span><br><span class="line">signal_event = evsignal_new(base, SIGINT, signal_cb, (void *)base);</span><br><span class="line"></span><br><span class="line">//上树</span><br><span class="line">if (!signal_event || event_add(signal_event, NULL)&lt;0) &#123;</span><br><span class="line">fprintf(stderr, &quot;Could not create/add a signal event!\n&quot;);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//进入等待事件循环，------相当于while(1)&#123; epoll_wait()&#125;</span><br><span class="line">event_base_dispatch(base);</span><br><span class="line"></span><br><span class="line">evconnlistener_free(listener);</span><br><span class="line">event_free(signal_event);</span><br><span class="line">event_base_free(base);</span><br><span class="line"></span><br><span class="line">printf(&quot;done\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//listener为链接监听器</span><br><span class="line">//fd为通信文件描述符</span><br><span class="line">//sa和socklen：客户端的ip和端口地址信息</span><br><span class="line">static void</span><br><span class="line">listener_cb(struct evconnlistener *listener, evutil_socket_t fd,</span><br><span class="line">    struct sockaddr *sa, int socklen, void *user_data)</span><br><span class="line">&#123;</span><br><span class="line">struct event_base *base = user_data;</span><br><span class="line">struct bufferevent *bev;</span><br><span class="line"></span><br><span class="line">//创建bufferevent缓冲区</span><br><span class="line">bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);</span><br><span class="line">if (!bev) &#123;</span><br><span class="line">fprintf(stderr, &quot;Error constructing bufferevent!&quot;);</span><br><span class="line">event_base_loopbreak(base);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置回调，读,写,事件回调</span><br><span class="line">bufferevent_setcb(bev, conn_readcb, conn_writecb, conn_eventcb, NULL);</span><br><span class="line">//使bufferevent设置生效</span><br><span class="line">bufferevent_enable(bev, EV_WRITE);</span><br><span class="line">bufferevent_enable(bev, EV_READ);</span><br><span class="line">//bufferevent_disable(bev, EV_READ);</span><br><span class="line"></span><br><span class="line">//bufferevent_write(bev, MESSAGE, strlen(MESSAGE));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void</span><br><span class="line">conn_readcb(struct bufferevent *bev, void *user_data)</span><br><span class="line">&#123;</span><br><span class="line">char buf[1024];</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line"></span><br><span class="line">//从bufferevent中读数据</span><br><span class="line">int n=bufferevent_read(bev,buf,sizeof(buf));</span><br><span class="line">printf(&quot;n=[%d],buf=[%s]\n&quot;,n,buf);</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">buf[i]=toupper(buf[i]);</span><br><span class="line"></span><br><span class="line">//往bufferevent的写缓冲区写数据，内核会自动将bufferevent写缓冲区的数据刷新进内核的写缓冲区，内核会将数据发送出去。此时触发了写回调函数，仅仅用于通知。</span><br><span class="line">bufferevent_write(bev,buf,n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">static void</span><br><span class="line">conn_writecb(struct bufferevent *bev, void *user_data)</span><br><span class="line">&#123;</span><br><span class="line">//获取写缓冲区指针</span><br><span class="line">struct evbuffer *output = bufferevent_get_output(bev);</span><br><span class="line">//如果为0，说明数据已经发出</span><br><span class="line">if (evbuffer_get_length(output) == 0) &#123;</span><br><span class="line">printf(&quot;flushed answer\n&quot;);</span><br><span class="line">//bufferevent_free(bev);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void</span><br><span class="line">conn_eventcb(struct bufferevent *bev, short events, void *user_data)</span><br><span class="line">&#123;</span><br><span class="line">if (events &amp; BEV_EVENT_EOF) &#123;</span><br><span class="line">printf(&quot;Connection closed.\n&quot;);</span><br><span class="line">&#125; else if (events &amp; BEV_EVENT_ERROR) &#123;</span><br><span class="line">printf(&quot;Got an error on the connection: %s\n&quot;,</span><br><span class="line">    strerror(errno));/*XXX win32*/</span><br><span class="line">&#125;</span><br><span class="line">/* None of the other events can happen here, since we haven&#x27;t enabled</span><br><span class="line"> * timeouts */</span><br><span class="line">bufferevent_free(bev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void</span><br><span class="line">signal_cb(evutil_socket_t sig, short events, void *user_data)</span><br><span class="line">&#123;</span><br><span class="line">struct event_base *base = user_data;</span><br><span class="line">struct timeval delay = &#123; 2, 0 &#125;;</span><br><span class="line"></span><br><span class="line">printf(&quot;Caught an interrupt signal; exiting cleanly in two seconds.\n&quot;);</span><br><span class="line"></span><br><span class="line">event_base_loopexit(base, &amp;delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>udp通信与本地socket通信</title>
      <link href="/2022/06/15/udp%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/06/15/udp%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>udp是面向无连接的，不可靠的，不稳定的数据报传输协议。</p></li><li><p>udp服务端代码demo</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">//udp服务端</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;arpa/inet.h&gt;</span><br><span class="line">#include&lt;netinet/in.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">int cfd=socket(AF_INET,SOCK_DGRAM,0);</span><br><span class="line">if(cfd&lt;0)&#123;</span><br><span class="line">perror(&quot;socket error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in serv;</span><br><span class="line">struct sockaddr_in client;</span><br><span class="line">bzero(&amp;serv,sizeof(serv));</span><br><span class="line">serv.sin_family=AF_INET;</span><br><span class="line">serv.sin_port=htons(8888);</span><br><span class="line">serv.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">bind(cfd,(struct sockaddr*)&amp;serv,sizeof(serv));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">char buf[1024]=&#123;0&#125;;</span><br><span class="line">socklen_t len;</span><br><span class="line">int i;</span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">//读数据</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">len=sizeof(client);</span><br><span class="line">n=recvfrom(cfd,buf,sizeof(buf),0,(struct sockaddr*)&amp;client,&amp;len);</span><br><span class="line"></span><br><span class="line">printf(&quot;port=[%d],n==[%d],buf=[%s]\n&quot;,ntohs(client.sin_port),n,buf);</span><br><span class="line"></span><br><span class="line">//小写转化为大写</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">buf[i]=toupper(buf[i]);</span><br><span class="line"></span><br><span class="line">//发送数据</span><br><span class="line">sendto(cfd,buf,n,0,(struct sockaddr*)&amp;client,len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">close(cfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>udp客户端demo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//udp客户端</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;arpa/inet.h&gt;</span><br><span class="line">#include&lt;netinet/in.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">int cfd=socket(AF_INET,SOCK_DGRAM,0);</span><br><span class="line">if(cfd&lt;0)&#123;</span><br><span class="line">perror(&quot;socket error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in serv;</span><br><span class="line">bzero(&amp;serv,sizeof(serv));</span><br><span class="line">serv.sin_family=AF_INET;</span><br><span class="line">serv.sin_port=htons(8888);</span><br><span class="line">inet_pton(AF_INET,&quot;127.0.0.1&quot;,&amp;serv.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">char buf[1024]=&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//读标准输入</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">n=read(STDIN_FILENO,buf,sizeof(buf));</span><br><span class="line"></span><br><span class="line">//发送数据</span><br><span class="line">sendto(cfd,buf,n,0,(struct sockaddr*)&amp;serv,sizeof(serv));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//读数据</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line"></span><br><span class="line">n=recvfrom(cfd,buf,sizeof(buf),0,NULL,NULL);</span><br><span class="line">printf(&quot;n=[%d],buf=[%s]\n&quot;,n,buf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">close(cfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>本地socket通信</li></ul><p>与网络通信不同的是，本地socket通信通过绑定本地的socket文件（大小为0），作为中介，进行通信。</p><ul><li>服务器端demo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">//本地socket通信服务器端</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;arpa/inet.h&gt;</span><br><span class="line">#include&lt;netinet/in.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line">#include &lt;sys/un.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">//创建socket</span><br><span class="line">int lfd=socket(AF_UNIX,SOCK_STREAM,0);</span><br><span class="line">if(lfd&lt;0)&#123;</span><br><span class="line">perror(&quot;socket error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除socket文件，避免bind失败</span><br><span class="line">unlink(&quot;./server.sock&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//绑定本地soket文件</span><br><span class="line">struct sockaddr_un serv;</span><br><span class="line">bzero(&amp;serv,sizeof(serv));</span><br><span class="line">serv.sun_family=AF_UNIX;</span><br><span class="line">strcpy(serv.sun_path,&quot;./server.sock&quot;);</span><br><span class="line">int ret=bind(lfd,(struct sockaddr *)&amp;serv,sizeof(serv));</span><br><span class="line">if(ret&lt;0)&#123;</span><br><span class="line">perror(&quot;bind error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line"></span><br><span class="line">listen(lfd,10);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//接受客户端连接</span><br><span class="line"></span><br><span class="line">struct sockaddr_un client;</span><br><span class="line">bzero(&amp;client,sizeof(client));</span><br><span class="line">int len=sizeof(client);</span><br><span class="line">int cfd=accept(lfd,(struct sockaddr *)&amp;client,&amp;len);</span><br><span class="line">if(cfd&lt;0)&#123;</span><br><span class="line">perror(&quot;accept error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;client--&gt;[%s]\n&quot;,client.sun_path);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">char buf[1024];</span><br><span class="line"></span><br><span class="line">//收发数据</span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">//读数据</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">n=read(cfd,buf,sizeof(buf));</span><br><span class="line">if(n&lt;=0)&#123;</span><br><span class="line">printf(&quot;read error or client closed. n=[%d]\n&quot;,n);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;n=[%d],buf=[%s]\n&quot;,n,buf);</span><br><span class="line"></span><br><span class="line">//发送数据</span><br><span class="line">write(cfd,buf,n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(cfd);</span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端demo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">//本地socket通信客户端</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;arpa/inet.h&gt;</span><br><span class="line">#include&lt;netinet/in.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line">#include &lt;sys/un.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">//创建socket</span><br><span class="line">int cfd=socket(AF_UNIX,SOCK_STREAM,0);</span><br><span class="line">if(cfd&lt;0)&#123;</span><br><span class="line">perror(&quot;socket error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除socket文件，避免bind失败</span><br><span class="line">unlink(&quot;./client.sock&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//将客户端绑定在本地的soket文件</span><br><span class="line">struct sockaddr_un client;</span><br><span class="line">bzero(&amp;client,sizeof(client));</span><br><span class="line">client.sun_family=AF_UNIX;</span><br><span class="line">strcpy(client.sun_path,&quot;./client.sock&quot;);</span><br><span class="line">int ret=bind(cfd,(struct sockaddr *)&amp;client,sizeof(client));</span><br><span class="line">if(ret&lt;0)&#123;</span><br><span class="line">perror(&quot;bind error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct sockaddr_un serv;</span><br><span class="line">bzero(&amp;serv,sizeof(serv));</span><br><span class="line">serv.sun_family=AF_UNIX;</span><br><span class="line">strcpy(serv.sun_path,&quot;./server.sock&quot;);</span><br><span class="line">//连接服务器端</span><br><span class="line">ret=connect(cfd,(struct sockaddr*)&amp;serv,sizeof(serv));</span><br><span class="line">if(ret&lt;0)&#123;</span><br><span class="line">perror(&quot;connect error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">char buf[1024];</span><br><span class="line"></span><br><span class="line">//收发数据</span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">//读标准输入</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">n=read(STDIN_FILENO,buf,sizeof(buf));</span><br><span class="line"></span><br><span class="line">//发送数据</span><br><span class="line">write(cfd,buf,n);</span><br><span class="line"></span><br><span class="line">//读数据</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">n=read(cfd,buf,sizeof(buf));</span><br><span class="line">if(n&lt;=0)&#123;</span><br><span class="line">printf(&quot;read error or server closed. n=[%d]\n&quot;,n);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;n=[%d],buf=[%s]\n&quot;,n,buf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(cfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>内存对齐问题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//调用offset函数测试结构体成员变量的偏移量</span><br><span class="line">#include&lt;stddef.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">//内存对齐问题，与结构体中字节数最大的元素类型对齐，不够补齐</span><br><span class="line">struct s&#123;//调整元素顺序后，struct s所占字节数也会改变</span><br><span class="line">double d;</span><br><span class="line">int i;</span><br><span class="line">char c;</span><br><span class="line">char a[2];</span><br><span class="line">&#125;;</span><br><span class="line">struct s2&#123;//调整元素顺序后，struct s所占字节数也会改变</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">char c;</span><br><span class="line">double d;</span><br><span class="line">char a[2];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;offsets:i=%zd; c=%zd; d=%zd; a=%zd; a[1]=%zd\n&quot;,offsetof(struct s,i),offsetof(struct s,c),offsetof(struct s,d),offsetof(struct s,a),offsetof(struct s,a[1]));</span><br><span class="line">printf(&quot;sizeof(struct s)=%zd\n&quot;,sizeof(struct s));</span><br><span class="line">printf(&quot;************************\n&quot;);</span><br><span class="line">printf(&quot;offsets:i=%zd; c=%zd; d=%zd; a=%zd; a[1]=%zd\n&quot;,offsetof(struct s2,i),offsetof(struct s2,c),offsetof(struct s2,d),offsetof(struct s2,a),offsetof(struct s2,a[1]));</span><br><span class="line">printf(&quot;sizeof(struct s2)=%zd\n&quot;,sizeof(struct s2));</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果<br><img src="/images/offset.png"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2022/06/15/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2022/06/15/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>线程池原理<br><img src="/images/thread_pool.png"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tinywebserver学习收获</title>
      <link href="/2022/06/11/tinywebserver/"/>
      <url>/2022/06/11/tinywebserver/</url>
      
        <content type="html"><![CDATA[<h2 id="定时器模块"><a href="#定时器模块" class="headerlink" title="定时器模块"></a>定时器模块</h2><p>(1)为什么要设计该模块？<br>为了处理非活跃的客户端连接，因为客户端与服务器端建立连接后，如果长时间不交换数据，会一直占用服务器端的文件描述符，造成连接资源的浪费。<br>(2)定时模块的设计思路</p><ul><li><p>定时器设计：将连接资源，超时时间（还剩多长时间超时）和回调函数封装起来，回调函数指向定时事件。</p></li><li><p>定时器容器的设计：使用双向升序链表实现。<br>好处是：可以快速的定位到即将超时的客户端资源，删除操作时间复杂度为O(1)(注意如果使用单链表，该复杂度会变为O(n)),插入操作时间复杂读为O(n).</p></li><li><p>定时任务处理函数的设计:封装在容器类中，函数遍历升序链表容器，根据超时时间，处理对应的定时器。</p></li><li><p>整体总结：服务器主循环为每一个连接创建一个定时器，并对每一个连接进行定时，利用升序双向链表将所有定时器串联起来，通过SIGALAM信号周期性的触发时钟信号，信号处理函数只负责发送信号值（因为了防止信号竞态发生，信号处理期间系统不会再次触发该信号，所以现需要在执行期间屏蔽该信号，如果信号处理函数的执行时间过长，会导致信号屏蔽过久），因此，不处理信号对应的逻辑，交由主循环处理即可，这样就会缩短信号处理函数的异步执行时间，减少对主程序的影响。其中，信号处理函数是通过管道和主程序通信，可以通过EPOLL对管道的读事件进行监听，然后由服务器端，对非活跃的客户端从EPOLL树删除，关闭该连接，并且对于链表中对应的计时器进行删除。</p></li></ul><h2 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h2><ul><li>知识扩展：单例模式<br>单例模式的特点：单例模式只能有一个实例；单例类必须创建自己的唯一实例；单例类必须向其他对象提供这一实例。</li></ul><p>(1)单例模式之饿汉模式（效率低，不管用不用都会先创建实例）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//单例模式之俄汉模式,饿汉单例，即在最开始的时候，静态对象就已经创建完成.</span><br><span class="line">//单例的饿汉实现是线程安全的，因为对象在使用前就已经创建出来了。</span><br><span class="line">class single_hungry&#123;</span><br><span class="line">public:</span><br><span class="line">static single_hungry *getinstance()&#123;</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">single_hungry();</span><br><span class="line">static single_hungry* p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">single_hungry* single_hungry::p=new single_hungry();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2)单例模式之懒汉模式（效率高，用时才创建实例）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//单例模式之懒汉模式(调用时候才去初始化)，需要保证线程安全</span><br><span class="line">class single&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">//提供给外部调用的接口</span><br><span class="line">static single* getinstance()&#123;</span><br><span class="line">//双检测锁，p不为null就直接返回p，不用在加锁解锁中浪费时间</span><br><span class="line">if(p==NULL)&#123;</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line">if(p==NULL)&#123;</span><br><span class="line">p=new single();</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">single()&#123;//构造函数私有，保证外部不能实例化对象，一个类只有一个实例化对象（单例模式）</span><br><span class="line">pthread_mutex_init(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line">static single *p;//该指针指向single对象</span><br><span class="line">static pthread_mutex_t mutex;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//静态成员变量在类中仅仅是声明，没有定义。所以要在类的外面定义，实际上是给静态成员变量分配内存。</span><br><span class="line">single * single::p=NULL;</span><br><span class="line">pthread_mutex_t single::mutex;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>c++11后单例模式之懒汉模式，更加简单的写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> class single&#123;</span><br><span class="line"> private:</span><br><span class="line">     single()&#123;&#125;</span><br><span class="line">     ~single()&#123;&#125;</span><br><span class="line"> </span><br><span class="line"> public:</span><br><span class="line">    static single* getinstance();</span><br><span class="line"> </span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">single* single::getinstance()&#123;</span><br><span class="line">    static single obj;//c++11后要求编译器保证内部静态变量的线程安全性。如果是c++11之前的版本，则需要加锁</span><br><span class="line">    return &amp;obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程4</title>
      <link href="/2022/05/26/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B4/"/>
      <url>/2022/05/26/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程3</title>
      <link href="/2022/05/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B3/"/>
      <url>/2022/05/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B3/</url>
      
        <content type="html"><![CDATA[<h2 id="pool函数"><a href="#pool函数" class="headerlink" title="pool函数"></a>pool函数</h2><p>int poll(struct pollfd *fds, nfds_t nfds, int timeout);</p><ul><li><p>函数说明: 跟select类似, 委托内核监控可读, 可写, 异常事件</p></li><li><p>函数参数:<br>fds: 一个struct pollfd结构体数组的首地址<br>struct pollfd {<br>  int   fd;    &#x2F;&#x2F;要监控的文件描述符,如果fd为-1, 表示内核不再监控<br>  short events; &#x2F;&#x2F;输入参数, 表示告诉内核要监控的事件, 读事件, 写事件, 异常事件<br>  short revents;&#x2F;&#x2F;输出参数, 表示内核告诉应用程序有哪些文件描述符有事件发生<br>  };</p></li></ul><p>events&#x2F;revents:<br>POLLIN:可读事件<br>POLLOUT: 可写事件<br>POLLERR: 异常事件</p><p>nfds: 告诉内核监控的范围, 具体是: 数组下标的最大值+1 </p><p>timeout:<br>&#x3D;0: 不阻塞, 立刻返回<br>-1: 表示一直阻塞, 直到有事件发生</p><blockquote><p>0: 表示阻塞时长, 在时长范围内若有事件发生会立刻返回;如果超过了时长也会立刻返回。</p></blockquote><ul><li>函数返回值:<blockquote><p>0: 发生变化的文件描述符的个数<br>&#x3D;0: 没有文件描述符发生变化</p></blockquote></li></ul><p>-1: 表示异常</p><h2 id="poll模型并发服务器"><a href="#poll模型并发服务器" class="headerlink" title="poll模型并发服务器"></a>poll模型并发服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">//服务器端程序</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;netinet/ip.h&gt; /* superset of previous */</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line">#include&quot;wrap.h&quot; //自己实现的已经封装好的函数，含有错误处理</span><br><span class="line">#include &lt;poll.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">//创建socket</span><br><span class="line">int lfd=Socket(AF_INET,SOCK_STREAM,0);</span><br><span class="line"></span><br><span class="line">//设置端口复用，记得在bind之前就设置好端口复用</span><br><span class="line">int opt = 1;</span><br><span class="line">setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(int));</span><br><span class="line"></span><br><span class="line">//绑定</span><br><span class="line">struct sockaddr_in addr;</span><br><span class="line">bzero(&amp;addr,sizeof(addr));</span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(1026);</span><br><span class="line">addr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">Bind(lfd,(struct sockaddr*)&amp;addr,sizeof(addr));</span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line">Listen(lfd,128);</span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">//定义pollfd的结构体数组</span><br><span class="line">struct pollfd client[1024];</span><br><span class="line">for(i=0;i&lt;1024;i++)</span><br><span class="line">client[i].fd=-1;//-1代表内核不监控</span><br><span class="line"></span><br><span class="line">//将监听文件描述符委托内核监控------监控读事件</span><br><span class="line">client[0].fd=lfd;</span><br><span class="line">client[0].events=POLLIN;</span><br><span class="line"></span><br><span class="line">int maxi=0;//maxi表示内核监控的范围</span><br><span class="line">int nready;</span><br><span class="line">char buf[1024];</span><br><span class="line">int sockfd;</span><br><span class="line">int n;</span><br><span class="line">int cfd;</span><br><span class="line">while(1)&#123;</span><br><span class="line">nready=poll(client,maxi+1,-1);</span><br><span class="line">if(nready&lt;0)&#123;</span><br><span class="line">if(errno==EINTR)&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">perror(&quot;poll error&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//有客户端连接请求到来</span><br><span class="line">// short events; 输入参数, 表示告诉内核要监控的事件, 读事件, 写事件, 异常事件  </span><br><span class="line">if(client[0].revents==POLLIN)&#123;</span><br><span class="line"></span><br><span class="line">cfd=Accept(lfd,NULL,NULL);</span><br><span class="line"></span><br><span class="line">//寻找client数组中的可用位置，找到后加入client数组中，委托内核监控</span><br><span class="line">for(i=1;i&lt;1024;i++)&#123;</span><br><span class="line">if(client[i].fd==-1)&#123;</span><br><span class="line">client[i].fd=cfd;</span><br><span class="line">client[i].events=POLLIN;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(i==1024)&#123;</span><br><span class="line">close(cfd);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//修改监控范围</span><br><span class="line">if(maxi&lt;i)</span><br><span class="line">maxi=i;</span><br><span class="line"></span><br><span class="line">if(--nready==0)</span><br><span class="line">continue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//有数据到来,注意0位置是监听文件描述符，通信从1开始</span><br><span class="line">//遍历文件描述符，找到不为-1的，说明该客户端有数据发来</span><br><span class="line">for(i=1;i&lt;=maxi;i++)&#123;</span><br><span class="line"></span><br><span class="line">if(client[i].fd==-1)</span><br><span class="line">continue;</span><br><span class="line"></span><br><span class="line">//  short revents;输出参数, 表示内核告诉应用程序有哪些文件描述符有事件发生 </span><br><span class="line">if(client[i].revents==POLLIN)&#123;   </span><br><span class="line"></span><br><span class="line">sockfd=client[i].fd;</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">n=Read(sockfd,buf,sizeof(buf));</span><br><span class="line">if(n&lt;=0)&#123;</span><br><span class="line">printf(&quot;read error or client closed,n==[%d]\n&quot;,n);</span><br><span class="line">close(sockfd);</span><br><span class="line">client[i].fd=-1;//该位置文件描述符置为-1，表示不在让内核监控，并且下次可再次被分配</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">printf(&quot;read over,n==[%d],buf==[%s]\n&quot;,n,buf);</span><br><span class="line">write(sockfd,buf,n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(--nready==0)</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>当poll函数返回的时候, 结构体当中的fd和events没有发生变化, 究竟有没有事件发生由revents来判断, 所以poll是请求和返回分离.</p></li><li><p>struct pollfd结构体中的fd成员若赋值为-1, 则poll不会监控.</p></li><li><p>相对于select, poll没有本质上的改变; 但是poll可以突破1024的限制.<br>在&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max查看一个进程可以打开的socket描述符上限.<br>如果需要可以修改配置文件: &#x2F;etc&#x2F;security&#x2F;limits.conf<br>加入如下配置信息, 然后重启终端即可生效.</p></li></ul><ul><li>soft nofile 1024</li><li>hard nofile 100000<br>soft和hard分别表示ulimit命令可以修改的最小限制和最大限制</li></ul><h2 id="epoll模型"><a href="#epoll模型" class="headerlink" title="epoll模型"></a>epoll模型</h2><p>将检测文件描述符的变化委托给内核去处理, 然后内核将发生变化的文件描述符对应的事件返回给应用程序.</p><ul><li>epoll函数<br><img src="/images/epoll.png"></li><li>epoll服务器开发</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">//服务器端程序</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;netinet/ip.h&gt; /* superset of previous */</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line">#include&quot;wrap.h&quot; //自己实现的已经封装好的函数，含有错误处理</span><br><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">//创建socket</span><br><span class="line">int lfd=Socket(AF_INET,SOCK_STREAM,0);</span><br><span class="line"></span><br><span class="line">//设置端口复用，记得在bind之前就设置好端口复用</span><br><span class="line">int opt = 1;</span><br><span class="line">setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(int));</span><br><span class="line"></span><br><span class="line">//绑定</span><br><span class="line">struct sockaddr_in addr;</span><br><span class="line">bzero(&amp;addr,sizeof(addr));</span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(1026);</span><br><span class="line">addr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">Bind(lfd,(struct sockaddr*)&amp;addr,sizeof(addr));</span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line">Listen(lfd,128);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建一颗epoll树,传入一个非零数即可</span><br><span class="line">int epfd=epoll_create(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct epoll_event ev;</span><br><span class="line">ev.events=EPOLLIN;//可读事件</span><br><span class="line">ev.data.fd=lfd;</span><br><span class="line">//将监听文件描述符上树</span><br><span class="line">epoll_ctl(epfd,EPOLL_CTL_ADD,lfd,&amp;ev);</span><br><span class="line">int nready;</span><br><span class="line">int i;</span><br><span class="line">struct epoll_event rev[1024];</span><br><span class="line">int sockfd;</span><br><span class="line">int cfd;</span><br><span class="line">char buf[1024];</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">//阻塞等待事件发生</span><br><span class="line">nready=epoll_wait(epfd,rev,1024,-1);</span><br><span class="line">if(nready&lt;0)&#123;</span><br><span class="line">if(errno==EINTR)&#123;//被信号中断</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"> break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;nready;i++)&#123;</span><br><span class="line"></span><br><span class="line">sockfd=rev[i].data.fd;</span><br><span class="line"></span><br><span class="line">//客户端连接到来</span><br><span class="line">if(sockfd==lfd)&#123;</span><br><span class="line">cfd=Accept(lfd,NULL,NULL);</span><br><span class="line"></span><br><span class="line">//上树，委托内核监控</span><br><span class="line">ev.events=EPOLLIN;</span><br><span class="line">ev.data.fd=cfd;</span><br><span class="line">epoll_ctl(epfd,EPOLL_CTL_ADD,cfd,&amp;ev);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else&#123;//客户端发送数据到来</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">n=Read(sockfd,buf,sizeof(buf));</span><br><span class="line"></span><br><span class="line">if(n&lt;=0)&#123;</span><br><span class="line">close(sockfd);</span><br><span class="line">epoll_ctl(epfd,EPOLL_CTL_DEL,sockfd,NULL);</span><br><span class="line">perror(&quot;read over or client closed\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">printf(&quot;client: n==[%d],buf=[%s]\n&quot;,n,buf);</span><br><span class="line">Write(sockfd,buf,n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(epfd);</span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>epoll的LT和ET模式:</li></ul><p>1.epoll默认情况下是LT模式, 在这种模式下, 若读数据一次性没有读完,缓冲区中还有可读数据, 则epoll_wait还会再次通知。<br>2.若将epoll设置为ET模式, 若读数据的时候一次性没有读完, 则epoll_wait不再通知,直到下次有新的数据发来。</p><ul><li>思考:</li></ul><p>1.在ET模式下, 如何在epoll_wait返回一次的情况下读完数据?<br>    循环读数据, 直到读完数据, 但是读完数据之后会阻塞.<br>2.紧接问题一，若能够一次性读完还需要设置什么?<br>    将通信文件描述符设置为非阻塞模式。否则，会循环读，最后进程会阻塞在read函数上，使得epoll_wait得不到执行，读不到另一个客户端的数据。</p><h2 id="epoll反应堆"><a href="#epoll反应堆" class="headerlink" title="epoll反应堆"></a>epoll反应堆</h2><ul><li>epoll反应堆的思想: c++的封装思想(把数据和操作封装到一起)<br>  –将描述符,事件,对应的处理方法封装在一起<br>  –当描述符对应的事件发生了, 自动调用处理方法(其实原理就是回调函数)</li></ul><h3 id="epoll反应堆思想，与上面的epoll模型不同之处是，epoll反应堆上树的不仅仅是文件描述符，而是一个结构体，该结构体至少包含：文件描述符，事件，回调函数。"><a href="#epoll反应堆思想，与上面的epoll模型不同之处是，epoll反应堆上树的不仅仅是文件描述符，而是一个结构体，该结构体至少包含：文件描述符，事件，回调函数。" class="headerlink" title="epoll反应堆思想，与上面的epoll模型不同之处是，epoll反应堆上树的不仅仅是文件描述符，而是一个结构体，该结构体至少包含：文件描述符，事件，回调函数。"></a>epoll反应堆思想，与上面的epoll模型不同之处是，epoll反应堆上树的不仅仅是文件描述符，而是一个结构体，该结构体至少包含：文件描述符，事件，回调函数。</h3><p><img src="/images/epoll_2.png"></p><h3 id="epoll反应堆代码分析"><a href="#epoll反应堆代码分析" class="headerlink" title="epoll反应堆代码分析"></a>epoll反应堆代码分析</h3><p><img src="/images/epoll_3.png"></p><h3 id="epoll反应堆代码"><a href="#epoll反应堆代码" class="headerlink" title="epoll反应堆代码"></a>epoll反应堆代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line">// epoll基于非阻塞I/O事件驱动</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">#include &quot;wrap.h&quot;</span><br><span class="line"></span><br><span class="line">#define MAX_EVENTS  1024                                    //监听上限数</span><br><span class="line">#define BUFLEN      4096</span><br><span class="line"></span><br><span class="line">void recvdata(int fd, int events, void *arg);</span><br><span class="line">void senddata(int fd, int events, void *arg);</span><br><span class="line"></span><br><span class="line">/* 描述就绪文件描述符相关信息 */</span><br><span class="line">struct myevent_s &#123;</span><br><span class="line">    int fd;                                                 //要监听的文件描述符</span><br><span class="line">    int events;                                             //对应的监听事件</span><br><span class="line">    void *arg;                                              //泛型参数</span><br><span class="line">    void (*call_back)(int fd, int events, void *arg);       //回调函数</span><br><span class="line">    int status;                                             //是否在监听:1-&gt;在红黑树上(监听), 0-&gt;不在(不监听)</span><br><span class="line">    char buf[BUFLEN];</span><br><span class="line">    int len;</span><br><span class="line">    long last_active;                                       //记录每次加入红黑树 g_efd 的时间值</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int g_efd;                                                  //全局变量, 保存epoll_create返回的文件描述符</span><br><span class="line">int g_lfd;//全局变量, 保存监听的文件描述符</span><br><span class="line">struct myevent_s g_events[MAX_EVENTS+1];                    //自定义结构体类型数组. +1--&gt;listen fd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*将结构体 myevent_s 成员变量 初始化*/</span><br><span class="line">void eventset(struct myevent_s *ev, int fd, void (*call_back)(int, int, void *), void *arg)</span><br><span class="line">&#123;</span><br><span class="line">    ev-&gt;fd = fd;</span><br><span class="line">    ev-&gt;call_back = call_back;</span><br><span class="line">    ev-&gt;events = 0;</span><br><span class="line">    ev-&gt;arg = arg;</span><br><span class="line">    ev-&gt;status = 0;</span><br><span class="line">    //memset(ev-&gt;buf, 0, sizeof(ev-&gt;buf));</span><br><span class="line">    //ev-&gt;len = 0;</span><br><span class="line">    ev-&gt;last_active = time(NULL);    //调用eventset函数的时间 unix时间戳</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 向 epoll监听的红黑树 添加一个 文件描述符 */</span><br><span class="line">void eventadd(int efd, int events, struct myevent_s *ev)</span><br><span class="line">&#123;</span><br><span class="line">    struct epoll_event epv = &#123;0, &#123;0&#125;&#125;;</span><br><span class="line">    int op;</span><br><span class="line">    epv.data.ptr = ev;</span><br><span class="line">    epv.events = ev-&gt;events = events;       //EPOLLIN 或 EPOLLOUT</span><br><span class="line"></span><br><span class="line">    if(ev-&gt;status == 1) </span><br><span class="line">&#123;                                          //已经在红黑树 g_efd 里</span><br><span class="line">        op = EPOLL_CTL_MOD;                    //修改其属性</span><br><span class="line">    &#125; </span><br><span class="line">else </span><br><span class="line">&#123;                                //不在红黑树里</span><br><span class="line">        op = EPOLL_CTL_ADD;          //将其加入红黑树 g_efd, 并将status置1</span><br><span class="line">        ev-&gt;status = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (epoll_ctl(efd, op, ev-&gt;fd, &amp;epv) &lt; 0)                       //实际添加/修改</span><br><span class="line">&#123;</span><br><span class="line">        printf(&quot;event add failed [fd=%d], events[%d]\n&quot;, ev-&gt;fd, events);</span><br><span class="line">&#125;</span><br><span class="line">    else</span><br><span class="line">&#123;</span><br><span class="line">        printf(&quot;event add OK [fd=%d], op=%d, events[%0X]\n&quot;, ev-&gt;fd, op, events);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 从epoll 监听的 红黑树中删除一个 文件描述符*/</span><br><span class="line"></span><br><span class="line">void eventdel(int efd, struct myevent_s *ev)</span><br><span class="line">&#123;</span><br><span class="line">    struct epoll_event epv = &#123;0, &#123;0&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    if (ev-&gt;status != 1)                                        //不在红黑树上</span><br><span class="line">        return ;</span><br><span class="line"></span><br><span class="line">    epv.data.ptr = ev;</span><br><span class="line">    ev-&gt;status = 0;                                             //修改状态</span><br><span class="line">    epoll_ctl(efd, EPOLL_CTL_DEL, ev-&gt;fd, &amp;epv);                //从红黑树 efd 上将 ev-&gt;fd 摘除</span><br><span class="line"></span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*  当有文件描述符就绪, epoll返回, 调用该函数 与客户端建立链接 */</span><br><span class="line">// 回调函数 - 监听的文件描述符发送读事件时被调用</span><br><span class="line">void acceptconn(int lfd, int events, void *arg)</span><br><span class="line">&#123;</span><br><span class="line">    struct sockaddr_in cin;</span><br><span class="line">    socklen_t len = sizeof(cin);</span><br><span class="line">    int cfd, i;</span><br><span class="line"></span><br><span class="line">    cfd = Accept(lfd, (struct sockaddr *)&amp;cin, &amp;len);</span><br><span class="line"></span><br><span class="line">//使用do while(0)的目的是为了避免使用goto语句</span><br><span class="line">    do </span><br><span class="line">&#123;</span><br><span class="line">        for (i = 0; i &lt; MAX_EVENTS; i++)                                //从全局数组g_events中找一个空闲元素</span><br><span class="line">&#123;</span><br><span class="line">            if (g_events[i].status == 0)                                //类似于select中找值为-1的元素</span><br><span class="line">&#123;</span><br><span class="line">                break;  //找到第一个能用的                                                //跳出 for</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        if (i == MAX_EVENTS) </span><br><span class="line">&#123;</span><br><span class="line">            printf(&quot;%s: max connect limit[%d]\n&quot;, __func__, MAX_EVENTS);</span><br><span class="line">            break;   //避免goto, 跳出do while(0) 不执行后续代码</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//将cfd设置为非阻塞</span><br><span class="line">        int flags = 0;</span><br><span class="line">flags = fcntl(cfd, F_GETFL, 0);</span><br><span class="line">flags |= O_NONBLOCK;</span><br><span class="line">        if ((flags = fcntl(cfd, F_SETFL, flags)) &lt; 0) </span><br><span class="line">&#123;</span><br><span class="line">            printf(&quot;%s: fcntl nonblocking failed, %s\n&quot;, __func__, strerror(errno));</span><br><span class="line">            break;//避免goto</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 给cfd设置一个 myevent_s 结构体, 回调函数 设置为 recvdata */</span><br><span class="line">        eventset(&amp;g_events[i], cfd, recvdata, &amp;g_events[i]);   </span><br><span class="line"></span><br><span class="line">//将cfd添加到红黑树g_efd中,监听读事件</span><br><span class="line">        eventadd(g_efd, EPOLLIN, &amp;g_events[i]); </span><br><span class="line"></span><br><span class="line">    &#125;while(0);</span><br><span class="line"></span><br><span class="line">    printf(&quot;new connect [%s:%d][time:%ld], pos[%d]\n&quot;, </span><br><span class="line">            inet_ntoa(cin.sin_addr), ntohs(cin.sin_port), g_events[i].last_active, i);</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 回调函数 - 通信的文件描述符发生读事件时候被调用</span><br><span class="line">void recvdata(int fd, int events, void *arg)</span><br><span class="line">&#123;</span><br><span class="line">    int len;</span><br><span class="line">    struct myevent_s *ev = (struct myevent_s *)arg;</span><br><span class="line"></span><br><span class="line">//读取客户端发来的数据</span><br><span class="line">memset(ev-&gt;buf, 0x00, sizeof(ev-&gt;buf));</span><br><span class="line">    len = Read(fd, ev-&gt;buf, sizeof(ev-&gt;buf));//读文件描述符, 数据存入myevent_s成员buf中</span><br><span class="line"></span><br><span class="line">    eventdel(g_efd, ev); //将该节点从红黑树上摘除</span><br><span class="line"></span><br><span class="line">    if (len &gt; 0) </span><br><span class="line">&#123;</span><br><span class="line">        ev-&gt;len = len;</span><br><span class="line">        ev-&gt;buf[len] = &#x27;\0&#x27;;                                //手动添加字符串结束标记</span><br><span class="line">        printf(&quot;C[%d]:%s\n&quot;, fd, ev-&gt;buf);</span><br><span class="line"></span><br><span class="line">        eventset(ev, fd, senddata, ev);                     //设置该 fd 对应的回调函数为 senddata</span><br><span class="line">        eventadd(g_efd, EPOLLOUT, ev);                      //将fd加入红黑树g_efd中,监听其写事件</span><br><span class="line">    &#125; </span><br><span class="line">else if (len == 0) </span><br><span class="line">&#123;</span><br><span class="line">        Close(ev-&gt;fd);</span><br><span class="line">        /* ev-g_events 地址相减得到偏移元素位置 */</span><br><span class="line">        printf(&quot;[fd=%d] pos[%ld], closed\n&quot;, fd, ev-g_events);</span><br><span class="line">    &#125; </span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">        Close(ev-&gt;fd);</span><br><span class="line">        printf(&quot;read [fd=%d] error[%d]:%s\n&quot;, fd, errno, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 回调函数 - 通信的文件描述符发生写事件时候被调用</span><br><span class="line">void senddata(int fd, int events, void *arg)</span><br><span class="line">&#123;</span><br><span class="line">    int len;</span><br><span class="line">    struct myevent_s *ev = (struct myevent_s *)arg;</span><br><span class="line"></span><br><span class="line">//将小写转换为大写发送给客户端</span><br><span class="line">int i=0;</span><br><span class="line">for(i=0; i&lt;ev-&gt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line">ev-&gt;buf[i] = toupper(ev-&gt;buf[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//发送数据给客户端</span><br><span class="line">    len = Write(fd, ev-&gt;buf, ev-&gt;len);</span><br><span class="line">    if (len &gt; 0) </span><br><span class="line">&#123;</span><br><span class="line">        printf(&quot;send[fd=%d]--&gt;[%d]:[%s]\n&quot;, fd, len, ev-&gt;buf);</span><br><span class="line">        eventdel(g_efd, ev);                                //从红黑树g_efd中移除</span><br><span class="line">        eventset(ev, fd, recvdata, ev);                     //将该fd的 回调函数改为 recvdata</span><br><span class="line">        eventadd(g_efd, EPOLLIN, ev);                       //从新添加到红黑树上， 设为监听读事件</span><br><span class="line">    &#125; </span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">        Close(ev-&gt;fd);                                      //关闭链接</span><br><span class="line">        eventdel(g_efd, ev);                                //从红黑树g_efd中移除</span><br><span class="line">        printf(&quot;send[fd=%d] error %s\n&quot;, fd, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*创建 socket, 初始化lfd */</span><br><span class="line"></span><br><span class="line">void initlistensocket()</span><br><span class="line">&#123;</span><br><span class="line">//创建socket</span><br><span class="line">    g_lfd = Socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line"></span><br><span class="line">//对事件结构体赋值</span><br><span class="line">    /* void eventset(struct myevent_s *ev, int fd, void (*call_back)(int, int, void *), void *arg);  */</span><br><span class="line">    eventset(&amp;g_events[MAX_EVENTS], g_lfd, acceptconn, &amp;g_events[MAX_EVENTS]);//仅仅是对g_events[MAX_EVENTS]进行设置</span><br><span class="line"></span><br><span class="line">//将监听文件描述符（此时是结构体！）上树</span><br><span class="line">    eventadd(g_efd, EPOLLIN, &amp;g_events[MAX_EVENTS]);</span><br><span class="line"></span><br><span class="line">//绑定</span><br><span class="line">    struct sockaddr_in servaddr;</span><br><span class="line">memset(&amp;servaddr, 0, sizeof(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">servaddr.sin_port = htons(8888);</span><br><span class="line">Bind(g_lfd, (struct sockaddr *)&amp;servaddr, sizeof(servaddr));</span><br><span class="line"></span><br><span class="line">Listen(g_lfd, 20);</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    g_efd = epoll_create(MAX_EVENTS+1);                 //创建红黑树,返回给全局 g_efd </span><br><span class="line">if(g_efd&lt;0)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;create epoll error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//socket-bind-listen-将监听文件描述符上树</span><br><span class="line">    initlistensocket();</span><br><span class="line"></span><br><span class="line">    struct epoll_event events[MAX_EVENTS+1];            //保存已经满足就绪事件的文件描述符数组 </span><br><span class="line"></span><br><span class="line">    int checkpos = 0, i;</span><br><span class="line">    while (1) </span><br><span class="line">&#123;</span><br><span class="line">        /* 超时验证，每次测试100个链接，不测试listenfd 当客户端60秒内没有和服务器通信，则关闭此客户端链接 */</span><br><span class="line">        long now = time(NULL);                          //当前时间</span><br><span class="line">//一次循环检测100个。 使用checkpos控制检测对象</span><br><span class="line">        for (i = 0; i &lt; 100; i++, checkpos++) </span><br><span class="line">&#123;</span><br><span class="line">            if (checkpos == MAX_EVENTS)</span><br><span class="line">&#123;</span><br><span class="line">                checkpos = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            if (g_events[checkpos].status != 1)         //不在红黑树 g_efd 上</span><br><span class="line">&#123;</span><br><span class="line">                continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            long duration = now - g_events[checkpos].last_active;       //客户端不活跃的世间</span><br><span class="line"></span><br><span class="line">            if (duration &gt;= 60) </span><br><span class="line">&#123;</span><br><span class="line">                Close(g_events[checkpos].fd);                           //关闭与该客户端链接</span><br><span class="line">                printf(&quot;[fd=%d] timeout\n&quot;, g_events[checkpos].fd);</span><br><span class="line">                eventdel(g_efd, &amp;g_events[checkpos]);                   //将该客户端 从红黑树 g_efd移除</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*监听红黑树g_efd, 将满足的事件的文件描述符加至events数组中, 1秒没有事件满足, 返回 0*/</span><br><span class="line">        int nfd = epoll_wait(g_efd, events, MAX_EVENTS+1, 1000);</span><br><span class="line">        if (nfd &lt; 0) </span><br><span class="line">&#123;</span><br><span class="line">            printf(&quot;epoll_wait error, exit\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (i = 0; i &lt; nfd; i++) </span><br><span class="line">&#123;</span><br><span class="line">            /*使用自定义结构体myevent_s类型指针,接收联合体data的void *ptr成员*/</span><br><span class="line">            struct myevent_s *ev = (struct myevent_s *)events[i].data.ptr;  </span><br><span class="line"></span><br><span class="line">//读就绪事件</span><br><span class="line">            if ((events[i].events &amp; EPOLLIN) &amp;&amp; (ev-&gt;events &amp; EPOLLIN)) </span><br><span class="line">&#123;</span><br><span class="line">                //ev-&gt;call_back(ev-&gt;fd, events[i].events, ev-&gt;arg);</span><br><span class="line">                ev-&gt;call_back(ev-&gt;fd, events[i].events, ev);</span><br><span class="line">            &#125;</span><br><span class="line">//写就绪事件</span><br><span class="line">            if ((events[i].events &amp; EPOLLOUT) &amp;&amp; (ev-&gt;events &amp; EPOLLOUT))</span><br><span class="line">&#123;</span><br><span class="line">                //ev-&gt;call_back(ev-&gt;fd, events[i].events, ev-&gt;arg);</span><br><span class="line">                ev-&gt;call_back(ev-&gt;fd, events[i].events, ev);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*关闭文件描述符 */</span><br><span class="line">Close(g_efd);</span><br><span class="line">Close(g_lfd);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LT-EL-阻塞IO-非阻塞IO"><a href="#LT-EL-阻塞IO-非阻塞IO" class="headerlink" title="LT,EL,阻塞IO,非阻塞IO"></a>LT,EL,阻塞IO,非阻塞IO</h2><ul><li><p>LT（水平触发）：在epoll模型中，当一次行没有把数据读完（读写缓冲区小），那么下次调用epoll_wait，就还会通知你继续在该cfd上继续读。，如果一直不去读写，那么它会一直通知。主要问题在：如果系统中存在大量目前不需要读写的文件描述符时，而他们每次都被内核通知，会大大降低检索自己关注的文件描述符的效率，会导致整体效率下降。</p></li><li><p>ET（边缘触发）：在epoll模型中，当一次行没有把数据读完（读写缓冲区小），那么下次调用epoll_wait，就不会通知你，直到该cfd上再次出现读写事件时，才会通知。这种模式比水平触发效率高，系统不会充斥大量你不关心的就绪文件描述符！！</p></li><li><p>阻塞IO：当你去读一个阻塞的文件描述符时，如果在该文件描述符上没有数据可读，那么它会一直阻塞(通俗一点就是一直卡在调用函数那里)，直到有数据可读。当你去写一个阻塞的文件描述符时，如果在该文件描述符上没有空间(通常是缓冲区)可写，那么它会一直阻塞，直到有空间可写。以上的读和写我们统一指在某个文件描述符进行的操作，不单单指真正的读数据，写数据，还包括接收连接accept()，发起连接connect()等操作…</p></li><li><p>非阻塞IO：当你去读写一个非阻塞的文件描述符时，不管可不可以读写，它都会立即返回，返回成功说明读写操作完成了，返回失败会设置相应errno状态码，根据这个errno可以进一步执行其他处理。它不会像阻塞IO那样，卡在那里不动！！！</p></li><li><p>总结：<br>（1）边缘触发+非阻塞IO，使用边缘触发必须配合非阻塞IO，<br>因为当使用边缘触发时，需要循环读（不循环读的话，如果本次数据没读完，epoll也不会通知，会导致本次数据和下次数据混合在一起，形成粘包），当循环读时，若时阻塞IO方式，如果数据量大，一次没有读完，当最后一次读完数据后，程序就会阻塞在Read函数上，无法回到epoll_wait，会对其他客户端的连接和收发数据造成影响，降低并发性。<br>如果是非阻塞IO+while循环，当读取完数据后，recv会立即返回-1，并将errno设置为EAGAIN或EWOULDBLOCK,这就表示数据已经读取完成，已经没有数据了，可以退出循环了。这样就不会像阻塞IO一样卡在那里，这就减少了不必要的等待时间，性能自然更高.</p></li></ul><p>（2）水平触发+非阻塞IO&#x2F;阻塞IO<br>因为epoll只要缓冲区有数据，水平触发下的epoll每次都会通知读写，如果本次没有读完，下次通知继续读，直到没数据时，就不会通知，所以不会阻塞。（主要和边缘触发+非阻塞IO区别在于循环读上，因为设置循环读后，就需要考虑读完阻塞的情况！）</p><h3 id="一般epoll模型使用边缘触发-非阻塞IO"><a href="#一般epoll模型使用边缘触发-非阻塞IO" class="headerlink" title="一般epoll模型使用边缘触发+非阻塞IO"></a>一般epoll模型使用边缘触发+非阻塞IO</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程2</title>
      <link href="/2022/05/19/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B2/"/>
      <url>/2022/05/19/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B2/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP状态转换图"><a href="#TCP状态转换图" class="headerlink" title="TCP状态转换图:"></a>TCP状态转换图:</h2><p><img src="/images/TCP.png"></p><p>1 三次握手过程:<br>    客户端: SYN_SENT—connect()<br>    服务端:      LISTEN–listen()   SYN_RCVD<br>    当三次握手完成后, 都处于ESTABLISHED状态<br>2 数据传输过程中状态不发生变化, 都是ESTABLISHED状态<br>3 四次挥手过程:<br>    主动关闭方: FIN_WAIT_T  FIN_WAIT_2 TIME_WAIT<br>    被动关闭方: CLOSE_WAIT  LAST_ACK</p><p>思考题?<br>    1 SYN_SENT状态出现在哪一方? 客户端<br>    2 SYN_RCVD状态出现在哪一方? 服务端<br>    3 TIME_WAIT状态出现在哪一方?  主动关闭方<br>    4 在数据传输的时候没有状态变化.</p><h2 id="TIME-WAIT是如何出现的"><a href="#TIME-WAIT是如何出现的" class="headerlink" title="TIME_WAIT是如何出现的:"></a>TIME_WAIT是如何出现的:</h2><pre><code>启动服务端, 启动客户端, 连接建好, 而且也可以正常发送数据;然后先关闭服务端, 服务端就会出现TIME_WAIT状态.（具体显示是端口已被占用！！！）会等待2MSL。</code></pre><h2 id="为什么需要2MSL时间"><a href="#为什么需要2MSL时间" class="headerlink" title="为什么需要2MSL时间:"></a>为什么需要2MSL时间:</h2><p>原因一：让四次挥手的过程更加可靠，确保最后一个发送给对方的ACK能到达。<br>若对方没有收到ACK应答, 对方会再次发送FIN请求关闭, 此时在2MS时间内被动关闭方仍然可以发送ACK给对方.<br>原因二：为了保证在2MSL时间内, 不能启动相同的SOCKET-PAIR，如果启动（未设置端口复用），就会报错，显示端口已经被占用。<br>TIME_WAIT一定是出现在主动关闭的一方, 也就是说2MSL是针对主动关闭一方来说的;由于TCP有可能存在丢包重传, 丢包重传若发给了已经断开连接之后相同的socket-pair(该连接是新建的, 与原来的socket-pair完全相同, 双方使用的是相同的IP和端口), 这样会对之后的连接造成困扰,严重可能引起程序异常.</p><h2 id="设置端口复用"><a href="#设置端口复用" class="headerlink" title="设置端口复用:"></a>设置端口复用:</h2><pre><code>int opt = 1;setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(int));</code></pre><h2 id="shutdown和close的区别"><a href="#shutdown和close的区别" class="headerlink" title="shutdown和close的区别:"></a>shutdown和close的区别:</h2><p>1 shutdown可以实现半关闭, close不行<br>2 shutdown关闭的时候, 不考虑文件描述符的引用计数, 是直接彻底关闭<br>  close考虑文件描述符的引用计数, 调用一次close只是将引用计数减1,<br>  只有减小到0的时候才会真正关闭.</p><h2 id="长连接和端连接的概念"><a href="#长连接和端连接的概念" class="headerlink" title="长连接和端连接的概念:"></a>长连接和端连接的概念:</h2><pre><code>长连接: 连接建立好之后,一直保持连接不关闭短连接: 连接使用完之后就立刻关闭.</code></pre><h2 id="什么是心跳包"><a href="#什么是心跳包" class="headerlink" title="什么是心跳包?"></a>什么是心跳包?</h2><pre><code>用于监测长连接是否正常的字符串.</code></pre><h2 id="在什么情况下使用心跳包"><a href="#在什么情况下使用心跳包" class="headerlink" title="在什么情况下使用心跳包?"></a>在什么情况下使用心跳包?</h2><pre><code>主要用于监测长连接是否正常.</code></pre><h2 id="如何使用心跳包"><a href="#如何使用心跳包" class="headerlink" title="如何使用心跳包?"></a>如何使用心跳包?</h2><pre><code>通信双方需要协商规则(协议), 如4个字节长度+数据部分</code></pre><h2 id="高并发服务器模型–select"><a href="#高并发服务器模型–select" class="headerlink" title="高并发服务器模型–select"></a>高并发服务器模型–select</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">//服务器端程序</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;netinet/ip.h&gt; /* superset of previous */</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line">#include&quot;wrap.h&quot; //自己实现的已经封装好的函数，含有错误处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">//创建socket</span><br><span class="line">int lfd=Socket(AF_INET,SOCK_STREAM,0);</span><br><span class="line"></span><br><span class="line">//设置端口复用，记得在bind之前就设置好端口复用</span><br><span class="line">int opt = 1;</span><br><span class="line">setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(int));</span><br><span class="line"></span><br><span class="line">//绑定</span><br><span class="line">struct sockaddr_in addr;</span><br><span class="line">bzero(&amp;addr,sizeof(addr));</span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(1026);</span><br><span class="line">addr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">Bind(lfd,(struct sockaddr*)&amp;addr,sizeof(addr));</span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line">Listen(lfd,128);</span><br><span class="line"></span><br><span class="line">//定义fd_set类型变量</span><br><span class="line">fd_set readfds;</span><br><span class="line">fd_set tmpfds;</span><br><span class="line"></span><br><span class="line">//清空集合</span><br><span class="line">FD_ZERO(&amp;readfds);</span><br><span class="line">FD_ZERO(&amp;tmpfds);</span><br><span class="line"></span><br><span class="line">//将lfd加入到readfds中，调用select委托内核监控</span><br><span class="line">FD_SET(lfd,&amp;readfds);</span><br><span class="line"></span><br><span class="line">int nready;</span><br><span class="line">int maxfd=lfd;</span><br><span class="line">int cfd;</span><br><span class="line">int i;</span><br><span class="line">int n;</span><br><span class="line">char buf[1024];</span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">//由于select的第二个参数是传入传出参数，所以需要再定义一个变量接收其传出参数，避免readfds被更改</span><br><span class="line">tmpfds=readfds;</span><br><span class="line">nready=select(maxfd+1,&amp;tmpfds,NULL,NULL,NULL);</span><br><span class="line">if(nready&lt;0)&#123;</span><br><span class="line">if(errno==EINTR)//被信号打断</span><br><span class="line">continue;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//有客户端连接到来</span><br><span class="line">if(FD_ISSET(lfd,&amp;tmpfds))&#123;</span><br><span class="line">//接收新连接</span><br><span class="line">cfd=Accept(lfd,NULL,NULL);</span><br><span class="line"></span><br><span class="line">//将cfd加入到readfds集合中</span><br><span class="line">FD_SET(cfd,&amp;readfds);</span><br><span class="line"></span><br><span class="line">//修改内核的监控范围</span><br><span class="line">if(maxfd&lt;cfd)&#123;</span><br><span class="line">maxfd=cfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(--nready==0)&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//有数据发来</span><br><span class="line">for(i=lfd+1;i&lt;=maxfd;i++)&#123;</span><br><span class="line">//判断文件描述符是否有变化</span><br><span class="line">if(FD_ISSET(i,&amp;tmpfds))&#123;</span><br><span class="line">//读数据</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">n=Read(i,buf,sizeof(buf));</span><br><span class="line">if(n&lt;=0)&#123;</span><br><span class="line">//关闭连接</span><br><span class="line">close(i);</span><br><span class="line">//将i从readfds中删除，不需要内核监控该文件描述符了</span><br><span class="line">FD_CLR(i,&amp;readfds);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">printf(&quot;n==[%d],buf=[%s]\n&quot;,n,buf);</span><br><span class="line"></span><br><span class="line">int k;</span><br><span class="line">for(k=0;k&lt;n;k++)</span><br><span class="line">buf[k]=toupper(buf[k]);</span><br><span class="line">write(i,buf,n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(--nready==0)//nready是文件描述符变化的个数，只有一个变化，上面执行完，这里就可以break了，优化了程序</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="select优点"><a href="#select优点" class="headerlink" title="select优点:"></a>select优点:</h2><p>1.一个进程可以支持多个客户端<br>2.select支持跨平台</p><h2 id="select缺点"><a href="#select缺点" class="headerlink" title="select缺点:"></a>select缺点:</h2><p>1.代码编写困难<br>2.会涉及到用户区到内核区的来回拷贝<br>3.当客户端多个连接, 但少数活跃的情况, select效率较低,因为select返回的只是变化的文件描述符个数，并没有指明具体是哪一个，需要遍历文件描述符表，进行判断！<br>例如: 作为极端的一种情况, 3-1023文件描述符全部打开, 但是只有1023有发送数据, select就显得效率低下<br>4.最大支持1024个客户端连接<br>select最大支持1024个客户端连接不是有文件描述符表最多可以支持1024个文件描述符限制的, 而是由FD_SETSIZE&#x3D;1024限制的.<br>FD_SETSIZE&#x3D;1024  fd_set使用了该宏, 当然可以修改内核, 然后再重新编译内核, 一般不建议这么做.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++11可变参数模板（函数模板、类模板）</title>
      <link href="/2022/05/18/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2022/05/18/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="函数模板可变参数构造"><a href="#函数模板可变参数构造" class="headerlink" title="函数模板可变参数构造"></a>函数模板可变参数构造</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//函数可变参数模板的构造，C++11新特性</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//该空实现是递归构造的结束条件</span><br><span class="line">void myprint() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&lt;typename T,typename ...Args&gt;</span><br><span class="line">void myprint(const T&amp; firstarg, const Args &amp; ...args) &#123;</span><br><span class="line">cout &lt;&lt; &quot;fisrtarg:&quot; &lt;&lt; firstarg&lt;&lt;&quot; 参数类型：&quot; &lt;&lt; typeid(firstarg).name() &lt;&lt; &quot; 剩余的参数个数：&quot; &lt;&lt; sizeof...(args) &lt;&lt; endl;</span><br><span class="line">myprint(args...);//递归的构造！！！</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename ...Args&gt;</span><br><span class="line">void myprint(const Args &amp; ...args) &#123;</span><br><span class="line">cout &lt;&lt; &quot;print(....)&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//当较泛化和较特化的模板函数同时存在的时候，最终程序会执行较特化的那一个</span><br><span class="line">//也就是说，myprint(1, &quot;w&quot;, 2.6);选择的是较特化的，即：一个参数加可变参数的函数模板。而不选择泛化的，可变参数函数模板。</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">myprint(1, &quot;w&quot;, 2.6);</span><br><span class="line">cout &lt;&lt; &quot;*****************&quot; &lt;&lt; endl;</span><br><span class="line">string t = &quot;abc&quot;;</span><br><span class="line">myprint(0.5, 0.6, 1, 2, t, &#x27;f&#x27;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fisrtarg:1 参数类型：int 剩余的参数个数：2</span><br><span class="line">fisrtarg:w 参数类型：char const [2] 剩余的参数个数：1</span><br><span class="line">fisrtarg:2.6 参数类型：double 剩余的参数个数：0</span><br><span class="line">*****************</span><br><span class="line">fisrtarg:0.5 参数类型：double 剩余的参数个数：5</span><br><span class="line">fisrtarg:0.6 参数类型：double 剩余的参数个数：4</span><br><span class="line">fisrtarg:1 参数类型：int 剩余的参数个数：3</span><br><span class="line">fisrtarg:2 参数类型：int 剩余的参数个数：2</span><br><span class="line">fisrtarg:abc 参数类型：class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; 剩余的参 数个数：1</span><br><span class="line">fisrtarg:f 参数类型：char 剩余的参数个数：0</span><br></pre></td></tr></table></figure><h2 id="另一个例子"><a href="#另一个例子" class="headerlink" title="另一个例子"></a>另一个例子</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//利用可变参数的函数模板，实现多个数取最大值的操作，其中数的个数不定.</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//递归的结束条件</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">T Max(T a, T b) &#123;</span><br><span class="line">return (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">//只含有一个参数的特殊处理</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">T Max(T a) &#123;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//递归的进行比较</span><br><span class="line">template&lt;typename T,typename ...Args&gt;</span><br><span class="line">T Max(const T&amp; a, const Args &amp; ...args) &#123;</span><br><span class="line">return Max(a, Max(args...));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int re = Max(1,5);</span><br><span class="line">cout &lt;&lt; re &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int res = Max(1, 2, 5, 78);</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int ret = Max(4, 2, 14);</span><br><span class="line">cout &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int r = Max(5);</span><br><span class="line">cout &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行结果<br>5<br>78<br>14<br>5</li></ul><h2 id="类模板可变参数构造"><a href="#类模板可变参数构造" class="headerlink" title="类模板可变参数构造"></a>类模板可变参数构造</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模板特化与偏特化</title>
      <link href="/2022/05/18/%E6%A8%A1%E6%9D%BF%E7%89%B9%E5%8C%96%E4%B8%8E%E5%81%8F%E7%89%B9%E5%8C%96/"/>
      <url>/2022/05/18/%E6%A8%A1%E6%9D%BF%E7%89%B9%E5%8C%96%E4%B8%8E%E5%81%8F%E7%89%B9%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="模板特化（template-specialization）不同于模板的实例化，模板参数在某种特定类型下的具体实现称为模板特化。模板特化有时也称之为模板的具体化，分别有函数模板特化和类模板特化。"><a href="#模板特化（template-specialization）不同于模板的实例化，模板参数在某种特定类型下的具体实现称为模板特化。模板特化有时也称之为模板的具体化，分别有函数模板特化和类模板特化。" class="headerlink" title="模板特化（template specialization）不同于模板的实例化，模板参数在某种特定类型下的具体实现称为模板特化。模板特化有时也称之为模板的具体化，分别有函数模板特化和类模板特化。"></a>模板特化（template specialization）不同于模板的实例化，模板参数在某种特定类型下的具体实现称为模板特化。模板特化有时也称之为模板的具体化，分别有函数模板特化和类模板特化。</h2><h2 id="函数模板全特化"><a href="#函数模板全特化" class="headerlink" title="函数模板全特化"></a>函数模板全特化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//函数模板特化</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//函数模板</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">T Max(T a, T b) &#123;</span><br><span class="line">return (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//进行特化,如果不对const char *类型进行特化，就会使用上面的模板函数，那时候，比较的是a,b的地址，而不是a,b。</span><br><span class="line">typedef const char* CH;</span><br><span class="line">template&lt;&gt; //在函数模板显示特化定义中，显示关键字template 和一对尖括号&lt;&gt;,然后是函数模板特化的定义。</span><br><span class="line">CH Max&lt;CH&gt;(CH a, CH b) &#123;</span><br><span class="line">return (strcmp(a, b)) &gt; 0 ? a : b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//另一种方法是对Max进行重载，程序运行结果和使用函数模板特化相同。</span><br><span class="line">//typedef const char* CCP;</span><br><span class="line">//CCP Max(CCP s1, CCP s2) &#123;</span><br><span class="line">//return (strcmp(s1, s2) &gt; 0) ? s1 : s2;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int  main() &#123;</span><br><span class="line"></span><br><span class="line">int res = Max(1, 90);</span><br><span class="line">const char* ret = Max&lt;const char*&gt;(&quot;very&quot;, &quot;good&quot;);</span><br><span class="line">cout &lt;&lt; &quot;res=&quot; &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;ret=&quot; &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果<br>res&#x3D;90<br>ret&#x3D;very</li></ul><p>（1）如果使用普通重载函数，那么不管是否发生实际的函数调用，都会在目标文件中生成该函数的二进制代码。而如果使用模板的特化版本，除非发生函数调用，否则不会在目标文件中包含特化模板函数的二进制代码。这符合函数模板的“惰性实例化”准则。</p><p>（2）如果使用普通重载函数，那么在分离编译模式下，需要在各个源文件中包含重载函数的申明，否则在某些源文件中就会使用模板函数，而不是重载函数。</p><ul><li>所以使用特化版本的较好！！！</li></ul><h2 id="类模板全特化"><a href="#类模板全特化" class="headerlink" title="类模板全特化"></a>类模板全特化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//类模板特化</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//类模板</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class A &#123;</span><br><span class="line"></span><br><span class="line">T num;</span><br><span class="line">public:</span><br><span class="line">A(T a):num(a) &#123;&#125;;</span><br><span class="line">void print() &#123;</span><br><span class="line">cout &lt;&lt; &quot;num=&quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//特化</span><br><span class="line">template&lt;&gt;</span><br><span class="line">class A&lt;const char *&gt; &#123;</span><br><span class="line">const char* str;</span><br><span class="line">public:</span><br><span class="line">A(const char *t):str(t) &#123;&#125;;</span><br><span class="line">void print() &#123;</span><br><span class="line">cout &lt;&lt; &quot;str=&quot; &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">A&lt;int&gt; a(1);</span><br><span class="line">a.print();</span><br><span class="line">const char* p = &quot;hello&quot;;</span><br><span class="line">A&lt;const char*&gt;b(p);</span><br><span class="line">b.print();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行结果<br>num&#x3D;1<br>str&#x3D;hello</li></ul><h2 id="模板偏特化（Template-Partitial-Specialization）是模板特化的一种特殊情况，指显示指定部分模板参数而非全部模板参数，或者指定模板参数的部分特性分而非全部特性，也称为模板部分特化。与模板偏特化相对的是模板全特化，指对所有模板参数进行特化。模板全特化与模板偏特化共同组成模板特化"><a href="#模板偏特化（Template-Partitial-Specialization）是模板特化的一种特殊情况，指显示指定部分模板参数而非全部模板参数，或者指定模板参数的部分特性分而非全部特性，也称为模板部分特化。与模板偏特化相对的是模板全特化，指对所有模板参数进行特化。模板全特化与模板偏特化共同组成模板特化" class="headerlink" title="模板偏特化（Template Partitial Specialization）是模板特化的一种特殊情况，指显示指定部分模板参数而非全部模板参数，或者指定模板参数的部分特性分而非全部特性，也称为模板部分特化。与模板偏特化相对的是模板全特化，指对所有模板参数进行特化。模板全特化与模板偏特化共同组成模板特化."></a>模板偏特化（Template Partitial Specialization）是模板特化的一种特殊情况，指显示指定部分模板参数而非全部模板参数，或者指定模板参数的部分特性分而非全部特性，也称为模板部分特化。与模板偏特化相对的是模板全特化，指对所有模板参数进行特化。模板全特化与模板偏特化共同组成模板特化.</h2><h2 id="模板偏特化主要分为两种，一种是指对部分模板参数进行全特化，另一种是对模板参数特性进行特化，包括将模板参数特化为指针、引用或是另外一个模板类。"><a href="#模板偏特化主要分为两种，一种是指对部分模板参数进行全特化，另一种是对模板参数特性进行特化，包括将模板参数特化为指针、引用或是另外一个模板类。" class="headerlink" title="模板偏特化主要分为两种，一种是指对部分模板参数进行全特化，另一种是对模板参数特性进行特化，包括将模板参数特化为指针、引用或是另外一个模板类。"></a>模板偏特化主要分为两种，一种是指对部分模板参数进行全特化，另一种是对模板参数特性进行特化，包括将模板参数特化为指针、引用或是另外一个模板类。</h2><h2 id="函数模板不支持偏特化，利用函数重载即可。"><a href="#函数模板不支持偏特化，利用函数重载即可。" class="headerlink" title="函数模板不支持偏特化，利用函数重载即可。"></a>函数模板不支持偏特化，利用函数重载即可。</h2><h2 id="类模板偏特化"><a href="#类模板偏特化" class="headerlink" title="类模板偏特化"></a>类模板偏特化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">//类模板的偏特化</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//类模板，未特化的标准模板类不需要在类名后指定类型</span><br><span class="line">template&lt;typename T,typename N&gt;</span><br><span class="line">class test &#123;</span><br><span class="line">public:</span><br><span class="line">static void compare(T a, N b) &#123;</span><br><span class="line">cout &lt;&lt; &quot;标准的类模板版本：&quot; &lt;&lt; endl;</span><br><span class="line">if (a &gt; b) &#123;</span><br><span class="line">cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot;&gt;&quot; &lt;&lt; &quot;b:&quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot;&lt;=&quot; &lt;&lt; &quot;b:&quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//对部分模板参数进行特化,注意需要在类名后指定类型！！！</span><br><span class="line">template&lt;typename N&gt;</span><br><span class="line">class test&lt;int,N&gt; &#123;</span><br><span class="line">public:</span><br><span class="line">static void compare(int a, N b) &#123;</span><br><span class="line">cout &lt;&lt; &quot;部分模板参数的特化：&quot; &lt;&lt; endl;</span><br><span class="line">if (a &gt; b) &#123;</span><br><span class="line">cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot;&gt;&quot; &lt;&lt; &quot;b:&quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot;&lt;=&quot; &lt;&lt; &quot;b:&quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">//将模板参数特化为指针（对模板参数的特性进行特化）注意需要在类名后指定类型！！！</span><br><span class="line">template&lt;typename T,typename N&gt;</span><br><span class="line">class test&lt;T*,N*&gt; &#123;</span><br><span class="line">public:</span><br><span class="line">static void compare(T* a, N* b) &#123;</span><br><span class="line">cout &lt;&lt; &quot;对模板参数的特性进行特化：&quot; &lt;&lt; endl;</span><br><span class="line">if (*a &gt; *b) &#123;</span><br><span class="line">cout &lt;&lt; &quot;a:&quot; &lt;&lt; *a &lt;&lt; &quot;&gt;&quot; &lt;&lt; &quot;b:&quot; &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;a:&quot; &lt;&lt; *a &lt;&lt; &quot;&lt;=&quot; &lt;&lt; &quot;b:&quot; &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//将模板参数特化为另一个模板类，注意需要在类名后指定类型！！！</span><br><span class="line">template&lt;typename T,typename N&gt;</span><br><span class="line">class test&lt;vector&lt;T&gt;,vector&lt;N&gt;&gt; &#123;</span><br><span class="line">public:</span><br><span class="line">static void compare(vector&lt;T&gt;&amp; a, vector&lt;N&gt;&amp; b) &#123;</span><br><span class="line">cout &lt;&lt; &quot;将模板参数特化为另一个模板类：&quot; &lt;&lt; endl;</span><br><span class="line">if (a.size() &gt; b.size()) &#123;</span><br><span class="line">cout &lt;&lt; &quot;a.size():&quot; &lt;&lt; a.size() &lt;&lt; &quot;&gt;&quot; &lt;&lt; &quot;b.size():&quot; &lt;&lt; b.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;a.size():&quot; &lt;&lt; a.size() &lt;&lt; &quot;&lt;=&quot; &lt;&lt; &quot;b.size():&quot; &lt;&lt; b.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">char a = &#x27;e&#x27;, b = &#x27;f&#x27;;</span><br><span class="line">test&lt;char,char&gt;::compare(a, b);//因为compare方法是静态方法，所以，可以通过类名进行访问！</span><br><span class="line"></span><br><span class="line">int c = 3;</span><br><span class="line">char d = &#x27;a&#x27;;</span><br><span class="line">test&lt;int,char&gt;::compare(c, d);</span><br><span class="line"></span><br><span class="line">int e = 4, f = 7;</span><br><span class="line">test&lt;int*,int*&gt;::compare(&amp;e, &amp;f);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;g&#123; 1,2,3 &#125;;</span><br><span class="line">vector&lt;char&gt;h&#123; &#x27;a&#x27;,&#x27;b&#x27; &#125;;</span><br><span class="line"></span><br><span class="line">test&lt;vector&lt;int&gt;,vector&lt;char&gt;&gt;::compare(g, h);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行结果<br>标准的类模板版本：<br>a:e&lt;&#x3D;b:f<br>部分模板参数的特化：<br>a:3&lt;&#x3D;b:a<br>对模板参数的特性进行特化：<br>a:4&lt;&#x3D;b:7<br>将模板参数特化为另一个模板类：<br>a.size():3&gt;b.size():2</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="全特化和偏特化组成了特化，注意函数没有偏特化！"><a href="#全特化和偏特化组成了特化，注意函数没有偏特化！" class="headerlink" title="全特化和偏特化组成了特化，注意函数没有偏特化！"></a>全特化和偏特化组成了特化，注意函数没有偏特化！</h2><h2 id="一个模板被称为全特化的条件：1-必须有一个主模板类-2-模板类型被全部明确化。"><a href="#一个模板被称为全特化的条件：1-必须有一个主模板类-2-模板类型被全部明确化。" class="headerlink" title="一个模板被称为全特化的条件：1.必须有一个主模板类  2.模板类型被全部明确化。"></a>一个模板被称为全特化的条件：1.必须有一个主模板类  2.模板类型被全部明确化。</h2><h2 id="偏特化的条件：1-必须有一个主模板-2-模板类型被部分明确化。"><a href="#偏特化的条件：1-必须有一个主模板-2-模板类型被部分明确化。" class="headerlink" title="偏特化的条件：1.必须有一个主模板   2.模板类型被部分明确化。"></a>偏特化的条件：1.必须有一个主模板   2.模板类型被部分明确化。</h2><h2 id="对主版本模板类、全特化类、偏特化类的调用优先级从高到低进行排序是：全特化类-gt-偏特化类-gt-主版本模板类。这样的优先级顺序对性能也是最好的。"><a href="#对主版本模板类、全特化类、偏特化类的调用优先级从高到低进行排序是：全特化类-gt-偏特化类-gt-主版本模板类。这样的优先级顺序对性能也是最好的。" class="headerlink" title="对主版本模板类、全特化类、偏特化类的调用优先级从高到低进行排序是：全特化类&gt;偏特化类&gt;主版本模板类。这样的优先级顺序对性能也是最好的。"></a>对主版本模板类、全特化类、偏特化类的调用优先级从高到低进行排序是：全特化类&gt;偏特化类&gt;主版本模板类。这样的优先级顺序对性能也是最好的。</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2022/05/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/05/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ul><li>协议是双方共同指定的一组规则，在网络通信中表示双方传递数据和解释数据的一组规则.</li></ul><h3 id="典型协议"><a href="#典型协议" class="headerlink" title="典型协议"></a>典型协议</h3><ul><li><p>传输层 常见协议有TCP&#x2F;UDP协议。</p></li><li><p>应用层 常见的协议有HTTP协议，FTP协议。</p></li><li><p>网络层 常见协议有IP协议、ICMP协议、IGMP协议。</p></li><li><p>网络接口层 常见协议有ARP协议、RARP协议。</p></li><li><p>TCP传输控制协议（Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p></li><li><p>UDP用户数据报协议（User Datagram Protocol）是OSI参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p></li><li><p>HTTP超文本传输协议（Hyper Text Transfer Protocol）是互联网上应用最为广泛的一种网络协议。</p></li><li><p>FTP文件传输协议（File Transfer Protocol）</p></li><li><p>IP协议是因特网互联协议（Internet Protocol）</p></li><li><p>ICMP协议是Internet控制报文协议（Internet Control Message Protocol）它是TCP&#x2F;IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。</p></li><li><p>IGMP协议是 Internet 组管理协议（Internet Group Management Protocol），是因特网协议家族中的一个组播协议。该协议运行在主机和组播路由器之间。</p></li><li><p>ARP协议是正向地址解析协议（Address Resolution Protocol），通过已知的IP，寻找对应主机的MAC地址。</p></li><li><p>RARP是反向地址转换协议，通过MAC地址确定IP地址。</p></li></ul><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>物数网传会表应<br><img src="/images/osi.png"></p><ul><li><p>物理层—双绞线，光纤（传输介质），将模拟信号转换为数字信号</p></li><li><p>数据链路层—数据校验，定义了网络传输的基本单位-帧 </p></li><li><p>网络层—定义网络，两台机器之间传输的路径选择点到点的传输</p></li><li><p>传输层—传输数据 TCP，UDP，端到端的传输  </p></li><li><p>会话层—通过传输层建立数据传输的通道. </p></li><li><p>表示层—编解码，翻译工作.</p></li><li><p>应用层—为客户提供各种应用服务，email服务，ftp服务，ssh服务</p></li></ul><h2 id="TCP-x2F-IP模型"><a href="#TCP-x2F-IP模型" class="headerlink" title="TCP&#x2F;IP模型"></a>TCP&#x2F;IP模型</h2><ul><li>TCP&#x2F;IP四层模型<br><img src="/images/osi.png"></li></ul><h2 id="数据通信过程"><a href="#数据通信过程" class="headerlink" title="数据通信过程"></a>数据通信过程</h2><ul><li>通信过程: 其实就是发送端层层打包, 接收方层层解包.</li></ul><p><img src="/images/data_com.png"></p><h2 id="网络应用程序常见的两种设计模式"><a href="#网络应用程序常见的两种设计模式" class="headerlink" title="网络应用程序常见的两种设计模式"></a>网络应用程序常见的两种设计模式</h2><ul><li><p>C&#x2F;S模式</p><p>  优点：可以安装在本地，可以缓存数据，协议选择灵活。<br>  缺点：客户端工具需要程序员开发，开发周期长工作量大；需要本地安装，对客户的电脑安全有一定影响。</p></li><li><p>B&#x2F;S模式（浏览器&#x2F;web服务器模式）<br>  优点：浏览器不用开发，开发周期短，移植性好，不受平台限制。<br>  缺点：协议只能选择htpp协议，协议选择受限，不能缓存数据，效率受影响。</p></li></ul><h2 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h2><ul><li><p>以太网帧格式就是包装在网络接口层(数据链路层)的协议<br><img src="/images/frame.png"></p></li><li><p>ARP协议：通过对方的IP地址获取MAC地址。<br>细节：目的端mac地址是通过发送端发送ARP广播, 接收到该ARP数据的主机先判断ARP帧中的目的ip是否是自己的IP。 若是则应答一个ARP应答报文, 并将自己的mac地址填入应答报文中; 若目的IP不是自己的主机IP, 则直接丢弃该ARP请求报文.</p></li></ul><h2 id="通过IP地址来确定网络环境中的唯一的一台主机"><a href="#通过IP地址来确定网络环境中的唯一的一台主机" class="headerlink" title="通过IP地址来确定网络环境中的唯一的一台主机;"></a>通过IP地址来确定网络环境中的唯一的一台主机;</h2><h2 id="主机上使用端口号来区分不同的应用程序"><a href="#主机上使用端口号来区分不同的应用程序" class="headerlink" title="主机上使用端口号来区分不同的应用程序."></a>主机上使用端口号来区分不同的应用程序.</h2><h2 id="IP-端口唯一确定唯一一台主机上的一个应用程序"><a href="#IP-端口唯一确定唯一一台主机上的一个应用程序" class="headerlink" title="IP+端口唯一确定唯一一台主机上的一个应用程序."></a>IP+端口唯一确定唯一一台主机上的一个应用程序.</h2><ul><li><p>常识端口：<br>21：ftp；<br>22：ssh；<br>23：telnet;<br>80:http;</p></li><li><p>TCP是稳定的, 安全的, 可靠的<br>  序号: TCP是安全可靠的, 每个数据包都带有序号, 当数据包丢失的时候, 需要重传, 要使用序号进行重传. 控制数据有序, 丢包重传.<br>  确认序号: 使用确认序号可以知道对方是否已经收到了, 通过确认序号可以知道哪个序号的数据需要重传.<br>16位窗口大小–滑动窗口(主要进行流量控制)，防止发送端发送过快，接收端接收慢，导致数据丢失。</p></li><li><p>IP协议:在网络层</p></li><li><p>TCP协议:面向连接的, 安全的,可靠的数据流传输协议.</p></li><li><p>UDP协议:面向无连接的, 不安全的,不可靠的数据报传输.</p></li></ul><h2 id="为什么TCP是安全可靠的连接？"><a href="#为什么TCP是安全可靠的连接？" class="headerlink" title="为什么TCP是安全可靠的连接？"></a>为什么TCP是安全可靠的连接？</h2><p>三次握手建立连接，四次挥手释放连接。<br><img src="/images/hand.PNG"></p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><ul><li><p>滑动窗口主要是进行流量控制的，防止发送端发送过快，接收端接受太慢，导致数据丢失。</p></li><li><p>如果发送端发送的速度较快，接收端接收到数据后处理的速度较慢，而接收缓冲区的大小是固定的，就会导致接收缓冲区满而丢失数据。TCP协议通过“滑动窗口（Sliding Window）”机制解决这一问题。<br><img src="/images/splid.png"></p></li><li><p>图中win表示告诉对方我这边缓冲区大小是多少, mss表示告诉对方我这边最多一次可以接收多少数据, 你最好不要超过这个长度.</p></li><li><p>在客户端给服务端发包的时候, 不一定是非要等到服务端返回响应包, 由于客户端知道服务端的窗口大小, 所以可以持续多次发送, 当发送数据达到对方窗口大小了就不再发送, 需要等到对方进行处理, 对方处理之后可继续发送.</p></li></ul><h2 id="MTU和MMS"><a href="#MTU和MMS" class="headerlink" title="MTU和MMS"></a>MTU和MMS</h2><ul><li>MTU，数据包的最大传输单元，默认是1500字节，超过这个大小，就会拆分数据包。那么MSS又是啥呢？MSS，最大数据段长度，不包括TCP和IP长度。可以这样简单的理解：MTU（1500字节）&#x3D;MSS（1460字节）+TCP（20字节）+IP(20字节)。</li></ul><h2 id="错误封装"><a href="#错误封装" class="headerlink" title="错误封装"></a>错误封装</h2><ul><li>阻塞函数在阻塞期间若收到信号, 会被信号中断, errno设置为EINTR,这个错误不应该看成一个错误.</li></ul><h2 id="粘包"><a href="#粘包" class="headerlink" title="粘包"></a>粘包</h2><p>粘包: 多次数据发送, 收尾相连, 接收端接收的时候不能正确区分第一次发送多少, 第二次发送多少。<br>解决方法：<br>1.报头+数据（最常用）：报头中包含数据长度。<br>2.添加结尾标志（不推荐，效率低，每次都要判断）<br>3.数据包定长（不灵活）</p><h2 id="高并发服务器"><a href="#高并发服务器" class="headerlink" title="高并发服务器"></a>高并发服务器</h2><h2 id="多进程版"><a href="#多进程版" class="headerlink" title="多进程版"></a>多进程版</h2><ul><li>问题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">cfd = accept();</span><br><span class="line"></span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">n = read(cfd, buf, sizeof(buf));</span><br><span class="line">if(n&lt;=0)</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这样写并不能真正实现并发，因为accept和read都是阻塞函数，当一个客户端连接服务器后，客户端不发送数据，那么服务器就会一直阻塞在read函数上，不能接受新的客户端连接！</p></li><li><p>解决办法1:<br>  将cfd设置为非阻塞: fcntl<br>  假如有多个客户端连接请求, cfd只会保留最后一个文件描述符的值，就会造成通信混乱，一样行不通。</p></li><li><p>解决方法2:<br>  使用多进程: 让父进程监听接受新的连接, 子进程处理新的连接(接收和发送数据);<br>  父进程还负责回收子进程</p></li></ul><p>处理流程:<br>    1 创建socket, 得到一个监听的文件描述符lfd—socket()<br>    2 将lfd和IP和端口port进行绑定—–bind();<br>    3 设置监听—-listen()<br>    4 进入while(1)<br>      {<br>          &#x2F;&#x2F;等待有新的客户端连接到来<br>          cfd &#x3D; accept();</p><pre><code>      //fork一个子进程, 让子进程去处理数据      pid = fork();      if(pid&lt;0)      &#123;          exit(-1);      &#125;      else if(pid&gt;0)      &#123;          //关闭通信文件描述符cfd          close(cfd);      &#125;      else if(pid==0)      &#123;          //关闭监听文件描述符          close(lfd);                    //收发数据          while(1)          &#123;              //读数据              n = read(cfd, buf, sizeof(buf));              if(n&lt;=0)              &#123;                  break;              &#125;                            //发送数据给对方              write(cfd, buf, n);          &#125;                    close(cfd);                    //下面的exit必须有, 防止子进程再去创建子进程          exit(0);      &#125;  &#125;  close(lfd);</code></pre><p>还需要添加的功能: 父进程使用SIGCHLD信号完成对子进程的回收<br>注意点: accept或者read函数是阻塞函数, 会被信号打断, 此时不应该视为一个错误.errno&#x3D;EINTR</p><ul><li>父子进程能够共享的:<br>  文件描述符(子进程复制父进程的文件描述符)<br>  mmap共享映射区</li></ul><h2 id="多进程并发的服务器程序"><a href="#多进程并发的服务器程序" class="headerlink" title="多进程并发的服务器程序"></a>多进程并发的服务器程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">//服务器端程序</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;netinet/ip.h&gt; /* superset of previous */</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line">#include&quot;wrap.h&quot; //自己实现的已经封装好的函数，含有错误处理</span><br><span class="line">#include&lt;signal.h&gt;</span><br><span class="line"></span><br><span class="line">void waitchild(int signo)&#123;</span><br><span class="line">pid_t wpid;</span><br><span class="line"></span><br><span class="line">//循环回收子进程，当有多个子进程同时退出时，也可以全部回收，直到无子进程或者只存在正在运行的子进程</span><br><span class="line">while(1)&#123;</span><br><span class="line">wpid=waitpid(-1,NULL,WNOHANG);//调用一次，只能回收一个子进程</span><br><span class="line">if(wpid&gt;0)&#123;</span><br><span class="line">printf(&quot;child exit,wpid=[%d]\n&quot;,wpid);</span><br><span class="line">&#125;</span><br><span class="line">else if(wpid==0||wpid==-1)&#123;//子进程还在运行或者无子进程了，跳出循环</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">//创建socket</span><br><span class="line">int lfd=Socket(AF_INET,SOCK_STREAM,0);</span><br><span class="line"></span><br><span class="line">//绑定</span><br><span class="line">struct sockaddr_in addr;</span><br><span class="line">bzero(&amp;addr,sizeof(addr));</span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(1026);</span><br><span class="line">addr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">Bind(lfd,(struct sockaddr*)&amp;addr,sizeof(addr));</span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line">Listen(lfd,128);</span><br><span class="line"></span><br><span class="line">//阻塞SIGCHLD信号，防止信号处理函数还未注册好，子进程就结束了，导致子进程的资源没有被回收</span><br><span class="line">sigset_t mask;</span><br><span class="line">sigemptyset(&amp;mask);</span><br><span class="line">sigaddset(&amp;mask,SIGCHLD);</span><br><span class="line">sigprocmask(SIG_BLOCK,&amp;mask,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int cfd;</span><br><span class="line">pid_t pid;</span><br><span class="line">struct sockaddr_in client;</span><br><span class="line">socklen_t len;</span><br><span class="line">char sip[16];</span><br><span class="line">while(1)&#123;</span><br><span class="line">//接受新的连接</span><br><span class="line">len=sizeof(client);</span><br><span class="line">memset(&amp;sip,0x00,sizeof(sip));</span><br><span class="line">cfd=Accept(lfd,(struct sockaddr *)&amp;client,&amp;len);</span><br><span class="line">printf(&quot;client: ip==[%s],port=[%d]\n&quot;,inet_ntop(AF_INET,&amp;client.sin_addr.s_addr,sip,sizeof(sip)),ntohs(client.sin_port));</span><br><span class="line"></span><br><span class="line">//接受一个新的连接，就创建一个子进程，让子进程进行数据的收发</span><br><span class="line">pid=fork();</span><br><span class="line">if(pid&lt;0)&#123;</span><br><span class="line">perror(&quot;fork failed...&quot;);</span><br><span class="line">exit(-1);</span><br><span class="line">&#125;</span><br><span class="line">else if(pid&gt;0)&#123;</span><br><span class="line">//父进程关闭通信文件描述符，父进程只负责接受客户端的连接</span><br><span class="line">close(cfd);</span><br><span class="line"></span><br><span class="line">//注册SIGCHLD信号处理函数</span><br><span class="line">struct sigaction act;</span><br><span class="line">act.sa_handler=waitchild;</span><br><span class="line">act.sa_flags=0;</span><br><span class="line">sigemptyset(&amp;act.sa_mask);</span><br><span class="line">sigaction(SIGCHLD,&amp;act,NULL);</span><br><span class="line"></span><br><span class="line">//解除对SIGCHLD信号的阻塞</span><br><span class="line">sigprocmask(SIG_UNBLOCK,&amp;mask,NULL);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else if(pid==0)&#123;</span><br><span class="line">//子进程关闭监听文件描述符</span><br><span class="line">close(lfd);</span><br><span class="line">int n;</span><br><span class="line">char buf[1024];</span><br><span class="line">int i;</span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">n=Read(cfd,buf,sizeof(buf));</span><br><span class="line">buf[n]=&#x27;\0&#x27;;</span><br><span class="line"></span><br><span class="line">printf(&quot;client ip=[%s], port=[%d] data: n==[%d],buf==[%s]\n&quot;,inet_ntop(AF_INET,&amp;client.sin_addr.s_addr,sip,sizeof(sip)),ntohs(client.sin_port),n,buf);</span><br><span class="line"></span><br><span class="line">if(n&lt;=0)&#123;</span><br><span class="line">printf(&quot;read error or client closed,n==[%d]\n&quot;,n);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">buf[i]=toupper(buf[i]);</span><br><span class="line"></span><br><span class="line">Write(cfd,buf,n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">close(cfd);</span><br><span class="line">exit(0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多线程并发服务器"><a href="#多线程并发服务器" class="headerlink" title="多线程并发服务器"></a>多线程并发服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">//服务器端程序</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;netinet/ip.h&gt; /* superset of previous */</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;ctype.h&gt;</span><br><span class="line">#include&lt;pthread.h&gt;</span><br><span class="line">#include&quot;wrap.h&quot; //自己实现的已经封装好的函数，含有错误处理</span><br><span class="line"></span><br><span class="line">#define MAX_THREAD_NUM 1024</span><br><span class="line">struct INFO&#123;</span><br><span class="line">int cfd;</span><br><span class="line">int idx;</span><br><span class="line">pthread_t threadID;</span><br><span class="line">struct sockaddr_in client;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//设置最大接受的并发数，也就是子线程数</span><br><span class="line">//开辟内存，保证每一个线程使用的cfd不同，防止共享cfd，导致后面的覆盖前面的cfd</span><br><span class="line">struct INFO info[MAX_THREAD_NUM];</span><br><span class="line"></span><br><span class="line">void initthread_array()&#123;</span><br><span class="line">int v;</span><br><span class="line">for(v=0;v&lt;MAX_THREAD_NUM;v++)</span><br><span class="line">info[v].cfd=-1;//cfd当作标志位，-1代表未使用，实现内存复用。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int find_empty_thread_index()&#123;</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;MAX_THREAD_NUM;i++)&#123;</span><br><span class="line">if(info[i].cfd==-1)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">if(i==MAX_THREAD_NUM)//达到最大线程数，就返回-1</span><br><span class="line">return -1;</span><br><span class="line">return i;//返回可用的线程索引</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//子线程回调函数</span><br><span class="line">void *thread_work(void *arg)&#123;</span><br><span class="line">//注意用指针接受传入参数！！！因为在该回调函数中，最后需要更改my_info-&gt;cfd=-1!!!</span><br><span class="line">//struct INFO my_info=*(struct INFO *)arg;这样接收参数，实际上是深拷贝，和传入的结构体不是同一块内存地址。</span><br><span class="line">struct INFO *my_info=(struct INFO *)arg;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">char buf[1024];</span><br><span class="line">int i;</span><br><span class="line">printf(&quot;index==[%d]\n&quot;,my_info-&gt;idx);</span><br><span class="line">char sIP[16];</span><br><span class="line">printf(&quot;client ip==[%s],port==[%d]\n&quot;,inet_ntop(AF_INET,&amp;my_info-&gt;client.sin_addr.s_addr,sIP,sizeof(sIP)),ntohs(my_info-&gt;client.sin_port));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line">memset(&amp;buf,0x00,sizeof(buf));</span><br><span class="line">n=Read(my_info-&gt;cfd,buf,sizeof(buf));</span><br><span class="line">if(n&lt;=0)&#123;</span><br><span class="line">printf(&quot;read error or client closed,n==[%d]\n&quot;,n);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;pthread_ID=[%ld] n==[%d],buf==[%s]\n&quot;,my_info-&gt;threadID,n,buf);</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">buf[i]=toupper(buf[i]);</span><br><span class="line">//发送数据</span><br><span class="line">Write(my_info-&gt;cfd,buf,n);</span><br><span class="line">&#125;</span><br><span class="line">close(my_info-&gt;cfd);</span><br><span class="line">my_info-&gt;cfd=-1;//该处的线程id下次继续可以使用，实现内存复用</span><br><span class="line"></span><br><span class="line">pthread_exit(NULL);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initthread_array();</span><br><span class="line">//创建socket</span><br><span class="line">int lfd=Socket(AF_INET,SOCK_STREAM,0);</span><br><span class="line"></span><br><span class="line">//设置端口复用</span><br><span class="line">int opt = 1;</span><br><span class="line">setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(int));</span><br><span class="line"></span><br><span class="line">//绑定</span><br><span class="line">struct sockaddr_in addr;</span><br><span class="line">bzero(&amp;addr,sizeof(addr));</span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(1026);</span><br><span class="line">addr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">Bind(lfd,(struct sockaddr*)&amp;addr,sizeof(addr));</span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line">Listen(lfd,128);</span><br><span class="line"></span><br><span class="line">int cfd;</span><br><span class="line">int index;</span><br><span class="line">int ret;</span><br><span class="line">struct sockaddr_in client;</span><br><span class="line">socklen_t len;</span><br><span class="line">while(1)&#123;</span><br><span class="line">len=sizeof(client);</span><br><span class="line">bzero(&amp;client,sizeof(client));</span><br><span class="line">cfd=Accept(lfd,(struct sockaddr*)&amp;client,&amp;len);</span><br><span class="line"></span><br><span class="line">//在Info结构体数组中找一个可用的位置，返回其索引</span><br><span class="line">index=find_empty_thread_index();</span><br><span class="line">printf(&quot;******index=[%d]*****\n&quot;,index);</span><br><span class="line"></span><br><span class="line">if(index==-1)&#123;//线程id占满了，就拒绝继续创建子线程</span><br><span class="line">printf(&quot;server busy!\n&quot;);</span><br><span class="line">close(cfd);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建子线程</span><br><span class="line">info[index].cfd=cfd;</span><br><span class="line">memcpy(&amp;info[index].client,&amp;client,sizeof(client));</span><br><span class="line">info[index].idx=index;</span><br><span class="line">ret=pthread_create(&amp;info[index].threadID,NULL,thread_work,&amp;info[index]);</span><br><span class="line">if(ret!=0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;create thread error:[%s]\n&quot;, strerror(ret));</span><br><span class="line">exit(-1);</span><br><span class="line">&#125;</span><br><span class="line">//设置分离属性</span><br><span class="line">pthread_detach(info[index].threadID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//关闭监听文件描述符</span><br><span class="line">close(lfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言基础（class 2）</title>
      <link href="/2022/05/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>守护进程和线程</title>
      <link href="/2022/05/03/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/05/03/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="守护进程的特点"><a href="#守护进程的特点" class="headerlink" title="守护进程的特点:"></a>守护进程的特点:</h2><pre><code>1 一个linux后台服务进程2 不依赖于控制终端3 周期性执行某些任务4 不受用户登录和注销的影响5 一般以d结尾</code></pre><h2 id="进程组和会话"><a href="#进程组和会话" class="headerlink" title="进程组和会话:"></a>进程组和会话:</h2><pre><code>进程组: 一个进程包含多个进程会话: 多个组组成一个会话.创建会话的进程不能是组长进程;一般创建会话是父进程先fork子进程, 然后父进程退出, 让子进程调用setsid函数创建一个会话, 这个子进程既是会长也是组长;只要是创建了会话, 这个进程就脱离了控制终端的影响.</code></pre><h2 id="创建守护进程模型"><a href="#创建守护进程模型" class="headerlink" title="创建守护进程模型:"></a>创建守护进程模型:</h2><pre><code>1 父进程fork子进程, 然后父进程退出.   目的是: 子进程肯定不是组长进程, 为后续调用setsid函数提供了条件.2 子进程调用setsid函数创建一个新的会话.    1 该子进程成了该会话的会长    2 该子进程成了该组的组长进程.    3 不再受控制终端的影响了3 改变当前的工作目录, chdir  -----不是必须的4 重设文件掩码, umask(0000)  -----不是必须的5 关闭STDIN_FILENO  STDOUT_FILENO STDERR_FILENO   ---不是必须的6 核心操作</code></pre><h2 id="编写一个守护进程，每隔2S钟获取一次系统时间，并将这个时间写入磁盘文件。"><a href="#编写一个守护进程，每隔2S钟获取一次系统时间，并将这个时间写入磁盘文件。" class="headerlink" title="编写一个守护进程，每隔2S钟获取一次系统时间，并将这个时间写入磁盘文件。"></a>编写一个守护进程，每隔2S钟获取一次系统时间，并将这个时间写入磁盘文件。</h2><p>分析：首先要按照1.3介绍的守护进行的步骤创建一个守护进程.<br>    每隔2S钟: 使用setitimer函数设置时钟, 该时钟发送的是SIGALRM信号,<br>    信号操作: 注册信号处理函数,signal或者sigaction, 还有一个信号处理函数<br>    获取一次系统时间: time函数的使用, ctime函数的使用<br>    写入磁盘文件: 文件操作函数: open write close </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">//创建守护进程</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;signal.h&gt;</span><br><span class="line">#include&lt;time.h&gt;</span><br><span class="line">#include&lt;sys/time.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;sys/stat.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void clock_process(int signo)&#123;</span><br><span class="line"></span><br><span class="line">//0755文件权限指定，是配合O_CREAT使用的，如果没有该文件，则以0755权限创建文件</span><br><span class="line">int fd=open(&quot;mydemo.log&quot;, O_RDWR|O_CREAT|O_APPEND,0755);</span><br><span class="line">if(fd&lt;0)&#123;</span><br><span class="line">//此时perror不能打印出错误，因为该进程已经摆脱了控制终端，无法输出到标准输出</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取当前的系统时间</span><br><span class="line">time_t cur_time;</span><br><span class="line">time(&amp;cur_time);</span><br><span class="line">//转化为字符串</span><br><span class="line">char *cur_time_s=ctime(&amp;cur_time);</span><br><span class="line">//将时间写入文件</span><br><span class="line">write(fd,cur_time_s,strlen(cur_time_s));</span><br><span class="line">close(fd);</span><br><span class="line">return;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">pid_t pid=fork();</span><br><span class="line">//父进程退出</span><br><span class="line">if(pid&lt;0||pid&gt;0)&#123;</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子进程创建会话</span><br><span class="line">setsid();</span><br><span class="line"></span><br><span class="line">//改变当前的工作目录</span><br><span class="line">chdir(&quot;/home/qcc/log&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//改变文件掩码</span><br><span class="line">umask(0000);</span><br><span class="line"></span><br><span class="line">//关闭标准输入，标准输出，标准错误的文件描述符</span><br><span class="line">close(STDOUT_FILENO);</span><br><span class="line">close(STDIN_FILENO);</span><br><span class="line">close(STDERR_FILENO);</span><br><span class="line"></span><br><span class="line">//核心操作</span><br><span class="line">//注册信号处理函数</span><br><span class="line">struct sigaction act;</span><br><span class="line">act.sa_handler=clock_process;</span><br><span class="line">sigemptyset(&amp;act.sa_mask);</span><br><span class="line">act.sa_flags=0;</span><br><span class="line">sigaction(SIGALRM,&amp;act,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//设置时钟</span><br><span class="line">struct itimerval tm;</span><br><span class="line">//设置周期时间</span><br><span class="line">tm.it_interval.tv_sec=2;</span><br><span class="line">tm.it_interval.tv_usec=0;</span><br><span class="line">//设置开始时间，3秒后</span><br><span class="line">tm.it_value.tv_sec=3;</span><br><span class="line">tm.it_value.tv_usec=0;</span><br><span class="line">setitimer(ITIMER_REAL, &amp;tm, NULL);</span><br><span class="line"></span><br><span class="line">//该语句不会打印出来，因为子进程已经脱离了终端的控制</span><br><span class="line">printf(&quot;hello world\n&quot;);</span><br><span class="line">while(1)&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化:<br>    1 不再频繁的打开和关闭文件<br>    2 如何控制log文件大小  test.log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">//创建守护进程</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;signal.h&gt;</span><br><span class="line">#include&lt;time.h&gt;</span><br><span class="line">#include&lt;sys/time.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;sys/stat.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int flag=0;//控制文件只打开一次</span><br><span class="line">int fd;</span><br><span class="line"></span><br><span class="line">void clock_process(int signo)&#123;</span><br><span class="line"></span><br><span class="line">//0755文件权限指定，是配合O_CREAT使用的，如果没有该文件，则以0755权限创建文件</span><br><span class="line"></span><br><span class="line">if(flag==0)&#123;</span><br><span class="line">fd=open(&quot;mydemo.log&quot;, O_RDWR|O_CREAT|O_APPEND,0755);</span><br><span class="line">if(fd&lt;0)&#123;</span><br><span class="line">//此时perror不能打印出错误，因为该进程已经摆脱了控制终端，无法输出到标准输出</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">flag=1;</span><br><span class="line">&#125;</span><br><span class="line">//获取当前的系统时间</span><br><span class="line">time_t cur_time;</span><br><span class="line">time(&amp;cur_time);</span><br><span class="line">//转化为字符串</span><br><span class="line">char *cur_time_s=ctime(&amp;cur_time);</span><br><span class="line">//将时间写入文件</span><br><span class="line">write(fd,cur_time_s,strlen(cur_time_s));</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">pid_t pid=fork();</span><br><span class="line">//父进程退出</span><br><span class="line">if(pid&lt;0||pid&gt;0)&#123;</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子进程创建会话</span><br><span class="line">setsid();</span><br><span class="line"></span><br><span class="line">//改变当前的工作目录</span><br><span class="line">chdir(&quot;/home/qcc/log&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//改变文件掩码</span><br><span class="line">umask(0000);</span><br><span class="line"></span><br><span class="line">//关闭标准输入，标准输出，标准错误的文件描述符</span><br><span class="line">close(STDOUT_FILENO);</span><br><span class="line">close(STDIN_FILENO);</span><br><span class="line">close(STDERR_FILENO);</span><br><span class="line"></span><br><span class="line">//核心操作</span><br><span class="line">//注册信号处理函数</span><br><span class="line">struct sigaction act;</span><br><span class="line">act.sa_handler=clock_process;</span><br><span class="line">sigemptyset(&amp;act.sa_mask);</span><br><span class="line">act.sa_flags=0;</span><br><span class="line">sigaction(SIGALRM,&amp;act,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//设置时钟</span><br><span class="line">struct itimerval tm;</span><br><span class="line">//设置周期时间</span><br><span class="line">tm.it_interval.tv_sec=2;</span><br><span class="line">tm.it_interval.tv_usec=0;</span><br><span class="line">//设置开始时间，3秒后</span><br><span class="line">tm.it_value.tv_sec=3;</span><br><span class="line">tm.it_value.tv_usec=0;</span><br><span class="line">setitimer(ITIMER_REAL, &amp;tm, NULL);</span><br><span class="line"></span><br><span class="line">//该语句不会打印出来，因为子进程已经脱离了终端的控制</span><br><span class="line">printf(&quot;hello world\n&quot;);</span><br><span class="line"></span><br><span class="line">int j=0;</span><br><span class="line">char des[64];</span><br><span class="line">char temp[10];</span><br><span class="line">char *copy_file=&quot;./mydemo.log.bak&quot;;</span><br><span class="line">while(1)&#123;</span><br><span class="line">//获取文件大小</span><br><span class="line">int size=lseek(fd,0,SEEK_END);</span><br><span class="line">if(size&gt;100)&#123;//文件如果大于100，就保存一个副本！</span><br><span class="line">close(fd);</span><br><span class="line">j++;</span><br><span class="line">memset(temp,0x00,sizeof(temp));</span><br><span class="line">sprintf(temp,&quot;%d&quot;,j);//整数转为字符串</span><br><span class="line">memset(des,0x00,sizeof(des));</span><br><span class="line">sprintf(des,&quot;%s.%s&quot;,copy_file,temp);</span><br><span class="line">rename(&quot;./mydemo.log&quot;,des);</span><br><span class="line">flag=0;//保存副本了，下次需要重新打开文件</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><ul><li><p>线程的基本概念<br><img src="/images/thread.png"></p></li><li><p>循环创建子线程<br><img src="/images/multithread.png"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//循环创建子线程，并且打印是第几个子线程</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void *mythread(void *arg)&#123;</span><br><span class="line">int *ret=(int *)arg;</span><br><span class="line">printf(&quot;child thread num=[%d]\n&quot;,*ret);</span><br><span class="line">printf(&quot;child thread,process_id=[%d],thread_id=[%ld]\n&quot;,getpid(),pthread_self());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_t pid[5];</span><br><span class="line">int n=5;</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">int *temp=(int *)malloc(sizeof(int));</span><br><span class="line">*temp=i;</span><br><span class="line">int ret=pthread_create(&amp;pid[i],NULL,mythread,temp);</span><br><span class="line">if(ret!=0)&#123;</span><br><span class="line">printf(&quot;pthread_create failed. reason:[%s]\n&quot;,strerror(ret));</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;main thread,process_id=[%d],thread_id=[%ld]\n&quot;,getpid(),pthread_self());</span><br><span class="line"></span><br><span class="line">//目的是为了让子线程能执行起来，防止主线程结束后，子线程还未执行结束</span><br><span class="line">sleep(1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ps-Lf-进程id"><a href="#ps-Lf-进程id" class="headerlink" title="ps -Lf 进程id"></a>ps -Lf 进程id</h3><p>查看进程中的所有线程</p><h2 id="线程相关函数"><a href="#线程相关函数" class="headerlink" title="线程相关函数:"></a>线程相关函数:</h2><pre><code>1 创建子线程: pthread_create2 线程退出: pthread_exit3 回收子线程: pthread_join4 设置子线程为分离属性，设置后子线程会自己回收自己: pthread_detach</code></pre><h2 id="进程和线程的函数比较"><a href="#进程和线程的函数比较" class="headerlink" title="进程和线程的函数比较"></a>进程和线程的函数比较</h2><p><img src="/images/compare.png"></p><h2 id="在创建线程的时候设置线程属性为分离属性-默认为非分离属性，传NULL即可"><a href="#在创建线程的时候设置线程属性为分离属性-默认为非分离属性，传NULL即可" class="headerlink" title="在创建线程的时候设置线程属性为分离属性(默认为非分离属性，传NULL即可):"></a>在创建线程的时候设置线程属性为分离属性(默认为非分离属性，传NULL即可):</h2><pre><code>1 pthread_attr_t attr;2 pthread_attr_init(&amp;attr);3 pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);4 pthread_create(&amp;thread, &amp;attr, mythread, NULL);5 pthread_attr_destroy(&amp;attr);//最后记得释放属性内存</code></pre><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul><li><p>线程同步，指一个线程发出某一功能调用时，在没有得到结果之前，该调用不返回。同时其它线程为保证数据一致性，不能调用该功能。</p></li><li><p>两个线程数数分析：<br><img src="/images/num.png"></p></li><li><p>加锁解决</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">pthread_mutex_t mutex;</span><br><span class="line">int num=0;</span><br><span class="line">void *mythread(void *arg)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;10000;i++)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line">num++;</span><br><span class="line">printf(&quot;pthread=[%ld]:num=[%d]\n&quot;,pthread_self(),num);</span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_t pid1;</span><br><span class="line">pthread_t pid2;</span><br><span class="line"></span><br><span class="line">//初始化锁</span><br><span class="line">pthread_mutex_init(&amp;mutex,NULL);</span><br><span class="line"></span><br><span class="line">int ret=pthread_create(&amp;pid1,NULL,mythread,NULL);</span><br><span class="line">if(ret!=0)&#123;</span><br><span class="line">printf(&quot;pthread_create failed. reason:[%s]\n&quot;,strerror(ret));</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">ret=pthread_create(&amp;pid2,NULL,mythread,NULL);</span><br><span class="line">if(ret!=0)&#123;</span><br><span class="line">printf(&quot;pthread_create failed. reason:[%s]\n&quot;,strerror(ret));</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_join(pid1,NULL);</span><br><span class="line">pthread_join(pid2,NULL);</span><br><span class="line"></span><br><span class="line">//释放锁</span><br><span class="line">pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在访问共享资源前加锁，访问结束后立即解锁。锁的“粒度”应越小越好"><a href="#在访问共享资源前加锁，访问结束后立即解锁。锁的“粒度”应越小越好" class="headerlink" title="在访问共享资源前加锁，访问结束后立即解锁。锁的“粒度”应越小越好."></a>在访问共享资源前加锁，访问结束后立即解锁。锁的“粒度”应越小越好.</h2><h2 id="互斥量-也叫互斥锁"><a href="#互斥量-也叫互斥锁" class="headerlink" title="互斥量(也叫互斥锁)"></a>互斥量(也叫互斥锁)</h2><pre><code>第1步：创建一把互斥锁pthread_mutex_t mutex;初始化互斥锁pthread_mutex_init(&amp;mutex);---相当于mutex=1在代码中寻找共享资源（也称为临界区）pthread_mutex_lock(&amp;mutex);  -- mutex = 0[临界区代码]pthread_mutex_unlock(&amp;mutex); -- mutex = 1释放互斥锁资源pthread_mutex_destroy(&amp;mutex);注意：必须在所有操作共享资源的线程上都加上锁否则不能起到同步的效果。</code></pre><h2 id="死锁-死锁不是linux提供给开发者的一种机制-而是由于开发者操作不当引起的"><a href="#死锁-死锁不是linux提供给开发者的一种机制-而是由于开发者操作不当引起的" class="headerlink" title="死锁: 死锁不是linux提供给开发者的一种机制, 而是由于开发者操作不当引起的."></a>死锁: 死锁不是linux提供给开发者的一种机制, 而是由于开发者操作不当引起的.</h2><pre><code>1 自己锁自己.    注意点: 线程在异常退出的时候也需要解锁.2 A线程占用着A锁, 又想去获得B锁; B线程占用着B锁, 又想去获得A锁,   两个线程都不释放自己的锁, 又想去获得对方的锁, 从而造成了死锁.  解决方法:      1 需要先释放自己的锁再去获得其他锁      2 避免使用嵌套的锁, 让线程按照一定的顺序加锁      3 可以调用pthread_mutex_trylock函数加锁, 该函数不阻塞, 所以不会产生死锁.</code></pre><h2 id="读写锁-读写锁是一把锁"><a href="#读写锁-读写锁是一把锁" class="headerlink" title="读写锁:读写锁是一把锁"></a>读写锁:读写锁是一把锁</h2><pre><code>读写锁场景练习:线程A加写锁成功, 线程B请求读锁    线程B阻塞,     当线程A解锁之后, 线程B加锁成功线程A持有读锁, 线程B请求写锁    线程B会阻塞;    当线程A解锁之后, 线程B加锁成功线程A拥有读锁, 线程B请求读锁    线程B请求锁成功线程A持有读锁, 然后线程B请求写锁, 然后线程C请求读锁    线程B和C都阻塞;    当A释放锁之后, B先获得锁, C阻塞    当B释放锁之后, C获得锁    线程A持有写锁, 然后线程B请求读锁, 然后线程C请求写锁    线程B和C都阻塞;    当线程A解锁之后, C先获得锁, B阻塞;    当C解锁之后, B获得锁</code></pre><h2 id="读写锁总结"><a href="#读写锁总结" class="headerlink" title="读写锁总结"></a>读写锁总结</h2><pre><code>写独占, 读共享, 当读和写一起等待锁的时候, 写的优先级高</code></pre><h2 id="读写锁使用步骤"><a href="#读写锁使用步骤" class="headerlink" title="读写锁使用步骤:"></a>读写锁使用步骤:</h2><pre><code>1 先定义一把读写锁:    pthread_rwlock_t rwlock;2 初始化读写锁    pthread_rwlock_init(&amp;rwlock, NULL);3 加锁    pthread_rwlock_rdlock(&amp;rwlock);----&gt;加读锁    pthread_rwlock_wrlock(&amp;rwlock);----&gt;加写锁    ////////////////////////    共享资源出现的位置    /////////////////////////4 解锁    pthread_rwlock_unlock(&amp;rwlock);5 释放锁    pthread_rwlock_destroy(&amp;rwlock);</code></pre><h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><ul><li>生产者消费者模型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct node&#123;</span><br><span class="line">int data;</span><br><span class="line">struct node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">//创建虚拟头结点</span><br><span class="line">Node *dummy_head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_cond_t cond;</span><br><span class="line">pthread_mutex_t mutex;</span><br><span class="line"></span><br><span class="line">//生产者线程</span><br><span class="line">void *producer(void *arg)&#123;</span><br><span class="line"></span><br><span class="line">int no=*(int *)arg;</span><br><span class="line">Node *p=NULL;</span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">//尾插法</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line">Node *pnode=(Node *)malloc(sizeof(Node));</span><br><span class="line">p=dummy_head;</span><br><span class="line">pnode-&gt;data=rand()%1000;</span><br><span class="line"></span><br><span class="line">while(p-&gt;next!=NULL)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p-&gt;next=pnode;</span><br><span class="line">pnode-&gt;next=NULL;</span><br><span class="line">printf(&quot;producer=[%d],data=[%d]\n&quot;,no,pnode-&gt;data);</span><br><span class="line">pthread_mutex_unlock(&amp;mutex);//注意先解锁，再通知消费者解除阻塞！！！</span><br><span class="line">pthread_cond_signal(&amp;cond);//唤醒消费者</span><br><span class="line">sleep(rand()%2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//消费者线程</span><br><span class="line">void *consumer(void *arg)&#123;</span><br><span class="line">int no=*(int *)arg;</span><br><span class="line">while(1)&#123;</span><br><span class="line">//消费头结点的下一个节点</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">//注意需要循环判断（如果是if，后面会空指针错误），因为可能多个消费者阻塞再cond上！！！</span><br><span class="line">while(dummy_head-&gt;next==NULL)&#123;//链表为空，生产者阻塞</span><br><span class="line">pthread_cond_wait(&amp;cond,&amp;mutex);//若条件不满足，则阻塞等待并释放锁；若条件满足，则解除阻塞并加锁！！！</span><br><span class="line">&#125;</span><br><span class="line">Node *pnode=dummy_head-&gt;next;</span><br><span class="line">dummy_head-&gt;next=pnode-&gt;next;</span><br><span class="line">printf(&quot;consumer=[%d],data=[%d]\n&quot;,no,pnode-&gt;data);</span><br><span class="line">free(pnode);</span><br><span class="line">pnode=NULL;</span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">sleep(rand()%2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">dummy_head=(Node *)malloc(sizeof(Node));</span><br><span class="line">dummy_head-&gt;data=0;</span><br><span class="line">dummy_head-&gt;next=NULL;</span><br><span class="line">pthread_t pthread[4];</span><br><span class="line"></span><br><span class="line">pthread_mutex_init(&amp;mutex,NULL);</span><br><span class="line">pthread_cond_init(&amp;cond,NULL);</span><br><span class="line">int i,j;</span><br><span class="line">for(i=0;i&lt;2;i++)</span><br><span class="line">&#123;</span><br><span class="line">int *t=(int *)malloc(sizeof(int));</span><br><span class="line">*t=i;</span><br><span class="line">pthread_create(&amp;pthread[i],NULL,producer,t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(j=2;j&lt;4;j++)</span><br><span class="line">&#123;</span><br><span class="line">int *tt=(int *)malloc(sizeof(int));</span><br><span class="line">*tt=j;</span><br><span class="line">pthread_create(&amp;pthread[j],NULL,consumer,tt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int k;</span><br><span class="line"></span><br><span class="line">for(k=0;k&lt;4;k++)</span><br><span class="line">pthread_join(pthread[k],NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">pthread_cond_destroy(&amp;cond);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">//信号量，只适用于单生产者，单消费者模型。</span><br><span class="line">//出现多消费者多生产者，会出错！</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;pthread.h&gt;</span><br><span class="line">#include&lt;semaphore.h&gt;</span><br><span class="line">typedef struct node&#123;</span><br><span class="line">int data;</span><br><span class="line">struct node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">//创建虚拟头结点</span><br><span class="line">Node *dummy_head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sem_t sem_produce;</span><br><span class="line">sem_t sem_consumer;</span><br><span class="line"></span><br><span class="line">//生产者线程</span><br><span class="line">void *producer(void *arg)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Node *p=NULL;</span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">//尾插法</span><br><span class="line">sem_wait(&amp;sem_consumer);</span><br><span class="line">Node *pnode=(Node *)malloc(sizeof(Node));</span><br><span class="line">p=dummy_head;</span><br><span class="line">pnode-&gt;data=rand()%1000;</span><br><span class="line"></span><br><span class="line">while(p-&gt;next!=NULL)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p-&gt;next=pnode;</span><br><span class="line">pnode-&gt;next=NULL;</span><br><span class="line">printf(&quot;producer,data=[%d]\n&quot;,pnode-&gt;data);</span><br><span class="line">sem_post(&amp;sem_produce);</span><br><span class="line">sleep(rand()%2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//消费者线程</span><br><span class="line">void *consumer(void *arg)&#123;</span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line">//消费头结点的下一个节点</span><br><span class="line">sem_wait(&amp;sem_produce);</span><br><span class="line"></span><br><span class="line">Node *pnode=dummy_head-&gt;next;</span><br><span class="line">dummy_head-&gt;next=pnode-&gt;next;</span><br><span class="line">printf(&quot;consumer,data=[%d]\n&quot;,pnode-&gt;data);</span><br><span class="line">free(pnode);</span><br><span class="line">pnode=NULL;</span><br><span class="line">sem_post(&amp;sem_consumer);</span><br><span class="line">sleep(rand()%2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">dummy_head=(Node *)malloc(sizeof(Node));</span><br><span class="line">dummy_head-&gt;data=0;</span><br><span class="line">dummy_head-&gt;next=NULL;</span><br><span class="line">pthread_t pthread1,pthread2;</span><br><span class="line"></span><br><span class="line">sem_init(&amp;sem_consumer,0,5);//控制最多可以连续生产的数量</span><br><span class="line">sem_init(&amp;sem_produce,0,0);</span><br><span class="line"></span><br><span class="line">pthread_create(&amp;pthread1,NULL,producer,NULL);</span><br><span class="line">pthread_create(&amp;pthread2,NULL,consumer,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pthread_join(pthread1,NULL);</span><br><span class="line">pthread_join(pthread2,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sem_destroy(&amp;sem_consumer);</span><br><span class="line">sem_destroy(&amp;sem_produce);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>进程通信</title>
      <link href="/2022/05/01/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/05/01/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>#进程间通信（IPC：interprocess communication）的概念<br>进程都有自己独立的地址空间，不能通过全局变量进行通信，要想进行通信，必须通过内核！<br>一个进行将数据写到内核缓冲区，另一个进程将数据读走。</p><ul><li>现在常用的进程间的通信方式有：<br>（1）管道（使用最简单）<br>（2）信号（开销最小）<br>（3）共享映射区（无血缘关系）<br>（4）本地套接字（最稳定）</li></ul><h2 id="管道–pipe"><a href="#管道–pipe" class="headerlink" title="管道–pipe"></a>管道–pipe</h2><p>管道是一种最基本的IPC机制，应用于有血缘关系的进程之间，完成数据传递。<br>（1）管道的本质是一块内核缓冲区<br>（2）由两个文件描述符引用，一个表示读端，一个表示写端。<br>（3）规定数据从管道的写端流入管道，从读端流出。<br>（4）当两个进程都终结的时候，管道也自动消失。<br>（5）管道的读端和写端默认都是阻塞的.</p><ul><li>管道的原理<br>（1）实质是内核缓冲区，内部实现是循环队列<br>（2）默认缓冲区大小为4k，使用ulimit -a查看<br>（3）实际操作过程中的缓冲区会根据数据压力做适当调整</li><li>管道的局限性<br>（1）数据一旦被读走，便不在管道中存在，不可反复读取。<br>（2）数据只能在一个方向上流动，若要实现双向流动，必须使用两个管道<br>（3）只能在有血缘关系的进程间使用管道。</li></ul><h2 id="补充知识：指针类型的变量，是来存放地址的，那么它当然等于计算机内部地址总线的宽度。所以在32位计算机中，一个指针变量的返回值必定是4（注意结果是以字节为单位，在64位系统中指针变量的sizeof结果为8。"><a href="#补充知识：指针类型的变量，是来存放地址的，那么它当然等于计算机内部地址总线的宽度。所以在32位计算机中，一个指针变量的返回值必定是4（注意结果是以字节为单位，在64位系统中指针变量的sizeof结果为8。" class="headerlink" title="补充知识：指针类型的变量，是来存放地址的，那么它当然等于计算机内部地址总线的宽度。所以在32位计算机中，一个指针变量的返回值必定是4（注意结果是以字节为单位，在64位系统中指针变量的sizeof结果为8。"></a>补充知识：指针类型的变量，是来存放地址的，那么它当然等于计算机内部地址总线的宽度。所以在32位计算机中，一个指针变量的返回值必定是4（注意结果是以字节为单位，在64位系统中指针变量的sizeof结果为8。</h2><h2 id="pipe用于父子进程间的通信过程"><a href="#pipe用于父子进程间的通信过程" class="headerlink" title="pipe用于父子进程间的通信过程"></a>pipe用于父子进程间的通信过程</h2><p>(1)父进程创建pipe<br>(2)父进程调用fork函数创建子进程<br>(3)父进程关闭一端（读&#x2F;写），子进程关闭另一端（写&#x2F;读）。<br>(4)父子进程分别执行read和write函数<br>注意：如果都要读&#x2F;写，则需要创建两个pipe!!!</p><h2 id="ps-aux-grep-bash的实现原理-pipe的应用"><a href="#ps-aux-grep-bash的实现原理-pipe的应用" class="headerlink" title="ps aux|grep bash的实现原理(pipe的应用)"></a>ps aux|grep bash的实现原理(pipe的应用)</h2><p><img src="/images/ps_aux.png"></p><ul><li>父子通信</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">int fd[2];</span><br><span class="line">int ret=pipe(fd);</span><br><span class="line">if(ret==-1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;pipe error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">pid_t pid=fork();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(pid&gt;0)&#123;</span><br><span class="line">close(fd[0]);//关闭读</span><br><span class="line">int res=dup2(fd[1],STDOUT_FILENO);//标准输出重定向</span><br><span class="line">if(res==-1)&#123;</span><br><span class="line">perror(&quot;dup2 error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">execlp(&quot;ps&quot;,&quot;ps&quot;,&quot;aux&quot;,NULL);//拉起一个应用程序，直接替换代码段，成功执行后，该语句后面的不会执行。</span><br><span class="line">perror(&quot;execlp error&quot;);</span><br><span class="line">wait(NULL);//阻塞回收子进程，当execlp执行失败，则会执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else if(pid==0)&#123;</span><br><span class="line">close(fd[1]);//关闭写</span><br><span class="line">int re=dup2(fd[0],STDIN_FILENO);</span><br><span class="line">if(re==-1)&#123;</span><br><span class="line">perror(&quot;dup2 error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">execlp(&quot;grep&quot;,&quot;grep&quot;,&quot;--color=auto&quot;,&quot;bash&quot;,NULL);</span><br><span class="line">perror(&quot;execlp error&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>兄弟通信</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">int fd[2];</span><br><span class="line">int ret=pipe(fd);</span><br><span class="line">if(ret==-1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;pipe error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;2;i++)&#123;</span><br><span class="line">pid_t pid=fork();</span><br><span class="line">if(pid&lt;0)&#123;</span><br><span class="line">perror(&quot;fork error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else if(pid&gt;0)&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">else if(pid==0)&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(i==2)&#123;</span><br><span class="line">close(fd[0]);//父进程关闭读写，只用于回收子进程</span><br><span class="line">close(fd[1]);</span><br><span class="line">while(1)&#123;</span><br><span class="line">pid_t wpid=waitpid(-1,NULL,WNOHANG);</span><br><span class="line">if(wpid==0)</span><br><span class="line">continue;</span><br><span class="line">else if(wpid==-1)//无子进程了，退出</span><br><span class="line">exit(0);</span><br><span class="line">else if(wpid&gt;0)&#123;</span><br><span class="line">printf(&quot;recover child pid=[%d]\n&quot;,wpid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if(i==0)&#123;</span><br><span class="line">printf(&quot;child 1,pid=[%d],ppid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">close(fd[0]);</span><br><span class="line">int ret=dup2(fd[1],STDOUT_FILENO);</span><br><span class="line">if(ret==-1)&#123;</span><br><span class="line">perror(&quot;dup2 error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">execlp(&quot;ps&quot;,&quot;ps&quot;,&quot;aux&quot;,NULL);</span><br><span class="line">perror(&quot;execlp error&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if(i==1)&#123;</span><br><span class="line">printf(&quot;child 2,pid=[%d],ppid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">close(fd[1]);</span><br><span class="line">int res=dup2(fd[0],STDIN_FILENO);</span><br><span class="line">if(res==-1)&#123;</span><br><span class="line">perror(&quot;dup2 error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execlp(&quot;grep&quot;,&quot;grep&quot;,&quot;bash&quot;,NULL);</span><br><span class="line">perror(&quot;execlp error&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#FIFO</p><ul><li><p>FIFO常被称为命名管道，以区分管道(pipe)。管道(pipe)只能用于“有血缘关系”的进程间通信。但通过FIFO，不相关的进程也能交换数据.</p></li><li><p>fifo进程通信原理<br><img src="/images/fifo.png"></p></li><li><p>fifo完成两个进程间的通信思路<br>进程A：<br>（1）创建一个fifo文件：mkfifo命令或者使用mkfifo函数。<br>（2）open fifo文件，获得一个文件描述符。<br>（3）写fifo文件<br>（4）关闭fifo文件<br>进程B：<br>（1）打开fifo文件，获得文件描述符。<br>（2）读fifo文件<br>（3）关闭fifo文件</p></li><li><p>注意：使用open打开FIFO文件</p></li></ul><p>1.FIFO命名管道不能以O_RDWR的模式打开，会产生二义性。（通常使用FIFO只是为了单向传递数据）</p><p>2.如果确定需要程序之间双向传递数据。<br>①最好使用一对FIFO或者管道，一个方向使用一个！！！<br>②采用先关闭再重新打开FIFO的方法来明确地改变数据流的去向（不常用）。</p><h3 id="只写阻塞方式打开fifo文件，在写入数据时，若没有进程在另一端读，则阻塞，直至有进程读。"><a href="#只写阻塞方式打开fifo文件，在写入数据时，若没有进程在另一端读，则阻塞，直至有进程读。" class="headerlink" title="只写阻塞方式打开fifo文件，在写入数据时，若没有进程在另一端读，则阻塞，直至有进程读。"></a>只写阻塞方式打开fifo文件，在写入数据时，若没有进程在另一端读，则阻塞，直至有进程读。</h3><p>通过两个fifo文件，实现两个进程之间的相互读写（阻塞方式）。</p><ul><li>进程A：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//fifo完成进程间通信的测试</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;sys/stat.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建fifo文件</span><br><span class="line">int res=access(&quot;./myfifo_2&quot;,F_OK);//测试文件是否存在,返回0存在</span><br><span class="line">if(res!=0)&#123;</span><br><span class="line">int ret=mkfifo(&quot;./myfifo_2&quot;,0777);</span><br><span class="line">if(ret==-1)&#123;</span><br><span class="line">perror(&quot;mkfifo error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int fd1=open(&quot;./myfifo&quot;,O_RDONLY);</span><br><span class="line">int fd2=open(&quot;./myfifo_2&quot;,O_WRONLY);</span><br><span class="line">if(fd1&lt;0||fd2&lt;0)&#123;</span><br><span class="line">perror(&quot;open error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//读myfifo文件</span><br><span class="line">char buf[256];</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">int len=read(fd1,buf,sizeof(buf));</span><br><span class="line">printf(&quot;len=[%d],buf=[%s]\n&quot;,len,buf);</span><br><span class="line">close(fd1);</span><br><span class="line">//写myfifo_2文件</span><br><span class="line">write(fd2,&quot;ni hao&quot;,sizeof(&quot;ni hao&quot;));</span><br><span class="line">close(fd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进程B</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//fifo完成进程间通信的测试</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;sys/stat.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建fifo文件</span><br><span class="line">int res=access(&quot;./myfifo&quot;,F_OK);//测试文件是否存在,返回0存在</span><br><span class="line">if(res!=0)&#123;</span><br><span class="line">int ret=mkfifo(&quot;./myfifo&quot;,0777);</span><br><span class="line">if(ret==-1)&#123;</span><br><span class="line">perror(&quot;mkfifo error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int fd1=open(&quot;./myfifo&quot;,O_WRONLY);</span><br><span class="line">int fd2=open(&quot;./myfifo_2&quot;,O_RDONLY);</span><br><span class="line">if(fd1&lt;0||fd2&lt;0)&#123;</span><br><span class="line">perror(&quot;open error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//写myfifo文件</span><br><span class="line">write(fd1,&quot;hello world&quot;,strlen(&quot;hello world&quot;));</span><br><span class="line">close(fd1);</span><br><span class="line"></span><br><span class="line">//读myfifo_2文件</span><br><span class="line">char buf[256];</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">int len=read(fd2,buf,sizeof(buf));</span><br><span class="line">printf(&quot;len=[%d],buf=[%s]\n&quot;,len,buf);</span><br><span class="line">close(fd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="共享映射区"><a href="#共享映射区" class="headerlink" title="共享映射区"></a>共享映射区</h1><ul><li><p>存储映射I&#x2F;O (Memory-mapped I&#x2F;O) 使一个磁盘文件与存储空间中的一个缓冲区相映射。从缓冲区中取数据，就相当于读文件中的相应字节；将数据写入缓冲区，则会将数据写入文件。这样，就可在不使用read和write函数的情况下，使用地址（指针）完成I&#x2F;O操作<br><img src="/images/mmap.png"></p></li><li><p>函数原型：<br>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);<br>参数：<br>addr:一般传NULL,表示让内核去指定一个内存的起始地址<br>length:文件大小（lseek或者stat函数获取）<br>prot:PROT_READ;PROT_WRITE;PROT_READ|PROT_WRITE<br>flags:<br>MAP_SHARED:对映射区的修改会反映到文件中（可以对文件进行修改).<br>MAP_PRIVATE:可以读文件中的数据，但是写不进去数据，即使向内存中也写不进去数据。<br>fd:打开的文件描述符<br>offset:从文件的哪个位置开始映射，一般为0.<br>返回值：映射区的首地址。</p></li><li><p>实现父子进程之间的通信</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">//利用mmap函数完成父子进程间通信</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;errno.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">#include&lt;sys/mman.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用mmap函数建立共享映射区</span><br><span class="line">//void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);</span><br><span class="line">int fd=open(&quot;./test.log&quot;,O_RDWR);</span><br><span class="line">if(fd&lt;0)&#123;</span><br><span class="line">perror(&quot;open error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">int len=lseek(fd,0,SEEK_END);//获取文件大小</span><br><span class="line"></span><br><span class="line">//void *addr=mmap(NULL,len,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);</span><br><span class="line">void *addr=mmap(NULL,len,PROT_READ|PROT_WRITE,MAP_PRIVATE,fd,0);</span><br><span class="line">if(addr==MAP_FAILED)&#123;</span><br><span class="line">perror(&quot;mmap error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid_t pid=fork();</span><br><span class="line">if(pid&lt;0)&#123;</span><br><span class="line">perror(&quot;fork error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else if(pid&gt;0)&#123;</span><br><span class="line">memcpy(addr,&quot;hello world&quot;,strlen(&quot;hello world&quot;));//设置为MAP_PRIVATE,向内存中写不进去数据</span><br><span class="line">wait(NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else if(pid==0)&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">char *p=(char *)addr;//可以读文件中的数据</span><br><span class="line">printf(&quot;[%s]\n&quot;,p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>实现无血缘关系的进程之间的通信</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//利用mmap函数完成进程间通信(write)</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;errno.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">#include&lt;sys/mman.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用mmap函数建立共享映射区</span><br><span class="line">//void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);</span><br><span class="line">int fd=open(&quot;./test.log&quot;,O_RDWR);</span><br><span class="line">if(fd&lt;0)&#123;</span><br><span class="line">perror(&quot;open error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">int len=lseek(fd,0,SEEK_END);//获取文件大小</span><br><span class="line"></span><br><span class="line">void *addr=mmap(NULL,len,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);</span><br><span class="line"></span><br><span class="line">if(addr==MAP_FAILED)&#123;</span><br><span class="line">perror(&quot;mmap error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">memcpy(addr,&quot;0123456789&quot;,10);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//利用mmap函数完成进程间通信(read)</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;errno.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">#include&lt;sys/mman.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用mmap函数建立共享映射区</span><br><span class="line">//void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);</span><br><span class="line">int fd=open(&quot;./test.log&quot;,O_RDWR);</span><br><span class="line">if(fd&lt;0)&#123;</span><br><span class="line">perror(&quot;open error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">int len=lseek(fd,0,SEEK_END);//获取文件大小</span><br><span class="line"></span><br><span class="line">void *addr=mmap(NULL,len,PROT_READ|PROT_WRITE,MAP_SHARED,fd,0);</span><br><span class="line"></span><br><span class="line">if(addr==MAP_FAILED)&#123;</span><br><span class="line">perror(&quot;mmap error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char buf[64];</span><br><span class="line">memset(buf,0x00,sizeof(buf));</span><br><span class="line">memcpy(buf,addr,10);</span><br><span class="line">printf(&quot;buf=[%s]\n&quot;,buf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用mmap函数建立匿名映射(只能用与有血缘关系的进程)：<br>mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);</li></ul><h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><ul><li><p>每个进程收到的所有信号，都是由内核负责发送的。<br>进程A给进程B发送信号原理示意图：<br><img src="/images/mmap.png"></p></li><li><p>signal函数使用</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void sighandler(int signo)&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;signo=[%d]\n&quot;,signo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int fd[2];</span><br><span class="line">int ret=pipe(fd);</span><br><span class="line">if(ret&lt;0)&#123;</span><br><span class="line">perror(&quot;pipe error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//注册信号处理函数，当触发SIGPIPE信号时，内核就会回调用户定义好的回调函数，执行回调函数的内容</span><br><span class="line">signal(SIGPIPE,sighandler);</span><br><span class="line"></span><br><span class="line">close(fd[0]);//关闭读端</span><br><span class="line">write(fd[1],&quot;1213&quot;,strlen(&quot;1213&quot;));//往管道里写数据，因为没有读端，系统会发送一个SIGPIPE信号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>信号的特点：简单，不挟带大量信息，满足某个特定条件产生</p></li><li><p>信号的产生: 按键（Ctrl+c、Ctrl+z、Ctrl+\）；系统调用。。。</p></li><li><p>信号的状态: 产生，未决，递达</p></li><li><p>信号的四要素：<br>信号的编号<br>信号的名字<br>信号的默认处理动作<br>信号是如何产生的（产生原因）</p></li><li><p>signal函数: 给内核注册信号处理函数</p></li><li><p>kill: 发送指定信号给指定进程<br>kill函数原型：int kill(pid_t pid, int sig);<br>函数返回值：<br>成功：0；<br>失败：-1，设置errno</p></li></ul><h3 id="特别需要注意的是：The-signals-SIGKILL-and-SIGSTOP-cannot-be-caught-blocked-or-ignored"><a href="#特别需要注意的是：The-signals-SIGKILL-and-SIGSTOP-cannot-be-caught-blocked-or-ignored" class="headerlink" title="特别需要注意的是：The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored."></a>特别需要注意的是：The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.</h3><h3 id="几个常用到的信号"><a href="#几个常用到的信号" class="headerlink" title="几个常用到的信号"></a>几个常用到的信号</h3><p>SIGINT、SIGQUIT、SIGKILL、SIGSEGV、SIGUSR1、SIGUSR2、SIGPIPE、SIGALRM、SIGTERM、SIGCHLD、SIGSTOP、SIGCONT</p><ul><li><p>alarm:<br>  1 每一个进程都只有一个时钟，后一个的时钟设置会覆盖上一个时钟！！！<br>  2 alarm函数的返回值: 0 或者是上一个alarm剩余的秒数<br>  3 alarm(0): 取消定时器<br>  4 alarm函数发送的是SIGALRM信号，作用是term，终止进程.</p></li><li><p>使用time命令查看程序执行的时间。程序运行的瓶颈在于IO，优化程序，首选优化IO。</p></li><li><p>实际执行时间 &#x3D; 系统时间 + 用户时间 + 损耗时间<br>损耗的时间主要来来自文件IO操作，IO操作会有用户区到内核区的切换，切换的次数越多越耗时。</p></li></ul><h2 id="闹钟"><a href="#闹钟" class="headerlink" title="闹钟"></a>闹钟</h2><ul><li><p>实际执行时间 &#x3D; 系统时间 + 用户时间 + 损耗时间</p></li><li><p>损耗时间&#x3D; 实际执行时间-(系统时间 + 用户时间 )</p></li><li><p>每一个数字都直接打印:printf(“[%d]\n”, i++);<br>real    0m1.217s<br>user    0m0.120s<br>sys     0m0.252s<br>15734次<br>损耗时间&#x3D; 1.217-(0.120+0.252)&#x3D;0.845</p></li><li><p>文件重定向之后:<br>time .&#x2F;alarm_uncle  &gt; test.log<br>real    0m1.003s<br>user    0m0.520s<br>sys     0m0.428s<br>2191879次<br>损耗时间&#x3D;1.003-(0.520+0.428)&#x3D;0.055</p></li><li><p>原因是: 调用printf函数打印数字遇到\n才会打印, 打印过程涉及到从用户区到内核区的切换, 切换次数越多消耗的时间越长, 效率越低;而使用文件重定向, 由于文件操作是带缓冲的, 所以涉及到用户区到内核区的<br>切换次数大大减少,从而使损耗降低.</p></li><li><p>setitimer函数的功能: 设置时钟, 能够周期性的触发时钟<br>int setitimer(int which, const struct itimerval *new_value,struct itimerval *old_value);</p></li><li><p>使用setitimer实现从第三秒开始，每隔一秒打印一次signo。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//setitimer函数测试</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/time.h&gt;</span><br><span class="line"></span><br><span class="line">void sighander(int signo)&#123;</span><br><span class="line">printf(&quot;signo=[%d]\n&quot;,signo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"> //int setitimer(int which, const struct itimerval *new_value,</span><br><span class="line">       //              struct itimerval *old_value);</span><br><span class="line"></span><br><span class="line">//注册信号处理函数</span><br><span class="line">signal(SIGALRM,sighander);</span><br><span class="line"></span><br><span class="line">struct itimerval tm;</span><br><span class="line">//周期性时间赋值</span><br><span class="line">tm.it_interval.tv_sec=1;//秒</span><br><span class="line">tm.it_interval.tv_usec=0;//微秒</span><br><span class="line">//第一次触发的时间</span><br><span class="line">tm.it_value.tv_sec=3;</span><br><span class="line">tm.it_value.tv_usec=0;</span><br><span class="line"></span><br><span class="line">setitimer(ITIMER_REAL,&amp;tm,NULL);</span><br><span class="line">while(1)&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="信号集"><a href="#信号集" class="headerlink" title="信号集"></a>信号集</h2><ul><li>未决信号集和阻塞信号集<br><img src="/images/sigset.png"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">//每隔十次解除对SIGINT和SIGQUIT的阻塞，就能捕获到这两个信号，执行回调函数</span><br><span class="line">//信号集</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void sighander(int signo)&#123;</span><br><span class="line">printf(&quot;signo=[%d]\n&quot;,signo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">signal(SIGINT,sighander);</span><br><span class="line">signal(SIGQUIT,sighander);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//定义信号集变量</span><br><span class="line">sigset_t set;</span><br><span class="line">sigset_t oldset;</span><br><span class="line"></span><br><span class="line">//初始化信号集</span><br><span class="line">sigemptyset(&amp;set);</span><br><span class="line">sigemptyset(&amp;oldset);</span><br><span class="line"></span><br><span class="line">//将SIGINT(ctrl+c)和SIGQUIT(ctrl+\)加入到集合中</span><br><span class="line">sigaddset(&amp;set,SIGINT);</span><br><span class="line">sigaddset(&amp;set,SIGQUIT);</span><br><span class="line"></span><br><span class="line">//将SIGINT和SIGQUIT加入到阻塞集中</span><br><span class="line">//int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);</span><br><span class="line">sigprocmask(SIG_BLOCK,&amp;set,&amp;oldset);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sigset_t pending;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int j=0;</span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line"></span><br><span class="line">sigemptyset(&amp;pending);//初始化</span><br><span class="line"></span><br><span class="line">//获取未决信号集</span><br><span class="line">sigpending(&amp;pending);</span><br><span class="line">int i;</span><br><span class="line">for(i=1;i&lt;32;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(sigismember(&amp;pending,i)==1)</span><br><span class="line">printf(&quot;1&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;0&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">sleep(1);</span><br><span class="line">j++;</span><br><span class="line">//每循环10次，就解除一次对SIGINT和SIGQUIT的阻塞</span><br><span class="line">if(j%10==0)&#123;</span><br><span class="line">//sigprocmask(SIG_UNBLOCK,&amp;set,NULL);</span><br><span class="line">sigprocmask(SIG_SETMASK,&amp;oldset,NULL);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">sigprocmask(SIG_BLOCK,&amp;set,NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号捕捉函数"><a href="#信号捕捉函数" class="headerlink" title="信号捕捉函数"></a>信号捕捉函数</h2><ul><li><p>在xxx信号处理函数执行期间, 若xxx信号再次产生多次, 则信号处理函数不会被打断,当信号处理函数执行完以后, 后来产生的信号只会被处理一次.<br>信号不支持排队.  </p></li><li><p>在xxx信号处理函数执行期间(前提是sa_mask中阻塞了yyy信号), 若收到了yyy信号, 则yyy信号会被阻塞(暂时被阻塞（和阻塞集无关）！！！), 当xxx信号处理函数执行完毕后, 则yyy信号只会被处理一次.</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void sighandler(int signo)&#123;</span><br><span class="line">printf(&quot;signo=-[%d]\n&quot;,signo);</span><br><span class="line">sleep(3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">//注册信号处理函数</span><br><span class="line">struct sigaction act;</span><br><span class="line">act.sa_handler=sighandler;//信号处理函数</span><br><span class="line">sigemptyset(&amp;act.sa_mask);//阻塞的信号</span><br><span class="line">//sigaddset(&amp;act.sa_mask,SIGQUIT);//在信号处理函数执行期间阻塞SIGQUIT信号</span><br><span class="line">act.sa_flags=0;</span><br><span class="line">sigaction(SIGINT,&amp;act,NULL);</span><br><span class="line"></span><br><span class="line">signal(SIGQUIT,sighandler);</span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SIGCHLD信号（重点！！！注意理解）"><a href="#SIGCHLD信号（重点！！！注意理解）" class="headerlink" title="SIGCHLD信号（重点！！！注意理解）"></a>SIGCHLD信号（重点！！！注意理解）</h2><ul><li>SIGCHLD信号:</li></ul><p>1 SIGCHLD信号产生的条件:<br>（1）子进程收到SIGSTOP；<br>（2）子进程收到SIGCONT；<br>（3）子进程退出   </p><p>2 SIGCHLD信号的作用:子进程退出之后, 内核会给其父进程发送SIGCHLD信号, 父进程收到这个信号之后, 调用waitpid或者wait完成对子进程的回收.</p><ul><li>核心代码（父进程回收子进程）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">//父进程使用SIGCHLD信号完成对子进程的回收</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;signal.h&gt;</span><br><span class="line">#include&lt;sys/wait.h&gt;</span><br><span class="line"></span><br><span class="line">void waitchild(int signo)&#123;</span><br><span class="line"></span><br><span class="line">pid_t wpid;</span><br><span class="line">//当有子进程死掉之后，就会执行该回调函数，循环回收子进程，直至无子进程或者只剩下正在执行的子进程时，跳出循环，结束该函数。</span><br><span class="line">while(1)&#123;</span><br><span class="line">wpid=waitpid(-1,NULL,WNOHANG);//一次只能回收一个子进程，-1代表可以回收任意子进程</span><br><span class="line">if(wpid&gt;0)&#123;//回收到子进程</span><br><span class="line">printf(&quot;child is quit,wpid=[%d]\n&quot;,wpid);</span><br><span class="line">&#125;</span><br><span class="line">else if(wpid==0)&#123;//当前有正在运行的子进程，退出回收</span><br><span class="line">printf(&quot;child is living,wpid=[%d]\n&quot;,wpid);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">else if(wpid==-1)&#123;//无子进程了，退出回收</span><br><span class="line">printf(&quot;no child,wpid=[%d]\n&quot;,wpid);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">int i=0;</span><br><span class="line">//将SIGCHLD信号阻塞</span><br><span class="line">sigset_t mask;</span><br><span class="line">sigaddset(&amp;mask,SIGCHLD);</span><br><span class="line">sigprocmask(SIG_BLOCK,&amp;mask,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(;i&lt;3;i++)&#123;</span><br><span class="line">//创建子进程</span><br><span class="line">//printf(&quot;before fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">pid_t pid=fork();</span><br><span class="line">if(pid&lt;0)&#123;</span><br><span class="line">perror(&quot;error&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else if(pid&gt;0)&#123; //父进程</span><br><span class="line">printf(&quot;father: pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else if(pid==0)&#123;  //子进程</span><br><span class="line">printf(&quot;child :pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if(i==0)&#123;</span><br><span class="line">printf(&quot;[%d]--[%d]:child\n&quot;,i,getpid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else if(i==1)&#123;</span><br><span class="line">printf(&quot;[%d]--[%d]:child\n&quot;,i,getpid());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else if(i==2)&#123;</span><br><span class="line"> printf(&quot;[%d]--[%d]:child\n&quot;,i,getpid());</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">else if(i==3)</span><br><span class="line">&#123;</span><br><span class="line">//注册信号处理函数</span><br><span class="line">struct sigaction act;</span><br><span class="line">act.sa_handler=waitchild;</span><br><span class="line">sigemptyset(&amp;act.sa_mask);</span><br><span class="line">act.sa_flags=0;</span><br><span class="line"></span><br><span class="line">sleep(5);</span><br><span class="line">sigaction(SIGCHLD,&amp;act,NULL);</span><br><span class="line"></span><br><span class="line">//解除对SIGCHLD阻塞</span><br><span class="line">sigprocmask(SIG_UNBLOCK,&amp;mask,NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//父进程执行其他操作</span><br><span class="line">while(1)&#123;</span><br><span class="line">sleep(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码解释：</p><ul><li><p>问题一：有可能还没有完成对SIGCHLD信号的注册, 三个子进程就全部退出了.<br>解决方法: 在fork之前先将SIGCHLD信号阻塞,阻塞之后不管来多少个SIGCHLD信号，最终在未决集中只存在的是SIGCHLD为1，表示未处理的信号，然后在完成对SIGCHLD信号的注册之后再解除对SIGCHLD信号的阻塞;</p></li><li><p>问题二：有可能在SIGCHLD信号处理函数执行期间, 另外的2个子进程同时全部退出, 由于信号是不支持排队的，此时来的信号会被阻塞，在信号处理函数结束之后，只会保留一个信号，所以，还会处理回收一个子进程，此时另一个会成为僵尸进程.<br>解决办法: 在信号处理函数中应该循环回收, 当waitpid返回-1的时候就表示已经回收完所有子进程了, 此时可以break;    </p></li><li><p>内核实现信号捕捉的过程</p></li></ul><p><img src="/images/signal_process.png"></p><ul><li>正常情况下，不用信号完成进程间的通信！！！</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>进程控制</title>
      <link href="/2022/04/26/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/04/26/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="程序和进程的概念"><a href="#程序和进程的概念" class="headerlink" title="程序和进程的概念:"></a>程序和进程的概念:</h1><p>程序: 是编译好的二进制文件, 存放在磁盘上, 占用的是磁盘空间, 是一个静态的概念.<br>进程: 一个启动的程序, 需要占用系统资源: 如 内存, cpu 终端 等<br>剧本—&gt;程序<br>进程—&gt;唱戏(舞台, 灯光, 道具, 人等资源)<br>同一个程序可以在多个终端执行, 类似与同一台戏可以在多个舞台演出.<br>每启动一个程序都会有一个进程PID, 即使是相同的程序多次启动也会有个不同的PID。</p><h1 id="并发和并行的概念"><a href="#并发和并行的概念" class="headerlink" title="并发和并行的概念"></a>并发和并行的概念</h1><p>并发: 在一个时间段内, 一个CPU上, 有多个程序在执行.<br>并行: 并行指两个或两个以上的程序在同一时刻发生(需要有多核)。<br>cpu会将一个大的时间段分成多个小的时间片, 让进程轮流使用CPU的时间片.<br>#进程的五态模型和七态模型</p><p>#进程创建</p><ul><li>调用fork函数的内核实现原理:<br><img src="/images/fork.png"><br><img src="/images/fork_two.png"></li></ul><h2 id="循环创建子进程问题（子进程也会创建子进程）："><a href="#循环创建子进程问题（子进程也会创建子进程）：" class="headerlink" title="循环创建子进程问题（子进程也会创建子进程）："></a>循环创建子进程问题（子进程也会创建子进程）：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> 1 //fork函数测试，循环创建子进程</span><br><span class="line"> 2 #include&lt;stdio.h&gt;</span><br><span class="line"> 3 #include&lt;stdlib.h&gt;</span><br><span class="line"> 4 #include&lt;string.h&gt;</span><br><span class="line"> 5 #include&lt;sys/types.h&gt;</span><br><span class="line"> 6 #include&lt;unistd.h&gt;</span><br><span class="line"> 7</span><br><span class="line"> 8 int main()&#123;</span><br><span class="line"> 9</span><br><span class="line">10     int i=0;</span><br><span class="line">11 for(;i&lt;3;i++)&#123;</span><br><span class="line">12     //创建子进程</span><br><span class="line">13     printf(&quot;before fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">14     pid_t pid=fork();</span><br><span class="line">15     if(pid&lt;0)&#123;</span><br><span class="line">16         perror(&quot;error&quot;);</span><br><span class="line">17         return -1;</span><br><span class="line">18     &#125;</span><br><span class="line">19     else if(pid&gt;0)&#123; //父进程</span><br><span class="line">20         printf(&quot;father: pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">21     //  sleep(1);</span><br><span class="line">22     &#125;</span><br><span class="line">23     else if(pid==0)&#123;  //子进程</span><br><span class="line">24         printf(&quot;child :pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">25</span><br><span class="line">26         &#125;</span><br><span class="line">27     printf(&quot;after fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31     &#125;</span><br><span class="line">32 return 0;</span><br><span class="line">33 &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主进程总共创建了7个子进程，分析如下：<br><img src="/images/child_fork.png"></p><h2 id="修该后的代码"><a href="#修该后的代码" class="headerlink" title="修该后的代码"></a>修该后的代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> 1 //fork函数测试，循环创建子进程</span><br><span class="line"> 2 #include&lt;stdio.h&gt;</span><br><span class="line"> 3 #include&lt;stdlib.h&gt;</span><br><span class="line"> 4 #include&lt;string.h&gt;</span><br><span class="line"> 5 #include&lt;sys/types.h&gt;</span><br><span class="line"> 6 #include&lt;unistd.h&gt;</span><br><span class="line"> 7</span><br><span class="line"> 8 int main()&#123;</span><br><span class="line"> 9</span><br><span class="line">10     int i=0;</span><br><span class="line">11 for(;i&lt;3;i++)&#123;</span><br><span class="line">12     //创建子进程</span><br><span class="line">13     printf(&quot;before fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">14     pid_t pid=fork();</span><br><span class="line">15     if(pid&lt;0)&#123;</span><br><span class="line">16         perror(&quot;error&quot;);</span><br><span class="line">17         return -1;</span><br><span class="line">18     &#125;</span><br><span class="line">19     else if(pid&gt;0)&#123; //父进程</span><br><span class="line">20         printf(&quot;father: pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">21     //  sleep(1);</span><br><span class="line">22     &#125;</span><br><span class="line">23     else if(pid==0)&#123;  //子进程</span><br><span class="line">24         printf(&quot;child :pid=[%d],fpid=[%d]\n&quot;,getpid(),getppid());</span><br><span class="line">25         break;//只要子进程在此处跳出循环即可！！！</span><br><span class="line">26         &#125;</span><br><span class="line">27     printf(&quot;after fork, pid=[%d]\n&quot;,getpid());</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31     &#125;</span><br><span class="line">32 return 0;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只要在子进程代码块中，执行完逻辑后，break出循环就能保证子进程不在创建子进程！！！</p><h1 id="父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）"><a href="#父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）" class="headerlink" title="父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）"></a>父子进程不能共享全局变量（即不能够使用全局变量进行通信！！！）</h1><p><img src="/images/global.png"><br>父子进程不能共享全局变量；但是如果父子进程只是对全局变量做读操作，则父子进程在真正的物理内存空间中只有一份，属于共享！但是如果父子进程中的任何一个进程对该变量进行修改操作，会在内存中拷贝一个副本，然后在这个副本上进行修改，修改完成后在映射回虚拟内存空间上去！！！</p><ul><li><p>总结：写时复制，读时共享！！！</p></li><li><p>如果想在一个进程内部执行系统命令或者是应用程序, 优先应该想到如下方式:<br>先fork(), 然后在子进程里面执行execl拉起可执行程序或者命令.<br>pid &#x3D; fork();<br>if(pid&#x3D;&#x3D;0)<br>{<br>  execl(…);<br>}</p></li></ul><p>execl: 一般用于执行用户自定义的应用程序.<br>execlp: 一般用于执行系统命令</p><ul><li><p>exec函数是用一个新程序替换了当前进程的代码段、数据段、堆和栈；原有的进程空间没有发生变化，并没有创建新的进程，进程PID没有发生变化。<br><img src="/images/excel.png"></p></li><li><p>为什么要对进程资源进行回收？<br>当一个进程退出之后，进程能够回收自己的用户区的资源，但是不能回收内核空间的PCB资源，必须由它的父进程调用wait或者waitpid函数完成对子进程的回收，避免造成系统资源的浪费</p></li><li><p>孤儿进程<br>父进程先退出，子进程就变成了孤儿进程，此时被init进程领养，当孤儿进程退出后，就会被init进程回收。</p></li><li><p>僵尸进程<br>子进程先退出，父进程没有完成子进程的回收，此时子进程就变成了僵尸进程。<br>如何解决？<br>不能用kill -9杀死僵尸进程，因为僵尸进程是一个死掉的进程，无法接收信号，<br>应该使用杀死僵尸进程的父进程的方法来解决僵尸进程。<br>原因：杀死其父进程可以让init进程领养僵尸进程，最后init进程回收僵尸进程。</p></li><li><p>wait函数</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wait函数:</span><br><span class="line">pid_t wait(int *status);</span><br><span class="line">返回值:</span><br><span class="line">&gt;0: 回收的子进程的PID</span><br><span class="line">-1: 没有子进程</span><br><span class="line">参数(man 2 wait查看宏定义！):</span><br><span class="line">status: 子进程的退出状态</span><br><span class="line">if(WIFEXITED(status))  //正常退出</span><br><span class="line">&#123;</span><br><span class="line">WEXITSTATUS(status) //返回退出状态（子进程的返回值）</span><br><span class="line">&#125;</span><br><span class="line">else if(WIFSIGNALED(status))//被信号杀死</span><br><span class="line">&#123;</span><br><span class="line">WTERMSIG(status) //返回信号的number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>waitpid函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pid_t waitpid(pid_t pid,int *status,int options);</span><br><span class="line">参数：</span><br><span class="line">pid</span><br><span class="line">pid&gt;0,表示等待指定的子进程</span><br><span class="line">pid=-1:表示等待任意的子进程</span><br><span class="line">status</span><br><span class="line">同wait函数</span><br><span class="line">options</span><br><span class="line">0：表示阻塞</span><br><span class="line">WNOHANG:表示非阻塞</span><br><span class="line">返回值</span><br><span class="line">&gt;0:表示回收子进程的pid</span><br><span class="line">=0：若是非阻塞的，表示子进程还活着</span><br><span class="line">=-1：表示没有子进程了</span><br><span class="line"></span><br><span class="line">注意：调用一次waitpid或wait函数只能回收一个子进程</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件IO</title>
      <link href="/2022/04/24/%E6%96%87%E4%BB%B6IO/"/>
      <url>/2022/04/24/%E6%96%87%E4%BB%B6IO/</url>
      
        <content type="html"><![CDATA[<h1 id="C库IO函数的工作流程："><a href="#C库IO函数的工作流程：" class="headerlink" title="C库IO函数的工作流程："></a>C库IO函数的工作流程：</h1><p><img src="/images/file.png"></p><p><img src="/images/file1.png"></p><ul><li>使用fopen函数打开一个文件, 返回一个FILE* fp, 这个指针指向的结构体有三个重要的成员.<br>（1）文件描述符: 通过文件描述可以找到文件的inode, 通过inode可以找到对应的数据块<br>（2）文件指针: 读和写共享一个文件指针, 读或者写都会引起文件指针的变化<br>（3）文件缓冲区: 读或者写会先通过文件缓冲区, 主要目的是为了减少对磁盘的读写次数, 提高读写磁盘的效率.</li></ul><h1 id="C库函数和系统函数的关系（printf举例）"><a href="#C库函数和系统函数的关系（printf举例）" class="headerlink" title="C库函数和系统函数的关系（printf举例）"></a>C库函数和系统函数的关系（printf举例）</h1><p><img src="/images/printf.png"></p><p>库函数和系统函数的关系是: 调用和被调用的关系;库函数是对系统函数的进一步封装.</p><p>系统调用: 由操作系统实现并提供给外部应用程序的编程接口(Application Programming Interface, API), 是应用程序同系统之间数据交互的桥梁.</p><h1 id="虚拟地址空间"><a href="#虚拟地址空间" class="headerlink" title="虚拟地址空间"></a>虚拟地址空间</h1><p><img src="/images/virtual.png"></p><p>以32位系统为例，系统会为每一个进程分配0~4G的空间（虚拟地址空间）。<br>（1）进程的虚拟地址空间分为用户区和内核区, 其中内核区是受保护的, 用户是不能够对其进行读写操作的;<br>（2）内核区中很重要的一个就是进程管理, 进程管理中有一个区域就是PCB(本质是一个结构体);<br>（3）PCB中有文件描述符表, 文件描述符表中存放着打开的文件描述符, 涉及到文件的IO操作都会用到这个文件描述符.</p><h1 id="PCB和文件描述符"><a href="#PCB和文件描述符" class="headerlink" title="PCB和文件描述符"></a>PCB和文件描述符</h1><p><img src="/images/pcb.png"></p><p>备注:<br>pcb：结构体:task_stuct, 该结构体在:<br>&#x2F;usr&#x2F;src&#x2F;linux-headers-4.4.0-97&#x2F;include&#x2F;linux&#x2F;sched.h:1390<br>一个进程有一个文件描述符表：1024<br>前三个被占用, 分别是STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO<br>文件描述符作用：通过文件描述符找到inode, 通过inode找到磁盘数据块.</p><p>虚拟地址空间–&gt;内核区–&gt;进程管理–&gt;pcb–&gt;文件描述表–&gt;文件描述符–&gt;使用IO操作使用文件描述符</p><ul><li><p>lseek函数常用操作<br>文件指针移动到头部<br>lseek(fd, 0, SEEK_SET);<br>获取文件指针当前位置<br>int len &#x3D; lseek(fd, 0, SEEK_CUR);<br>获取文件长度<br>int len &#x3D; lseek(fd, 0, SEEK_END);<br>lseek实现文件拓展<br>off_t currpos;<br>&#x2F;&#x2F; 从文件尾部开始向后拓展1000个字节<br>currpos &#x3D; lseek(fd, 1000, SEEK_END);<br>&#x2F;&#x2F; 额外执行一次写操作，否则文件无法完成拓展<br>write(fd, “a”, 1);    &#x2F;&#x2F; 数据随便写</p></li><li><p>文件权限计算方法:<br>mode &amp; ~umask</p></li><li><p>思考: 阻塞和非阻塞是文件的属性还是read函数的属性?<br>（1）通过读普通文件测试得知: read函数在读完文件内容之后, 若再次read,则read函数会立刻返回, 表明read函数读普通文件是非阻塞的.<br>（2）设备文件:&#x2F;dev&#x2F;tty 和 标准输入STDIN_FILENO，通过读&#x2F;dev&#x2F;tty终端设备文件和标准输入, 表明read函数读设备文件是阻塞的.<br>（3）结论: 阻塞和非阻塞不是read函数的属性, 而是文件本身的属性.<br>socket pipe这两种文件都是阻塞的.</p></li></ul><h1 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h1><ul><li>使用st_mode成员判断文件类型:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line">   if((sb.st_mode &amp; S_IFMT) ==S_IFLNK)</span><br><span class="line">   &#123;   </span><br><span class="line">       printf(&quot;连接文件\n&quot;);</span><br><span class="line">   &#125;   </span><br><span class="line">   </span><br><span class="line">//方法二</span><br><span class="line">   if (S_ISREG(sb.st_mode)) </span><br><span class="line">   &#123;   </span><br><span class="line">       printf(&quot;普通文件\n&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>判断文件权限:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> if(sb.st_mode &amp; S_IROTH)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;---R----&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>lstat和stat函数:<br>（1）对于普通文件来说, lstat函数和stat函数一样<br>（2）对于软连接文件来说, lstat函数获取的是连接文件本身的属性,<br>（3）stat函数获取的是连接文件指向的文件的属性.</p></li><li><p>目录操作:<br>（1）打开目录 opendir<br>（2）循环读目录: readdir<br>（3）关闭目录: closedir</p></li><li><p>dup和dup2函数:复制文件描述符—-详情看图</p></li></ul><p><img src="/images/dup.png"></p><ul><li>fcntl函数:<br>(1)复制文件描述符: int fd &#x3D; fcntl(oldfd, F_DUPFD, 0);<br>(2)获得和设置文件的flag属性:<br>int flag &#x3D; fcntl(fd, F_GETFL, 0);<br>flag &#x3D;flag|O_APPEND;<br>fcntl(fd, F_SETFL, flag);</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>makefill gdb</title>
      <link href="/2022/04/23/makefill-gdb/"/>
      <url>/2022/04/23/makefill-gdb/</url>
      
        <content type="html"><![CDATA[<ul><li><p>makefile:<br>makefile文件是用来管理项目工程文件, 通过执行make命令, make就会解析并执行makefile文件.<br>makefile命名: makefile或者Makefile</p></li><li><p>makefile的编写:<br>规则如下:<br>目标: 依赖<br>(tab)命令</p></li><li><p>第一个版本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main: main.c fun1.c fun2.c sum.c</span><br><span class="line">gcc -o main main.c fun1.c fun2.c sum.c</span><br></pre></td></tr></table></figure><p>缺点: 效率低, 修改一个文件, 所有的文件会全部重新编译.</p></li><li><p>第二个版本：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 main:main.o fun1.o fun2.o</span><br><span class="line">2     gcc -o main main.o fun1.o fun2.o</span><br><span class="line">3 main.o:main.c</span><br><span class="line">4     gcc -c main.c -I ./</span><br><span class="line">5 fun1.o:fun1.c</span><br><span class="line">6     gcc -c fun1.c</span><br><span class="line">7 fun2.o:fun2.c</span><br><span class="line">8     gcc -c fun2.c</span><br></pre></td></tr></table></figure><p>检查规则:<br>要想生成目标文件, 先要检查依赖条件是否都存在.<br>若都存在, 则比较目标时间和依赖的时间, 如果依赖的时候比目标的时间新,则重新生成目标; 否则不重新生成.<br>若不存在, 则往下找有没有生成依赖的规则, 有则生成, 如果没有则报错.<br>第二版本的缺点: 冗余, 若.c文件数量很多, 编写起来比较麻烦.</p><ul><li>第三个版本：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 1 target=main</span><br><span class="line"> 2 objects=main.o fun1.o fun2.o</span><br><span class="line"> 3 CC=gcc</span><br><span class="line"> 4 CPPFLAGS=-I./</span><br><span class="line"> 5</span><br><span class="line"> 6 $(target):$(objects)</span><br><span class="line"> 7     $(CC) -o $@ $^</span><br><span class="line"> 8 %.o:%.c</span><br><span class="line"> 9     $(CC) -c $&lt; $(CPPFLAGS)</span><br><span class="line">10</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>变量:<br>自定义变量: var &#x3D; hello, $(var)<br>自带变量: CC CPPFLAGS CFLAGS LDFLAGS<br>自动变量: $@ $&lt; $^<br>模式规则: %.o:%.c——&gt; 前后的%必须是相同 </p><ul><li>第四个版本：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 1 target=main</span><br><span class="line"> 2 src=$(wildcard *.c)</span><br><span class="line"> 3 objects=$(patsubst %.c,%.o,$(src))</span><br><span class="line"> 4 CC=gcc</span><br><span class="line"> 5 CPPFLAGS=-I./</span><br><span class="line"> 6</span><br><span class="line"> 7 $(target):$(objects)</span><br><span class="line"> 8     $(CC) -o $@ $^</span><br><span class="line"> 9 %.o:%.c</span><br><span class="line">10     $(CC) -c $&lt; $(CPPFLAGS)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>makefile函数：<br>1.wildcard – 查找指定目录下的指定类型的文件<br>src&#x3D;$(wildcard *.c)  &#x2F;&#x2F;找到当前目录下所有后缀为.c的文件,赋值给src<br>2.patsubst – 匹配替换<br>obj&#x3D;$(patsubst %.c,%.o, $(src)) &#x2F;&#x2F;把src变量里所有后缀为.c的文件替换成.o<br>如: 当前目录下有a.c b.c c.c<br>src&#x3D;$(wildcard *.c) —–&gt; src&#x3D;a.c b.c c.c<br>obj&#x3D;$(patsubst %.c,%.o, $(src)) —–&gt; obj&#x3D;a.o b.o c.o</p><ul><li>第五个版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 1 target=main</span><br><span class="line"> 2 src=$(wildcard *.c)</span><br><span class="line"> 3 objects=$(patsubst %.c,%.o,$(src))</span><br><span class="line"> 4 CC=gcc</span><br><span class="line"> 5 CPPFLAGS=-I./</span><br><span class="line"> 6</span><br><span class="line"> 7 $(target):$(objects)  #第一个目标即为终极目标，直接make就会运行！！！</span><br><span class="line"> 8     $(CC) -o $@ $^</span><br><span class="line"> 9 %.o:%.c</span><br><span class="line">10     $(CC) -c $&lt; $(CPPFLAGS)</span><br><span class="line">11</span><br><span class="line">12 .PHONY:clean  #声明为伪目标。   非第一个目标，make clean才会运行嗷</span><br><span class="line">13 clean:</span><br><span class="line">14     -rm -f $(objects) $(target)   #rm前加-,可以保证clean下的前一个命令如果无法执行，不会影响在其后面加-的命令的执行！   rm -f: 强制执行, 比如若要删除的文件不存在使用-f不会报错。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加清理功能.<br>终极目标: makefile文件中第一次出现的目标叫做终极目标。<br>伪目标：声明目标为伪目标之后, makefile将不会检查该目标是否存在或者该目标是否需要更新。<br>.PHONY:clean<br>clean:<br>rm -f ….        </p><ul><li><p>使用-f可以指定makefile文件（因为执行make默认找的是makefile文件，通过-f参数可以指定其他名称的makefile文件）, 如: make -f new_makefile</p></li><li><p>gdb调试 :</p></li></ul><p>gdb是在程序运行的结果与预期不符合的时候, 可以使用gdb进行调试,<br>特别注意的是: 使用gdb调试需要在编译的时候加-g参数!!!!!!!</p><p>启动gdb:<br>gdb program<br>set args hello world<br>show args<br>执行程序:<br>run  #执行到断点位置，无断点，则执行完<br>start #第一条语句停下来</p><p>list操作:<br>list<br>list -<br>list func<br>list linenum<br>list file:func<br>list file:linenum<br>set listsize n<br>show listsize</p><p>断点操作:<br>b linenum<br>b func<br>b file:linenum<br>b file:func</p><p>info break</p><p>disable m n | m-n<br>enable  m n | m-n<br>delete m n | m-n </p><p>条件断点<br>一般来说, 为断点设置一个条件, 我们使用if关键词, 后面跟其断点条件。设置一个条件断点：<br>b test.c:8 if intValue &#x3D;&#x3D; 5</p><p>调试命令:<br>run （全部执行，直至第一个断点处）<br>start （执行至第一条语句）<br>next  （单步执行，不进入函数体）<br>step  （单步执行，进入函数体）<br>finish  （跳出函数体）<br>until  （执行完循环体）<br>continue  （执行至下一个断点处）</p><p>print var  （打印变量值）</p><p>自动显示:<br>display var  （显示变量）</p><p>info display  （列出所有需要显示的变量信息）</p><p>disable display m n | m-n   （使变量显示失效）<br>enable display m n | m-n     （使变量显示生效）</p><p>delete display m n | m-n   （删除需要显示的变量）<br>undisplay m n | m-n    （删除需要显示的变量）</p><p>多进程调试？？？？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim gcc库制作和使用</title>
      <link href="/2022/04/20/vim_gcc%E5%BA%93%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/20/vim_gcc%E5%BA%93%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>#gcc的工作流程<br><img src="/images/gcc.png"><br><img src="/images/gcc2.png"><br>1.预处理：cpp预处理器，去掉注释，展开头文件，宏替换<br>gcc -E test.c -o test.i<br>2.编译：gcc,将源代码文件编译成汇编代码<br>gcc -S test.i -o test.s<br>3.汇编：as，将汇编语言代码编译成二进制文件（目标代码）<br>gcc -c test.s -o test.o<br>4.链接：ld，链接test.c代码中调用的库函数<br>gcc test.o -o test.exe<br>#gcc的常用参数<br>-c  只编译, 生成.o文件, 通常称为目标文件<br>-I   指定头文件所在的路径<br>-L   指定库文件所在的路径<br>-l    指定库的名字<br>-o   指定生成的目标文件的名字<br>-g   包含调试信息, 使用gdb调试需要添加-g参数<br>#库</p><ul><li>库是二进制文件, 是源代码文件的另一种表现形式, 是加了密的源代码;<br>是一些功能相近或者是相似的函数的集合体</li></ul><h2 id="库可分静态库-static-library-和共享库-shared-library"><a href="#库可分静态库-static-library-和共享库-shared-library" class="headerlink" title="库可分静态库(static library)和共享库(shared library)"></a>库可分静态库(static library)和共享库(shared library)</h2><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><ul><li>静态库的制作：</li></ul><p>1.将.c文件编译成.o文件<br>gcc -c func1.c func2.c<br>2.使用ar命令将.o文件打包成.a文件<br>ar rcs libtest1.a func1.o func2.o</p><ul><li>静态库的使用（注意库名字是test1,去掉lib和.a）<br>gcc mian.c -I .&#x2F; -L .&#x2F; -l test1 -o main1<br>运行：.&#x2F;main1</li></ul><h2 id="静态库的优缺点"><a href="#静态库的优缺点" class="headerlink" title="静态库的优缺点"></a>静态库的优缺点</h2><ul><li>优点：</li></ul><p>函数库最终被打包到应用程序中，实现是函数本地化，寻址方便、速度快。<br>（库函数调用效率&#x3D;&#x3D;自定义函数使用效率）<br>程序在运行时与函数库再无瓜葛，移植方便。</p><ul><li>缺点：</li></ul><p>消耗系统资源较大, 每个进程使用静态库都要复制一份, 无端浪费内存。</p><p>静态库会给程序的更新、部署和发布带来麻烦。如果静态库libxxx.a更新了，所有使用它的应用程序都需要重新编译、发布给用户（对于玩家来说，可能是一个很小的改动，却导致整个程序重新下载）。</p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><ul><li>动态库的制作</li></ul><p>1.生成目标文件.o, 此时要加编译选项：-fPIC（fpic）<br>gcc -fpic -c fun1.c fun2.c<br>参数：-fpic创建与地址无关的编译程序(pic, position independent code), 目的就是为了能够在多个应用程序间共享.<br>2.生成共享库, 此时要加链接器选项: -shared（指定生成动态链接库）<br>gcc -shared fun1.o fun2.o -o libtest2.so</p><ul><li>动态库的使用</li></ul><p>gcc main.c -I.&#x2F; -L.&#x2F; -ltest2 -o main2<br>运行：.&#x2F;main2报错了！<br>动态库文件在编译的时候, 连接器需要使用参数-L找到库文件所在的路径;<br>在执行的时候, 是加载器ldd根据动态库的路径进行加载的, 与编译的时候用的-L<br>指定的路径无关.<br>最常用的解决办法:将LD_LIBRARY_PATH环境变量加到用户级别的配置文件<del>&#x2F;.bashrc中,<br>然后生效(. ~&#x2F;.bashrc    source ~&#x2F;.bashrc   退出终端然后再登录)<br>（1）dll放在用户家目录的新建的lib文件夹中，&#x2F;home&#x2F;qcc&#x2F;lib&#x2F;,配置如下<br>export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:</del>&#x2F;lib<br>（2）dll放在当前目录下或者当前目录的lib子目录下均可以的配置如下：<br>export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:.&#x2F;lib</p><ul><li><p>共享库的特点<br>动态库把对一些库函数的链接载入推迟到程序运行的时期。<br>可以实现进程之间的资源共享。（因此动态库也称为共享库）<br>将一些程序升级变得简单。<br>甚至可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）</p></li><li><p>比较静态库和动态库的优缺点<br> 静态库的优点:<br>   1 执行速度快, 是因为静态库已经编译到可执行文件内部了<br>   2 移植方便, 不依赖域其他的库文件<br> 缺点:<br>   1 耗费内存, 是由于每一个静态库的可执行程序都会加载一次<br>   2 部署更新麻烦, 因为静态库修改以后所有的调用到这个静态库的可执行文<br>件都需要重新编译</p></li></ul><p> 动态库的优点:<br>     1 节省内存<br>     2 部署升级更新方便, 只需替换动态库即可, 然后再重启服务.<br> 缺点:<br>     1 加载速度比静态库慢<br>     2 移植性差, 需要把所有用到的动态库都移植.</p><p>由于由静态库生成的可执行文件是把静态库加载到了其内部, 所以静态库生成的可执行文件一般会比动态库大.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2022/04/19/%E9%BB%91%E9%A9%AC_linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/19/%E9%BB%91%E9%A9%AC_linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>#linux基础–基础命令</p><ol><li><p>shell相关：shell就是命令解释器，shell将用户输入的命令解释成内核能够识别的指令。<br> 查看当前系统使用的shell：echo $SHELL<br> 当前系统支持的shell:cat &#x2F;etc&#x2F;shells</p></li><li><p>history会显示历史输入的所有命令。</p></li><li><p>linux下一切皆文件，有：字符设备文件（键盘&#x2F;鼠标）、块设备文件（硬盘）。</p></li><li><p>linux的目录结构：是一个倒立的树状结构<br>  &#x2F;bin: ls cp mv<br>  &#x2F;sbin: ifconfig halt shutdown<br>  &#x2F;lib: 库目录<br>  &#x2F;root: root用户的家目录<br>  &#x2F;dev: 字符设备和块设备.  在linux下, 一切皆是文件.<br>  &#x2F;home: 用户的家目录<br>  &#x2F;usr: 相当于windows的program files<br>  &#x2F;etc: 系统级别的配置文件<br>  &#x2F;mnt:<br>  &#x2F;media<br>  &#x2F;tmp<br>  &#x2F;opt</p></li><li><p>相对路径和绝对路径<br> 相对路径: 从当前目录开始表示的目录.<br> 绝对路径: 从根（&#x2F;）目录开始表示的目录.</p></li><li><p>tree命令，以树状形式查看指定目录内容，使用该命令需要安装软件tree。sudo apt-get install tree。<br> 用法： tree 目录</p></li><li><p>ls命令<br> ls -la  列出当前目录下所有文件的相信信息, 包括隐藏文件.<br> ls -ltr 列出当前目录下的文件, 按照时间逆向排序.(t:time,r:reverse)</p></li></ol><p>ls -l命令输出详解如下：</p><p><img src="/images/linux_ls.png"><br>说明：（1）计数参数：对于目录来说, 链接计数等于该目录下所有的目录总数(含. 和 ..), 但是不包含该目录的子目录下的目录文件数量, 执行ls -la命令可以进行查看。对于文件来说, 指的是该文件所有的硬链接文件数量。<br>（2）大小参数（单位：字节）：如果是目录: 只表示目录大小, 不包含目录中的内容, 目录大小为4k。如果是文件：表示文件大小.</p><p>8.cd命令：临近两个目录直接切换：cd -<br>如：开始在: &#x2F;home&#x2F;itcast&#x2F;test&#x2F;course&#x2F;day1&#x2F;test目录下, 执行了cd命令切换到家目录下, 然后在执行cd -又回到了&#x2F;home&#x2F;itcast&#x2F;test&#x2F;course&#x2F;day1&#x2F;test下.<br>~代表用户的家目录，如：cd等价于cd ~等价于cd &#x2F;home&#x2F;qcc</p><p>9.which命令：查看命令所在的目录。 如which ls   which cp。</p><p>10.pwd：显示当前目录。</p><p>11.touch命令<br>如果文件不存在, 创建新文件, 如果文件存在, 更新文件的最后修改时间（内容不变）。<br>命令使用方式：touch 文件名</p><p>12.mkdir命令<br>创建新目录, make directory<br>创建方式：mkdir目录名<br>如果创建多级目录需要添加参数 -p （parent）<br>例 ：在当前目录下创建目录:  mkdir mydir<br>在宿主目录下创建多级目录:  mkdir -p ~&#x2F;test&#x2F;hello&#x2F;world&#x2F;aa</p><p>13.rm命令<br>删除文件： rm 文件名<br>删除目录： rm  -r 目录名<br>参数：<br>-r：递归删除目录，删除目录必须添加此参数<br>-i：提示用户是否删除文件或目录<br>-f：强制删除<br>注意事项：<br>使用rm命令删除的文件或目录不会放入回收站中，数据不易恢复。</p><p>14.cp命令<br>cp命令: cp 源文件  目标文件<br>cp file1 file2 (不存在)<br>cp file1 file2 (存在)<br>cp file dir(必须存在)<br>cp -r dir1 dir2(不存在)<br>cp -r dir1 dir2(存在)<br>cp -a file1 file2（将属性也复制，创建时间也会被复制）</p><p>15.mv命令<br>mv命令: mv 源文件  目标文件<br>改名:<br>mv file1 file2(不存在)<br>mv file1 file2(存在)<br>mv dir1 dir2(不存在)</p><p>移动:<br>mv file dir (必须存在)<br>mv dir1 dir2(存在) </p><p>16.查看文件内容<br>cat more less head tail<br>tail -f test.log: 实时显示文件内容</p><h2 id="一个比较重要的应用：实时的显示日志-tail-f-test-log"><a href="#一个比较重要的应用：实时的显示日志-tail-f-test-log" class="headerlink" title="一个比较重要的应用：实时的显示日志 : tail -f test.log"></a>一个比较重要的应用：实时的显示日志 : tail -f test.log</h2><h2 id="例子：一个终端tail-f-test-log-另一个终端-echo-“hello-world”-gt-gt-test-log（-gt-是覆盖，-gt-gt-是追加）"><a href="#例子：一个终端tail-f-test-log-另一个终端-echo-“hello-world”-gt-gt-test-log（-gt-是覆盖，-gt-gt-是追加）" class="headerlink" title="例子：一个终端tail -f test.log , 另一个终端: echo “hello world” &gt;&gt;test.log（&gt;是覆盖，&gt;&gt;是追加）"></a>例子：一个终端tail -f test.log , 另一个终端: echo “hello world” &gt;&gt;test.log（&gt;是覆盖，&gt;&gt;是追加）</h2><p>17.软链接（文件和目录都可以创建软链接）</p><ul><li><p>相当于windows下的快捷方式。</p></li><li><p>ln -s 源文件 链接文件</p></li><li><p>注意点: 创建软连接，源文件一定要使用绝对路径！ 否则, 当软连接文件<br> 移动位置之后, 就会找不到指向的文件了.</p></li><li><p>软连接文件的大小是: 路径+文件名的总字节数，软链接存放的实际上存放的是源文件的路径。</p></li><li><p>删除源文件后，软链接就无法访问数据了。</p></li></ul><p>18.硬链接<br><img src="/images/hard_link.png"></p><ul><li><p>ln soucefile  desfile</p></li><li><p>硬链接不能建立在目录上</p></li><li><p>硬连接不能跨文件系统<br>硬链接文件和源文件的inode是相同的，文件系统的inode要求唯一，跨文件系统可能会使inode不同, 所以硬链接不能跨文件系统</p></li><li><p>创建一个硬链接文件, 硬链接计数+1, 删除一个则-1;    </p></li><li><p>ls -li: 可以查看文件的inode</p></li><li><p>作用:<br>1 可以起到同步文件的作用<br>2 可以起到保护文件的作用（当计数器变为0，才会删除）</p></li></ul><p>19.chmod修改文件权限</p><ul><li><p>文字设定法: chmod ug+wx file.log  (u&#x2F;g&#x2F;o&#x2F;a  r&#x2F;w&#x2F;x)  (+&#x2F;-&#x2F;&#x3D;)</p></li><li><p>数字设定法: chmod 777  file.log</p></li></ul><p>20.chown修改文件所有者和所属组（：&#x2F;.都可以）<br>sudo chown qcc:qcc aa.log<br>sudo chown mytest.mytest aa.log<br>sudo chown :mytest aa.log<br>sudo chown .mytest aa.log</p><p>21.chgrp修改文件所属组<br>sudo chgrp mytest aa.log<br>22.find命令<br>-name:<br>-type:<br>-size<br>-maxdepth&#x2F;mindepth<br>-ctime&#x2F;atime&#x2F;mtime<br>find path -name “<em>.c” -exec shell命令 {} ;<br>find path -name “</em>.c” | xargs shell命令<br>23.grep<br>-n:显示行<br>-i:忽略大小写<br>-v:不显示包含搜素字符串的行，显示其他行<br>-r:    若是目录，可以递归搜索<br>find和grep结合使用:<br>find .&#x2F; -name “*.sh” | xargs grep -n “while”<br>24.软件安装和卸载<br>在线安装<br>软件安装：sudo apt-get install 软件名<br>软件卸载：sudo apt-get remove 软件名<br>更新软件列表：sudo apt-get update<br>清理安装包：sudo apt-get clean<br>清理的是缓存路径：&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives<br>软件包安装<br>在Ubuntu系统下必须有deb格式的安装包<br>软件安装<br>sudo dpkg -i xxx.deb<br>软件卸载<br>sudo dpkg -r 软件名<br>25.压缩和解压缩</p><ul><li><p>gzip和bzip2（不常用）<br>不能压缩目录，只能一个一个文件进行压缩，压缩之后会使原文件消失<br>gzip *    压缩当前目录下所有的文件, 但是目录不能压缩<br>gunzip *  解压当前目录下所有的.gz文件<br>bzip2 *   压缩当前目录下所有的文件, 但是目录不能压缩<br>bunzip2 * 解压当前目录下所有的. bz2文件</p></li><li><p>tar(常用)<br>tar -cvf my.tar file dir(打包成tar包，并未压缩！！！)<br>tar -xvf my.tar -C mydir（解开tar包）(-C指定解压后的目录)(c&#x2F;x互斥出现)</p></li></ul><p>(gzip形式压缩与解压)<br>tar -zcvf my.tar.gz file dir<br>tar -zxvf my.tar.gz -C mydir<br>(bzip2形式压缩和解压)<br>tar -jcvf my.tar.bz2 file dir<br>tar -jxvf my.tar.bz2 -C mydir</p><p>（zip形式压缩与解压）<br>zip:<br>      zip -r xxx file dir （-r是有目录的情况）<br>unzip:<br>      unzip xxx.zip -d &#x2F;home&#x2F;itcast&#x2F;test&#x2F;day1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/17/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/04/17/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http服务器项目开发</title>
      <link href="/2022/04/16/http%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
      <url>/2022/04/16/http%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>samba服务器</title>
      <link href="/2022/04/13/samba%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/04/13/samba%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="samba服务器简介"><a href="#samba服务器简介" class="headerlink" title="samba服务器简介"></a>samba服务器简介</h2><ul><li><p>实现windows和unix系列系统之间能够相互沟通，就产生了samba服务。</p></li><li><p>samba是架构在NetBIOS（Network Basic Input&#x2F;Output System,网上基本输入输出系统）这个通信协议上面所开发出来的。NetBIOS是由IBM发展出来，目的是要让局域网络内少数计算机进行网络连接的一个通信协议，因此NetBIOS是无法跨越路由的，而现在Samba不仅能与局域网主机分享资源，还能与全世界的电脑分享资源，就是由NetBIOS over TCP&#x2F;IP技术解决。由于NetBIOS在局域网内实在是很好用，所以微软的网络架构就使用了这个协议。而samba最早发展的时候，其实是想要让linux系统可以加入windows的系统当中来共享使用彼此的文件数据，所以samba就架构在NetBIOS发展出来了</p></li></ul><h2 id="Ubuntu安装Samba服务器"><a href="#Ubuntu安装Samba服务器" class="headerlink" title="Ubuntu安装Samba服务器"></a>Ubuntu安装Samba服务器</h2><ol><li>确认安装：dpkg l | grep samba</li><li>安装：sudo apt-get install samba samba-common</li><li>卸载：sudo apt-get autoremove samba<h2 id="Samba服务器配置"><a href="#Samba服务器配置" class="headerlink" title="Samba服务器配置"></a>Samba服务器配置</h2></li></ol><ul><li>sudo vim &#x2F;etc&#x2F;samba&#x2F;smb.conf</li><li>在文件的最后添加</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">comment=This is samba dir</span><br><span class="line">path=/home/qcc/</span><br><span class="line">writable=yes</span><br><span class="line">browseable=yes</span><br></pre></td></tr></table></figure><ul><li>增加samba用户</li><li>sudo smbpasswd -a qcc (密码设置需要与linux的密码一致)<h2 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h2></li><li>注意添加新用户后，需要重启samba服务器</li><li>启动：sudo service smbd start</li><li>关闭 ：sudo service smbd stop<br>##直接在windows在编码</li><li>在windows色目录上方，写入：\局域网（linux的）ip地址,然后就能在windows下编辑linux下的文件了！</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/2022/04/13/linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/13/linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接"></a>硬链接与软链接</h2><ul><li>硬链接：ln 源文件 目标文件</li><li>软链接：ln -s 源文件 目标文件  </li><li>区别：创建硬链接后，所有硬链接文件（包括源文件）都指向内存中的存放（源文件）数据的一块区域，此时会维护一个计数器，每创建一个硬链接，计数器++，删除源文件不会影响其他硬链接文件访问数据，只不过是计数器–，当计数器为0时，系统才会回收内存。而软链接则是相当于创建了一个文件别名，当删除源文件后，该软链接则会失效，访问不到数据。</li></ul><h2 id="改变文件所有权chown和chgrp"><a href="#改变文件所有权chown和chgrp" class="headerlink" title="改变文件所有权chown和chgrp"></a>改变文件所有权chown和chgrp</h2><ul><li><p>用法：chown [option] [用户]：[属组] 目标文件</p></li><li><p>-r表示递归的改变（一个目录以及其子目录的所有权设置）</p></li><li><p>例子:chown qcc:qcc test.c &#x2F;&#x2F;将test.c的用户和属组都该变为qcc</p></li><li><p>用法：chgrp 属组 目标文件</p></li><li><p>作用：改变目标文件的数组（change group）</p></li></ul><h2 id="chmod改变文件权限"><a href="#chmod改变文件权限" class="headerlink" title="chmod改变文件权限"></a>chmod改变文件权限</h2><ul><li><p>第一种方式：通过用户组+&#x2F;-权限完成，具体来说，用户组包括了文件属主(u),文件属组(g)，其他人(o)和所有人(a)，而权限包括(r,w,x)。</p></li><li><p>用法：chmod u+r,g+w,o+r 目标文件</p></li><li><p>第二种方式：分别利用三位的二进制完成，（—（用户）—（组）—（其他人））</p></li><li><p>用法：例如：101(r,w,x)–&gt;5代表赋予读和执行权限。chmod 555 目标文件,第一个5是改变用户的权限，第二个是组，第三个是其他人！</p></li><li><p>增加用户操作</p></li><li><p>useradd -g 属组 用户</p></li><li><p>注意：添加后的用户是不能切换到root权限下的，如果想切换，需要改变&#x2F;etc&#x2F;sudoers文件，将其进行提权。<br><img src="/images/linux.png"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络通信与socket编程</title>
      <link href="/2022/04/11/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E4%B8%8Esocket%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/04/11/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E4%B8%8Esocket%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-socket通信的3要素"><a href="#1-socket通信的3要素" class="headerlink" title="1.socket通信的3要素"></a>1.socket通信的3要素</h1><ol><li>通信的目的地址</li><li>使用的端口号（例如：http默认的是80端口，smtp(邮件传输端口):25）</li><li>使用的传输层协议（如：TCP&#x2F;UDP）</li></ol><h1 id="2-socket概念"><a href="#2-socket概念" class="headerlink" title="2.socket概念"></a>2.socket概念</h1><ul><li><p>（int类型） 在Linux环境下，用于表示进程间网络通信的特殊文件类型，本质为内核借助缓冲区形成的伪文件。</p></li><li><p>套接字的读写和文件操作一致，区别是文件主要应用于本地持久化数据的读写（磁盘），而套接字应用于网络进程间数据的传递。</p></li><li><p>在TCP&#x2F;IP协议中，IP地址+TCP或UDP端口号来唯一标识网络通信中的一个进程。IP地址+端口号就对应一个socket，欲建立连接的两个进程各有一个socket，那么这两个socket组成的socket pair就唯一的标识一个连接，因此，可以用socket来描述网络连接中的一对一关系。<br><img src="/images/c_s.png"></p></li><li><p>在网络通信中，套接字一定是成对出现的，一端的发送缓冲区对应另一端的接收缓冲区，使用同一个文件描述符发送缓冲区和接收缓冲区。</p></li></ul><h1 id="3-socket通信创建流程"><a href="#3-socket通信创建流程" class="headerlink" title="3.socket通信创建流程"></a>3.socket通信创建流程</h1><p><img src="/images/socket.png"></p><h1 id="4-socket编程基础"><a href="#4-socket编程基础" class="headerlink" title="4.socket编程基础"></a>4.socket编程基础</h1><ul><li>大端字节序：低地址存放高字节！</li><li>小端字节序：低地址存放低字节！</li><li>网络数据流发出的顺序是，先发送的数据是低地址存放的数据，后发送的数据是高地址存放的数据。</li><li>TCP&#x2F;IP协议规定：网络数据流应采用大端字节序。</li><li>由于网络数据流采取的是大端字节序，所以，如果主机是小端字节序，那么需要转化为大端字节序，再进行传输；如果主机是大端字节序，则不做转化。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//本机字节序测试</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">//借助共用体，公用同一块内存空间</span><br><span class="line">union&#123;</span><br><span class="line">short s;</span><br><span class="line">char c[sizeof(short)];</span><br><span class="line">&#125; un2;</span><br><span class="line"></span><br><span class="line">union&#123;</span><br><span class="line">int s;</span><br><span class="line">char c[sizeof(int)];</span><br><span class="line">&#125; un4;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">printf(&quot;sizeof(short)=[%d],sizeof(int)=[%d]\n&quot;,sizeof(short),sizeof(int));</span><br><span class="line"></span><br><span class="line">//测试short类型，运行结果可以看出，低地址存放了低字节，所以是小端字节序！！！</span><br><span class="line">un2.s=0x0102;</span><br><span class="line">printf(&quot;%d,%d,%d\n&quot;,un2.c[0],un2.c[1],un2.s);</span><br><span class="line"></span><br><span class="line">//测试int类型</span><br><span class="line">un4.s=0x01020304;</span><br><span class="line">printf(&quot;%d,%d,%d,%d,%d\n&quot;,un4.c[0],un4.c[1],un4.c[2],un4.c[3],un4.s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行结果（低地址存放了低字节，所以是小端字节序）：</li></ul><p><img src="/images/socket.png"></p><ul><li>对应的API函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">uint32_t htonl(uint32_t hostlong);</span><br><span class="line">uint16_t htons(uint16_t hostshort);</span><br><span class="line">uint32_t ntohl(uint32_t netlong);</span><br><span class="line">uint16_t ntohs(uint16_t netshort);</span><br><span class="line">h表示host，n表示network，l表示32位长整数，s表示16位短整数。</span><br><span class="line">32位的是IP地址，16位的是端口号</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-1-sockaddr数据结构-存在历史遗留问题"><a href="#4-1-sockaddr数据结构-存在历史遗留问题" class="headerlink" title="4.1 sockaddr数据结构(存在历史遗留问题)"></a>4.1 sockaddr数据结构(存在历史遗留问题)</h2><ul><li>很多网络编程函数诞生早于IPv4协议，那时候都使用的是sockaddr结构体,为了向前兼容，现在sockaddr退化成了（void *）的作用，传递一个地址给函数，至于这个函数是sockaddr_in还是其他的，由地址族确定，然后函数内部再强制类型转化为所需的地址类型。</li></ul><p><img src="/images/sockaddr.png"></p><ul><li>如上图，sockaddr_in实际上是将sockaddr进行了细化，16位的地址类型没变，将剩下的14个字节的数据分为2个字节的端口号，4个字节的IP地址（IPV4），8个字节的填充位。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr &#123;</span><br><span class="line">sa_family_t sa_family; /* address family, AF_xxx */ 协议家族，AF_INET代表IPV4</span><br><span class="line">char sa_data[14];/* 14 bytes of protocol address */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> struct sockaddr_in &#123;</span><br><span class="line">     sa_family_t    sin_family; /* address family: AF_INET */</span><br><span class="line">     in_port_t      sin_port;   /* port in network byte order */ 端口号</span><br><span class="line">     struct in_addr sin_addr;   /* internet address */  IP地址</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> /* Internet address. */</span><br><span class="line">struct in_addr &#123;</span><br><span class="line">    uint32_t       s_addr;     /* address in network byte order */注意IP地址是32位无符号整型</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>IPv4的地址格式定义在netinet&#x2F;in.h中，IPv4地址用sockaddr_in结构体表示，包括16位端口号和32位IP地址，但是sock API的实现早于ANSI C标准化，那时还没有void *类型，因此这些像bind 、accept函数的参数都用struct sockaddr *类型表示，在传递参数之前要强制类型转换一下，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr_in servaddr;</span><br><span class="line">bind(listen_fd, (struct sockaddr *)&amp;servaddr, sizeof(servaddr));/* initialize servaddr */</span><br></pre></td></tr></table></figure><h2 id="4-2-IP地址转化函数"><a href="#4-2-IP地址转化函数" class="headerlink" title="4.2 IP地址转化函数"></a>4.2 IP地址转化函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">int inet_pton(int af, const char *src, void *dst);</span><br><span class="line">const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);</span><br><span class="line">af 取值可选为 AF_INET 和 AF_INET6 ，即和 ipv4 和ipv6对应</span><br><span class="line">支持IPv4和IPv6</span><br></pre></td></tr></table></figure><p>其中inet_pton和inet_ntop不仅可以转换IPv4的in_addr，还可以转换IPv6的in6_addr。<br>因此函数接口是void *addrptr</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line"></span><br><span class="line">    char ip[]=&quot;2.3.4.5&quot;;</span><br><span class="line">    char server_ip[64];</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in server_addr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    inet_pton(AF_INET, ip, &amp;server_addr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    printf(&quot;s_addr : %x\n&quot;, server_addr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    printf(&quot;s_addr from net to host: %x\n&quot;, ntohl(server_addr.sin_addr.s_addr));</span><br><span class="line"></span><br><span class="line">    inet_ntop(AF_INET, &amp;server_addr.sin_addr.s_addr, server_ip, 64);</span><br><span class="line"></span><br><span class="line">    printf(&quot;server ip : %s\n&quot;, server_ip);</span><br><span class="line"></span><br><span class="line">    printf(&quot;INADDR_ANY: %d\n&quot;, INADDR_ANY);</span><br><span class="line">    server_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    inet_ntop(AF_INET, &amp;server_addr.sin_addr.s_addr, server_ip, 64);</span><br><span class="line">    printf(&quot;INADDR_ANY ip : %s\n&quot;, server_ip);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#5.socket编程函数</p><p>-** 5.1 socket函数**</p><ul><li>socket()打开一个网络通讯端口，如果成功的话，就像open()一样返回一个文件描述符，应用程序可以像读写文件一样用read&#x2F;write在网络上收发数据，如果socket()调用出错则返回-1。对于IPv4，domain参数指定为AF_INET。对于TCP协议，type参数指定为SOCK_STREAM，表示面向流的传输协议。如果是UDP协议，则type参数指定为SOCK_DGRAM，表示面向数据报的传输协议。protocol参数的介绍从略，指定为0即可.</li><li>函数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int socket(int domain, int type, int protocol);</span><br></pre></td></tr></table></figure><p>-** 5.2 bind函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br><span class="line">sockfd：</span><br><span class="line">socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">构造出IP地址加端口号</span><br><span class="line">addrlen:</span><br><span class="line">sizeof(addr)长度</span><br><span class="line">返回值：</span><br><span class="line">成功返回0，失败返回-1, 设置errno</span><br></pre></td></tr></table></figure><ul><li>服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用bind绑定一个固定的网络地址和端口号。</li><li>bind()的作用是将参数sockfd和addr绑定在一起，使sockfd这个用于网络通讯的文件描述符监听addr所描述的地址和端口号。前面讲过，struct sockaddr *是一个通用指针类型，addr参数实际上可以接受多种协议的sockaddr结构体，而它们的长度各不相同，所以需要第三个参数addrlen指定结构体的长度。如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr_in servaddr;</span><br><span class="line">bzero(&amp;servaddr, sizeof(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">servaddr.sin_port = htons(6666);</span><br></pre></td></tr></table></figure><ul><li>首先将整个结构体清零，然后设置地址类型为AF_INET，网络地址为INADDR_ANY，这个宏表示本地的任意IP地址，因为服务器可能有多个网卡，每个网卡也可能绑定多个IP地址，这样设置可以在所有的IP地址上监听，直到与某个客户端建立了连接时才确定下来到底用哪个IP地址，端口号为6666</li></ul><p>-** 5.3 listen函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int listen(int sockfd, int backlog);</span><br><span class="line">sockfd:</span><br><span class="line">socket文件描述符</span><br><span class="line">backlog:</span><br><span class="line">在Linux 系统中，它是指排队等待建立3次握手队列长度</span><br></pre></td></tr></table></figure><ul><li><p>查看系统默认backlog<br>cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog</p></li><li><p>改变 系统限制的backlog 大小<br>vim &#x2F;etc&#x2F;sysctl.conf</p></li><li><p>最后添加<br>net.core.somaxconn &#x3D; 1024<br>net.ipv4.tcp_max_syn_backlog &#x3D; 1024</p></li><li><p>保存，然后执行<br>sysctl -p</p></li><li><p>注意：backlog需要手动去修改系统的内核参数，不然只调用listen是无法修改的！！！</p></li><li><p>典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的accept()返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未accept的客户端就处于连接等待状态，listen()声明sockfd处于监听状态，并且最多允许有backlog个客户端处于连接等待状态，如果接收到更多的连接请求就忽略。listen()成功返回0，失败返回-1。</p></li></ul><p>-** 5.4 accept函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</span><br><span class="line">sockdf:</span><br><span class="line">socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">传出参数，返回链接客户端地址信息，含IP地址和端口号</span><br><span class="line">addrlen:</span><br><span class="line">传入传出参数（值-结果）,传入sizeof(addr)大小，函数返回时返回真正接收到地址结构体的大小</span><br><span class="line">返回值：</span><br><span class="line">成功返回一个新的socket文件描述符，用于和客户端通信，失败返回-1，设置errno</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>三次握手完成后，服务器调用accept()接受连接，如果服务器调用accept()时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。addr是一个传出参数，accept()返回时传出客户端的地址和端口号。addrlen参数是一个传入传出参数（value-result argument），传入的是调用者提供的缓冲区addr的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给addr参数传NULL，表示不关心客户端的地址。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while (1) &#123;</span><br><span class="line">cliaddr_len = sizeof(cliaddr);</span><br><span class="line">connfd = accept(listenfd, (struct sockaddr *)&amp;cliaddr, &amp;cliaddr_len);</span><br><span class="line">n = read(connfd, buf, MAXLINE);</span><br><span class="line">......</span><br><span class="line">close(connfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>整个是一个while死循环，每次循环处理一个客户端连接。由于cliaddr_len是传入传出参数，每次调用accept()之前应该重新赋初值。accept()的参数listenfd是先前的监听文件描述符，而accept()的返回值是另外一个文件描述符connfd，之后与客户端之间就通过这个connfd通讯，最后关闭connfd断开连接，而不关闭listenfd，再次回到循环开头listenfd仍然用作accept的参数。accept()成功返回一个文件描述符，出错返回-1。</li></ul><p>-** 5.5 connect函数**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt; /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br><span class="line">sockdf:</span><br><span class="line">socket文件描述符</span><br><span class="line">addr:</span><br><span class="line">传入参数，指定服务器端地址信息，含IP地址和端口号</span><br><span class="line">addrlen:</span><br><span class="line">传入参数,传入sizeof(addr)大小</span><br><span class="line">返回值：</span><br><span class="line">成功返回0，失败返回-1，设置errno</span><br></pre></td></tr></table></figure><ul><li>客户端需要调用connect()连接服务器，connect和bind的参数形式一致，区别在于bind的参数是自己的地址，而connect的参数是对方的地址。connect()成功返回0，出错返回-1。</li></ul><p>-** 5.6 出错函数处理**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char *strerror(int errnum);     /* See NOTES */</span><br><span class="line">errnum:</span><br><span class="line">传入参数,错误编号的值，一般取 errno 的值   该方法可以配合日志打印函数，输出错误在日志中</span><br><span class="line">返回值：</span><br><span class="line">错误原因</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">void perror(const char *s);    /* See NOTES */</span><br><span class="line">s:</span><br><span class="line">传入参数,自定义的描述</span><br><span class="line">返回值：</span><br><span class="line">无</span><br><span class="line">向标准出错stderr 输出出错原因,不能打印在日志中</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2022/04/10/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/04/10/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h2><p><img src="/images/zijie1.jpg"><br><img src="/images/zijie2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> int main() &#123;</span><br><span class="line"> int dx[4] = &#123; 0,0,1,-1 &#125;;</span><br><span class="line"> int dy[4] = &#123; 1,-1,0,0 &#125;;</span><br><span class="line"> int num;</span><br><span class="line"> cin &gt;&gt; num;</span><br><span class="line"> int w, h;</span><br><span class="line"> vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;res;</span><br><span class="line"> while (num&gt;0) &#123;</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;w;</span><br><span class="line">cin&gt;&gt; h;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt;matrix(w,vector&lt;int&gt;(h));</span><br><span class="line">for (int i = 0; i &lt; w; i++)</span><br><span class="line">for (int j = 0; j &lt; h; j++)</span><br><span class="line">cin &gt;&gt; matrix[i][j];</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; w; i++) &#123;</span><br><span class="line">for (int j = 0; j &lt; h; j++) &#123;</span><br><span class="line">if (matrix[i][j] == 1) &#123;</span><br><span class="line">int water = 0;</span><br><span class="line">int new_x;</span><br><span class="line">int new_y;</span><br><span class="line">for (int k = 0; k &lt; 4; k++) &#123;</span><br><span class="line">new_x = i + dx[k];</span><br><span class="line">new_y = j + dy[k];</span><br><span class="line">if (new_x &gt;= 0 &amp;&amp; new_x &lt; w &amp;&amp; new_y &gt;= 0 &amp;&amp; new_y &lt; h) &#123;</span><br><span class="line">if (matrix[new_x][new_y] == 0)</span><br><span class="line">water++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (water &gt;= 2)</span><br><span class="line">matrix[i][j] = -1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; w; i++)</span><br><span class="line">for (int j = 0; j &lt; h; j++)</span><br><span class="line">if (matrix[i][j] == -1)</span><br><span class="line">matrix[i][j] = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res.push_back(matrix);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num--;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //这样输出会越界，因为3维数组中的每一个二维数组可能不相同！！！  （2，3，4）</span><br><span class="line">/* for (int i = 0; i &lt; res.size(); i++) &#123;</span><br><span class="line"> for (int j = 0; j &lt; res[0].size(); j++) &#123;</span><br><span class="line"> for (int k = 0; k &lt; res[0][0].size(); k++) &#123;</span><br><span class="line"> cout &lt;&lt; res[i][j][k] &lt;&lt; &quot; &quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;*/</span><br><span class="line"> //二维数组作为缓冲，进行输出！</span><br><span class="line">  for (int i = 0; i &lt; res.size(); i++) &#123;</span><br><span class="line">  vector&lt;vector&lt;int&gt;&gt;temp=res[i];</span><br><span class="line"> for (int j = 0; j &lt; temp.size(); j++) &#123;</span><br><span class="line"> for (int k = 0; k &lt; temp[0].size(); k++) &#123;</span><br><span class="line"> cout &lt;&lt; temp[j][k] &lt;&lt; &quot; &quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/04/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/04/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划的常见问题"><a href="#动态规划的常见问题" class="headerlink" title="动态规划的常见问题"></a>动态规划的常见问题</h2><ul><li>动规基础（爬楼梯，斐波那契数）</li><li>背包问题</li><li>打家劫舍</li><li>股票问题</li><li>子序列问题</li></ul><h2 id="动态规划五部曲"><a href="#动态规划五部曲" class="headerlink" title="动态规划五部曲"></a>动态规划五部曲</h2><ul><li>dp数组以及下标的含义（例如dp[i],dp[i][j]等等）</li><li>递推公式</li><li>dp数组如何初始化</li><li>遍历顺序</li><li>打印dp数组</li></ul><h3 id="动态规划基础题目一：斐波那契数列"><a href="#动态规划基础题目一：斐波那契数列" class="headerlink" title="动态规划基础题目一：斐波那契数列"></a>动态规划基础题目一：斐波那契数列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1. dp[i]：第i个斐波那契数的值是dp[i].</span><br><span class="line">2. 递推公式：dp[i]=dp[i-1]+dp[i-2];</span><br><span class="line">3. 初始化：dp[0]=1,dp[1]=1.</span><br><span class="line">4. 遍历顺序：从小到大遍历.</span><br><span class="line">5. 打印dp数组，主要用来debug.</span><br><span class="line"></span><br><span class="line">解法一：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fib(int n) &#123;</span><br><span class="line">        vector&lt;int&gt;dp(n+1,0);</span><br><span class="line">        if(n==0||n==1)</span><br><span class="line">            return n;</span><br><span class="line">        dp[0]=0;</span><br><span class="line">        dp[1]=1;</span><br><span class="line">            dp[i]=dp[i-1]+dp[i-2];</span><br><span class="line">        return dp[n];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">解法二（优化内存后，状态压缩后的解法）：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int fib(int n) &#123;</span><br><span class="line">        if(n==0||n==1)</span><br><span class="line">            return n;</span><br><span class="line">    vector&lt;int&gt;dp(2,0);</span><br><span class="line">    dp[0]=0;</span><br><span class="line">    dp[1]=1;</span><br><span class="line">    int sum=0;</span><br><span class="line">        for(int i=2;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum=dp[0]+dp[1];</span><br><span class="line">                dp[0]=dp[1];</span><br><span class="line">                dp[1]=sum;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        return sum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态规划基础题目二：使用最小的花费爬楼梯"><a href="#动态规划基础题目二：使用最小的花费爬楼梯" class="headerlink" title="动态规划基础题目二：使用最小的花费爬楼梯"></a>动态规划基础题目二：使用最小的花费爬楼梯</h3><p><img src="/images/leetcode746.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">五部曲</span><br><span class="line">1. dp[i]：代表爬到第i阶台阶所花费的最小代价cost。</span><br><span class="line">2. 递推公式：dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2])</span><br><span class="line">3. 初始化:dp[0]=0,dp[1]=0,因为可以直接从第0或者第1个台阶开始爬</span><br><span class="line">4. 遍历顺序：从小到大遍历</span><br><span class="line">5. 打印dp数组，debug手段。</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) &#123;</span><br><span class="line">        if(cost.size()==1)</span><br><span class="line">            return 0;</span><br><span class="line">        if(cost.size()==2)</span><br><span class="line">            return min(cost[0],cost[1]);</span><br><span class="line">    </span><br><span class="line">        vector&lt;int&gt;dp(cost.size()+1,0);</span><br><span class="line">        dp[0]=0;</span><br><span class="line">        dp[1]=0;</span><br><span class="line"></span><br><span class="line">        for(int i=2;i&lt;=cost.size();i++) </span><br><span class="line">            dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);</span><br><span class="line">        return dp[cost.size()];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程和线程同步</title>
      <link href="/2022/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程加锁与解锁"><a href="#线程加锁与解锁" class="headerlink" title="线程加锁与解锁"></a>线程加锁与解锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 尝试加锁,与Lock的区别是，trylock当拿不到锁时，不会死等（不会阻塞），转而去干其他的事；而lock会一直阻塞，直至拿到锁。</span><br><span class="line">int pthread_mutex_trylock(pthread_mutex_t *mutex);</span><br><span class="line">// 修改互斥锁的状态, 将其设定为锁定状态, 这个状态被写入到参数 mutex 中</span><br><span class="line">int pthread_mutex_lock(pthread_mutex_t *mutex);</span><br><span class="line">// 对互斥锁解锁</span><br><span class="line">int pthread_mutex_unlock(pthread_mutex_t *mutex);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><ol><li>加锁之后忘记解锁<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 场景1</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功, 当前循环完毕没有解锁, 在下一轮循环的时候自己被阻塞了</span><br><span class="line">        // 其余的线程也被阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        // 忘记解锁</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 场景2</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程被阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        if(xxx)</span><br><span class="line">        &#123;</span><br><span class="line">            // 函数退出, 没有解锁（解锁函数无法被执行了）</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.重复加锁，造成死锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        // 锁被锁住了, A线程阻塞</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 隐藏的比较深的情况</span><br><span class="line">void funcA()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void funcB()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;6; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前线程A加锁成功</span><br><span class="line">        // 其余的线程阻塞</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        funcA();// 重复加锁</span><br><span class="line">    ....</span><br><span class="line">    .....</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.当含有多个共享资源时，随意加锁，导致相互被阻塞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">thread A&#123;</span><br><span class="line">lock(x);</span><br><span class="line">lock(y);</span><br><span class="line">unlock(y);</span><br><span class="line">unlock(x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thread B&#123;</span><br><span class="line">lock(y);</span><br><span class="line">lock(x);</span><br><span class="line">unlock(x);</span><br><span class="line">unlock(y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">A拿到x锁，B拿到y锁就会导致死锁。一般可以加锁顺序相同，避免死锁，但是有的特定场景不适用（对共享资源的访问顺序有要求的情况）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><ul><li><p>避免多次锁定，多检查</p></li><li><p>对共享资源访问完毕之后，一定要解锁，或者在加锁的使用 trylock</p></li><li><p>如果程序中有多把锁，可以控制对锁的访问顺序 (顺序访问共享资源，但在有些情况下是做不到的)，另外也可以在对其他互斥锁做加锁操作之前，先释放当前线程拥有的互斥锁。</p></li><li><p>项目程序中可以引入一些专门用于死锁检测的模块</p></li></ul><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><ol><li>是一个锁；</li><li>读锁是共享的，写锁是互斥的；</li><li>写锁的优先级大于读的优先级。</li><li>如果说程序中所有的线程都对共享资源做写操作，使用读写锁没有优势，和互斥锁是一样的，如果说程序中所有的线程都对共享资源有写也有读操作，并且对共享资源读的操作越多，读写锁更有优势。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2022/04/04/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/04/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="回溯算法可以解决的问题"><a href="#回溯算法可以解决的问题" class="headerlink" title="回溯算法可以解决的问题"></a>回溯算法可以解决的问题</h2><ul><li>组合问题（无序的）</li><li>切割问题（字符串的切割方式）</li><li>子集问题</li><li>排列问题（有序的）</li><li>棋盘问题（N皇后，解数独）</li></ul><h2 id="回溯法的理解"><a href="#回溯法的理解" class="headerlink" title="回溯法的理解"></a>回溯法的理解</h2><ul><li>回溯法都可抽象为一个n叉树，横向是通过for循环来处理，纵向是通过递归来处理。</li></ul><h2 id="回溯法的模板"><a href="#回溯法的模板" class="headerlink" title="回溯法的模板"></a>回溯法的模板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void backtracing(参数)&#123;</span><br><span class="line">if(终止条件)&#123;</span><br><span class="line">收集结果！</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(集合的元素集)&#123;</span><br><span class="line">处理节点；</span><br><span class="line">递归函数；</span><br><span class="line">回溯操作；</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void backtracing(int n,int k,vector&lt;vector&lt;int&gt;&gt;&amp;res,vector&lt;int&gt;&amp;temp,int start)&#123;</span><br><span class="line">        if(temp.size()==k)//纵向递归到叶子节点，收集结果，返回上一层递归</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(temp);</span><br><span class="line">             return;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">        for(int i=start;i&lt;=n;i++)&#123;//横向for循环遍历</span><br><span class="line">            if(start&gt;n-(k-temp.size())+1)//剪枝操作！！！（限制i的范围！！！）</span><br><span class="line">                return;</span><br><span class="line">            temp.push_back(i);</span><br><span class="line">            backtracing(n, k, res, temp, i+1);</span><br><span class="line">            temp.pop_back();//删除temp最后一个元素，回溯到上一层！</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt;res;</span><br><span class="line">        vector&lt;int&gt;temp;</span><br><span class="line">        backtracing(n, k,res,temp,1);</span><br><span class="line">        return res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++面试准备</title>
      <link href="/2022/03/27/%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/03/27/%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="编译内存相关知识"><a href="#编译内存相关知识" class="headerlink" title="编译内存相关知识"></a>编译内存相关知识</h1><h2 id="C-的编译过程"><a href="#C-的编译过程" class="headerlink" title="C++的编译过程"></a>C++的编译过程</h2><h3 id="共分为四个步骤：编译预处理，编译，汇编，链接。"><a href="#共分为四个步骤：编译预处理，编译，汇编，链接。" class="headerlink" title="共分为四个步骤：编译预处理，编译，汇编，链接。"></a>共分为四个步骤：编译预处理，编译，汇编，链接。</h3><ul><li>编译预处理：处理#字符开头的指令。</li><li>编译：将源码.cpp文件编译成.s文件。</li><li>汇编：将.s文件汇编成.o文件。</li><li>链接：将一个或者多个.o文件链接形成.exe的可执行文件。<h3 id="静态链接和动态链接的区别"><a href="#静态链接和动态链接的区别" class="headerlink" title="静态链接和动态链接的区别"></a>静态链接和动态链接的区别</h3></li><li>静态链接：代码从其所在的静态链接库中的拷贝到可执行程序中，优点是执行速度快；缺点是浪费空间，因为可能会拷贝多份重复的代码，并且在目标文件更新后，需要重新编译链接生成新的exe文件。</li><li>动态链接：动态链接时并没有将真正的代码链接进去，而是保存了一个映射，在执行过程中，通过该映射再去寻找真正的代码。优点是节省内存，更新方便。缺点是相比静态链接速度较慢，性能有一定的损失。</li></ul><h2 id="C-的内存管理"><a href="#C-的内存管理" class="headerlink" title="C++的内存管理"></a>C++的内存管理</h2><h3 id="C-的内存分为栈，堆，全局区-x2F-静态区，代码区，常量区。"><a href="#C-的内存分为栈，堆，全局区-x2F-静态区，代码区，常量区。" class="headerlink" title="C++的内存分为栈，堆，全局区&#x2F;静态区，代码区，常量区。"></a>C++的内存分为栈，堆，全局区&#x2F;静态区，代码区，常量区。</h3><ul><li>栈：通常是局部变量，函数参数，返回值存放的地方，由编译器自动回收。</li><li>堆：程序员自己malloc申请的内存块，需要程序员自己申请和释放。</li><li>全局区&#x2F;静态区：静态变量和全局变量存储的地方，程序结束会自动释放。</li><li>常量区：存放常量，不允许修改，程序结束后会自动释放。</li><li>代码区：存放代码，不允许修改，可以执行。编译后的二进制文件存放的地方。</li><li>示例代码如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int a = 0; // </span><br><span class="line">char *b;  // a,b均在全局区</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   int v;//v在栈区</span><br><span class="line">   int *p=(int*)malloc(sizeof(int)*4)//申请16个字节内存在堆区</span><br><span class="line">   static int e;//e在静态区</span><br><span class="line">   string s=&quot;abvdefr&quot;;//s在栈区，&quot;abvdefr&quot;在常量区 </span><br><span class="line">   int d[]=&quot;qwe&quot;;//d在栈区，&quot;qwe&quot;在常量区</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈和堆的区别"><a href="#栈和堆的区别" class="headerlink" title="栈和堆的区别"></a>栈和堆的区别</h3><ol><li>申请和回收方式不同：栈由系统分配和回收，堆由程序员申请和回收。</li><li>存储方式不同：栈是一块连续的内存空间（向低地址扩展），堆的内存空间是不连续的（链表结构），(向高地址扩展)。</li><li>存放的内容不同：栈存放局部变量，函数参数，返回值等，堆存放的内容由程序员控制。</li><li>效率：栈的申请由系统自动分配，效率高。堆效率低，也容易产生内存碎片。</li><li>申请后的系统响应方式不同：栈空间申请后，如果当前剩余空间&gt;申请空间，则分配，否则，提示栈溢出；堆空间申请后，需要在链表上的寻找第一块大于等于申请空间的内存块，找到后将该块（首地址存放了本次分配的空间大小）从内存链表上删除，分配给堆空间，将剩余的空间链接在空闲链表上，用完回收后，再将其链接在空闲链表上。</li></ol><h2 id="全局变量，静态全局变量，局部变量，静态局部变量的区别"><a href="#全局变量，静态全局变量，局部变量，静态局部变量的区别" class="headerlink" title="全局变量，静态全局变量，局部变量，静态局部变量的区别"></a>全局变量，静态全局变量，局部变量，静态局部变量的区别</h2><ul><li>全局变量：具有全局作用域，全局变量只要在一个源文件中定义，就可以在同一工程中的其他源文件中使用，只不过需要利用关键字extern声明这个全局变量。</li><li>静态全局变量（static修饰的）：具有文件作用域，其他文件不能使用该全局变量，即使另一个文件中定义了与之同名的静态全局变量，也是不同的变量。</li><li>局部变量：具有局部作用域，并不是一直存在，只是在其作用域内存在，出了其作用域就会被回收。</li><li>局部静态变量：具有局部作用域，只初始化一次，到程序运行结束前一直存在，只对定义自己的函数体可见（自己作用域内），出了作用域就不可见。</li></ul><h2 id="pragma-once和-ifndef-define-endif解读"><a href="#pragma-once和-ifndef-define-endif解读" class="headerlink" title="#pragma once和#ifndef #define #endif解读"></a>#pragma once和#ifndef #define #endif解读</h2><h3 id="作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如-a-h中包含了b-h-但是在c-cpp中包含了a-h和b-h，即：b-h就被重复包含了）。"><a href="#作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如-a-h中包含了b-h-但是在c-cpp中包含了a-h和b-h，即：b-h就被重复包含了）。" class="headerlink" title="作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如:a.h中包含了b.h,但是在c.cpp中包含了a.h和b.h，即：b.h就被重复包含了）。"></a>作用：都是为了防止同一个头文件被重复编译。即：在同一个cpp文件中重复包含了某一个头文件（嵌套头文件时容易出现，例如:a.h中包含了b.h,但是在c.cpp中包含了a.h和b.h，即：b.h就被重复包含了）。</h3><h3 id="头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个-cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。"><a href="#头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个-cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。" class="headerlink" title="头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个.cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。"></a>头文件中不能声明全局变量，因为当头文件中声明了全局变量后，如果多个.cpp文件中包含了这个头文件，这个全局变量就会被定义多次，出现重复定义错误。</h3><h2 id="三种继承方式"><a href="#三种继承方式" class="headerlink" title="三种继承方式"></a>三种继承方式</h2><p>1.public 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private</p><p>2.protected 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private</p><p>3.private 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private</p><h2 id="public-protected-private访问权限"><a href="#public-protected-private访问权限" class="headerlink" title="public,protected,private访问权限"></a>public,protected,private访问权限</h2><p><img src="/images/lei.png"></p><h2 id="如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建"><a href="#如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建" class="headerlink" title="如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建"></a>如何限制类的对象只能在堆上创建，如何限制对象只能在栈创建</h2><h3 id="创建对象的方式有两种，即：堆创建（new出来的）和栈创建-一般创建，例如：A-a-。"><a href="#创建对象的方式有两种，即：堆创建（new出来的）和栈创建-一般创建，例如：A-a-。" class="headerlink" title="创建对象的方式有两种，即：堆创建（new出来的）和栈创建(一般创建，例如：A a)。"></a>创建对象的方式有两种，即：堆创建（new出来的）和栈创建(一般创建，例如：A a)。</h3><ol><li>限制对象只能创建在栈上：通过重载new和detele函数为类的私有函数，因为默认的new创建会将对象创建在堆上。</li><li>限制对象只能创建在堆上：将构造和析构置为保护，在类外调用create构造对象（堆上创建），析构置为保护是为了在其派生类中也能访问析构函数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">    A() &#123;&#125;</span><br><span class="line">    ~A() &#123;&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    static A *create()</span><br><span class="line">    &#123;</span><br><span class="line">        return new A();</span><br><span class="line">    &#125;</span><br><span class="line">    void destory()</span><br><span class="line">    &#123;</span><br><span class="line">        delete this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题</title>
      <link href="/2022/03/26/leetcode/"/>
      <url>/2022/03/26/leetcode/</url>
      
        <content type="html"><![CDATA[<h2 id="轮转数组"><a href="#轮转数组" class="headerlink" title="轮转数组"></a>轮转数组</h2><p><img src="/images/leetcode189.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void rotate(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">       k=k%nums.size();     </span><br><span class="line">       vector&lt;int&gt;temp;</span><br><span class="line">       for(int i=0;i&lt;nums.size();i++)  //创建一个临时数组，保存对应保存nums的所有元素</span><br><span class="line">            temp.push_back(nums[i]);   </span><br><span class="line">      int i=0;//记录当前需要移动的元素下标</span><br><span class="line">      while(i&lt;nums.size())&#123;  </span><br><span class="line">          int new_index=(i+k)%nums.size(); //当前元素移动后的最终位置！</span><br><span class="line">          nums[new_index]=temp[i];//将当前元素（待移动元素）放在轮转后的最终位置上。</span><br><span class="line">          i++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
